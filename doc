//===== rAthena Documentation ================================
//= Achievement Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20200220
//===== Description: =========================================
//= Explanation of the achievements_db.yml file and structure.
//============================================================

---------------------------------------

Id: Unique achievement ID.

---------------------------------------

Group: Achievement group type. Each achievement type calls a specific objective check.
Valid groups:
	None - Can be used for custom achievements that are given through a script with no trigger events.
	Add_Friend - Triggered when a player adds a friend.
	Adventure - Does not trigger automatically. These are triggered by the achievementcomplete script command.
	Baby - Triggered when a player becomes a baby job.
	Battle - Triggered when a player kills a monster.
	Chatting - Aegis uses this when talking to a NPC. These are triggered by the achievementupdate script command.
	Chatting_Count - Triggered when a player has a chatroom open and others join.
	Chatting_Create - Triggered when a player creates a chatroom.
	Chatting_Dying - Triggered when a player creates a chatroom and dies with it open.
	Eat - Unknown.
	Get_Item - Triggered when a player gets an item that has a specific sell value.
	Get_Zeny - Triggered when a player gets a specific amount of zeny at once.
	Goal_Achieve - Triggered when a player's achievement rank levels up.
	Goal_Level - Triggered when a player's base level or job level changes.
	Goal_Status - Triggered when a player's base stats changes.
	Job_Change - Triggered when a player's job changes.
	Marry - Triggered when two players get married.
	Party - Triggered when a player creates a party.
	Enchant_Fail - Triggered when a player fails to refine an equipment.
	Enchant_Success - Triggered when a player successfully refines an equipment.
	Spend_Zeny - Triggered when a player spends any amount of zeny on vendors.
	Taming - Triggered when a player tames a monster.

---------------------------------------

Name: Achievement name. Used when sending rewards through RODEX.

---------------------------------------

Targets: A list of monster names and count values that the achievement requires.
		The target count can also be used for achievements that keep a counter while not being related to monster kills.
		Capped at MAX_ACHIEVEMENT_OBJECTIVES.

Example:
  // Player must kill 5 Scorpions and 10 Poring.
  Targets:
    - Id: 0
      Mob: SCORPION
      Count: 5
    - Id: 1
      Mob: PORING
      Count: 10

Example 2:
  // Player must have 100 or more of ARG0 value. Using the count target value is useful for achievements that are increased in increments
  // and not checked for a total (UI_Type = 1).
  // IE: In the achievement_list.lub file, UI_Type 0 is displayed as non-incremental while 1 shows a progress bar of completion for the achievement.
  Condition: " ARG0 >= 100 "
  Targets:
    - Id: 0 // Array index value
      Count: 100

---------------------------------------

Condition: A conditional statement that must be met for the achievement to be considered complete. Accepts script constants, player variables, and
		   ARGX (where X is the argument vector value). The ARGX values are sent from the server to the achievement script engine on special events.
		   Below are two examples of how the ARGX feature works.

Example:
	// This function will send 1 argument (ARG0) with a value of i + 1 when a friend is added.
	achievement_update_objective(f_sd, AG_ADD_FRIEND, 1, i + 1);

Example 2:
	// This function will send 2 arguments (ARG0 and ARG1) with values of weapon level and refine level, respectively, when an equipment is
	// successfully refined.
	achievement_update_objective(sd, AG_REFINE_SUCCESS, 2, sd->inventory_data[i]->wlv, sd->inventory.u.items_inventory[i].refine);

---------------------------------------

Map: A map name that is used for the Chatting group which increments the counter based on the player's map.
NOTICE: This option is currently disabled until the official behavior is confirmed.

---------------------------------------

Dependents: A list of achievement IDs that need to be completed before this achievement is considered complete.

Example:
  // Player must complete achievements 10001 and 10002 first.
  Dependents:
    10001: true
    10002: true

  // Used with the import, dependent achievements can be disabled. The player now only requires completion of achievement 10001.
  Dependents:
    10002: false

---------------------------------------

Rewards: A list of rewards that are given on completion. All fields are optional.
  Item: Item Name
  Amount: Amount of Item (Default: 1)
  Script: Bonus Script
  TitleId: Title ID

---------------------------------------

Score: Achievement points that are given on completion.
//===== rAthena Documentation ================================
//= Atcommand List
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20171011
//===== Description: =========================================
//= List of available atcommands and their functions.
//============================================================

This file describes the usage of in-game commands and assumes that
'/conf/atcommand_athena.conf' has the following:
	atcommand_symbol : "@"
	charcommand_symbol: "#"

Some commands cannot be used from console or script command to prevent map-server crashed.
See atcommand.cpp::atcommand_basecommands for restricted commands. Please tell us if any
other atcommand that causes map-server crashed executed by console or script commands.

To search for a command, write "@" before the command name (ex. @commands).
The format of this file is as follows:
	1. System Commands
	2. Database Commands
	3. Player Information Commands
	4. Action Commands
	5. Administrative Commands
	6. Party Commands
	7. Guild Commands
	8. Pet Commands
	9. Homunculus Commands
	10. Channel Commands
	11. Clan Commands

======================
| 1. System Commands |
======================

@version

Displays SVN version of the server.

---------------------------------------

@rates

Displays the server rates.

Output Example:
Experience rates: Base 1.00x / Job 1.00x
Normal Drop Rates: Common 1.00x / Healing 1.00x / Usable 1.00x Equipment 1.00x / Card 1.00x
Boss Drop Rates:  Common 1.00x / Healing 1.00x / Usable 1.00x Equipment 1.00x / Card 1.00x
Other Drop Rates: MvP 1.00x / Card-Based 1.00x / Treasure 1.00x

---------------------------------------

@time

Displays the local server time, along with day/night information.
 
---------------------------------------

@uptime

Show server uptime since last map server restart.

Output Example:
Server Uptime: 3 days, 8 hours, 6 minutes, 4 seconds.

---------------------------------------

@refresh
@refreshall

Synchronizes the player's position on the client with the one stored on the server.
Additionally, @refreshall will refresh all online players.

---------------------------------------

@showexp

Toggles the display of experience gain messages.

---------------------------------------

@showzeny

Toggles the display of Zeny gain messages.
Configuration for zeny being dropped by mobs is in '/conf/battle/monster.conf':
zeny_from_mobs: yes

---------------------------------------

@showdelay

Shows or hides the red "Cannot use the skills" message.

Output Example:
[Storm Gust] Cannot use the skills.

---------------------------------------

@noask

Toggles automatic rejection of deals and invites.

---------------------------------------

@noks

Toggles Kill Steal Protection.

---------------------------------------

@font <type 0-9>

Sets the client font.

Available types:
-- 0: Default
-- 1: RixLoveangel
-- 2: RixSquirrel
-- 3: NHCgogo
-- 4: RixDiary
-- 5: RixMiniHeart
-- 6: RixFreshman
-- 7: RixKid
-- 8: RixMagic
-- 9: RixJJangu

---------------------------------------

@agitstart
@agitend

Starts or ends War of Emperium [FE] by invoking scripts with the
OnAgitStart/OnAgitEnd labels.

---------------------------------------

@agitstart2
@agitend2

Starts or ends War of Emperium [SE] by invoking scripts with the
OnAgitStart2/OnAgitEnd2 labels.

---------------------------------------

@agitstart3
@agitend3

Starts or ends War of Emperium [TE] by invoking scripts with the
OnAgitStart3/OnAgitEnd3 labels.

---------------------------------------

@pvpon
@pvpoff

Enables or disables PvP (Player vs. Player) mode on a map.

---------------------------------------

@gvgon
@gvgoff

Enables or disables GvG (Guild vs. Guild) mode on a map.

---------------------------------------

@skillon
@skilloff

Enables or disables skill usage on a map.

---------------------------------------

@allowks

Toggles Kill Steal Protection on a map.

---------------------------------------

@day
@night

Sets the server to day or night mode.

---------------------------------------

@sound <filename>

Plays the specified sound.

---------------------------------------

@snow
@clouds
@clouds2
@fog
@fireworks
@sakura
@leaves

Toggles weather effects on your map.

---------------------------------------

@clearweather

Stops all weather effects. May require a map change or @refresh
for the effect to stop client-side.

---------------------------------------

@mapflag <flag> <value 0-1>

Sets a mapflag for the current map (1 = On, 0 = Off).

---------------------------------------

@addwarp <map> <x> <y> <npc name>

Creates a warp portal on the character's current coordinates that lasts until the next reboot.
The name parameter is mandatory and if it already exists, the server will automagically assign a name,
and it will be displayed only once in the chat window.

Example:
@addwarp prontera 50 50 my_warp_sample

Output:
New warp NPC 'my_warp_sample' created.

---------------------------------------

@effect <effect ID>

Creates a visual effect on or around the character.
A list of IDs and descriptions of the effects can be found in '/doc/effect_list.txt'.

---------------------------------------

@misceffect <effect ID>

Does some visual effect on the character.
Possible effect IDs:
	0 = base level up
	1 = job level up
	2 = refine failure
	3 = refine success
	4 = game over
	5 = pharmacy success
	6 = pharmacy failure
	7 = base level up (super novice)
	8 = job level up (super novice)
	9 = base level up (taekwon)

---------------------------------------

@displayskill <skill ID> {<skill level>}

Displays the animation of a skill without really using it (debug function).

---------------------------------------

@option {<param 1> {<param 2> {<param 3>}}}

Adds visual effects to the attached character.
If no parameter is specified, a list of available options will be returned.

---------------------------------------

@displaystatus <status type> <flag> <tick> {<val1> {<val2> {<val3>}}}

Displays a status change without really applying it (debug function).

---------------------------------------

@send <Hex Number> {<value>}

Used for testing packet sends from the client (debug function).
Value: <type=B(default),W,L><number> or S<length>"<string>"

---------------------------------------

@mapinfo {<type 0-3> {<map>}}

Displays information about the current map or the one specified.

Available types:
-- 0: General information and mapflags (always shown).
-- 1: Players.
-- 2: NPCs.
-- 3: Chatrooms.

Output Example:
------ Map Info ------
Map Name: prontera | Players In Map: 1 | NPCs In Map: 127 | Chats In Map: 0
------ Map Flags ------
Town Map
Autotrade Enabled
PvP Flags: 
GvG Flags: 
Teleport Flags: 
No Exp Penalty: On | No Zeny Penalty: On
Weather Flags: Displays Night | 
Other Flags: NoBranch | Reset | 
Other Flags: 

---------------------------------------

@gat

Gives information about terrain/area (debug function).

Output Example: 
prontera (x= 165, y= 202) 00 00 00 00 00
prontera (x= 165, y= 201) 01 00 00 00 00
prontera (x= 165, y= 200) 01 00 00 00 00
prontera (x= 165, y= 199) 01 00 00 00 00
prontera (x= 165, y= 198) 01 00 00 00 00

---------------------------------------

@showrate

When VIP is enabled, the rate information always be shown when every player load map.
Use this command to disable or enable that rate information.

---------------------------------------

========================
| 2. Database Commands |
========================

@mobinfo <mob name/ID>

Displays monster information (rates, stats, drops, MVP data).

Example:
@mobinfo Poring

Output:
Monster: 'Poring'/'Poring'/'PORING' (1002)
Lv: 1 HP:60 Base EXP:27 Job EXP:20 HIT:103 FLEE:183
DEF:2 MDEF:5 STR:6 AGI:1 VIT:1 INT:1 DEX:6 LUK:5
ATK:8~9 Range:1~10~12 Size:Medium Race:Plant Element:Water (Lv:1)
Drops:
 - Jellopy 70.00% - Knife[4] 1.00% etc...
 
---------------------------------------

@iteminfo <item name/ID>

Displays item information (type, price, weight, drops).

Example:
@iteminfo Jellopy

Output:
Item: 'Jellopy'/'Jellopy'[0] (909) Type: Etc. | Extra Effect: None
NPC Buy:6z, Sell:3z | Weight: 1.0
- Maximal monsters drop change: 75.00%

---------------------------------------

@whodrops <item name/ID>

Displays a list of mobs which drop the specified item.
Only the highest drop rates are shown. 

---------------------------------------

@autoloot {<%>}

Enables or disables autolooting items from killed mobs.
If a percentage is given, only items dropped at that rate and below will be autolooted.

---------------------------------------

@alootid <+/- item name/ID>
@alootid reset

Starts or stops autolooting a specified item.
Typing "reset" will clear the autoloot item list.
By default, 10 items can be autolooted at one time.

---------------------------------------

@autoloottype <+/- type name/ID>
@autoloottype reset

Starts or stops autolooting a specified item type.
Type List: healing = 0, usable = 2, etc = 3, weapon = 4, armor = 5, card = 6, petegg = 7, petarmor = 8, ammo = 10
Typing "reset" will clear the autoloot item list.

---------------------------------------

@mobsearch <monster name>

Locates and displays the position of a certain mob on the current map.

Output Example:
1[155:184] Poring
2[154:188] Poring
3[127:146] Poring

---------------------------------------

@idsearch <item name>

Looks up an item by name (or part of a name).

---------------------------------------

@showmobs <monster name/ID>

Locates and displays the position of a certain mob on your mini-map.
This shows up as a small white cross (+).

---------------------------------------

@whereis

Displays the maps in which monster normally spawns.
This does not include mobs summoned by scripts.

---------------------------------------

@skillid <skill name>

Looks up a skill by name (or part of a name).

---------------------------------------

@skilltree <skill ID> <target>

Lists requirements to obtain the specified skill on the target character.

---------------------------------------

@questskill {<skill ID>}
@lostskill {<skill ID>}

Permanently adds or removes the specified quest skill.
If no skill ID is specified, a list of available skills will be returned.

---------------------------------------

@useskill <skill ID> <skill level> <target>

Casts the specified skill.

Example:
@useskill 28 5 Char2
-> casts Level 5 Heal on player Char2

---------------------------------------

==================================
| 3. Player Information Commands |
==================================

@commands

Displays a list of @ commands available to the player.

---------------------------------------

@charcommands

Displays a list of # commands available to the player.

---------------------------------------

@help <command>

Displays the help message for the specified command.

---------------------------------------

@exp

Displays current levels and % progress.

Output Example:
Base Level: 13 (3.323%) | Job Level: 10 (0.000%)

---------------------------------------

@stats

Displays the stats of the attached player in your chat bar.

---------------------------------------

@storagelist <player name>

Displays Kafra storage contents of the specified player.

---------------------------------------

@cartlist <player name>

Displays cart contents of the specified player.

---------------------------------------

@itemlist

Displays inventory contents of the attached player.

---------------------------------------

@who {<filter>}
@who2 {<filter>}
@who3 {<filter>}

Returns a list of online characters.
If a filter is given, the list will be restricted to names containing the filter string.
@who will also return character positions.
@who2 will also return job classes.
@who3 will also return parties/guilds.

---------------------------------------

@whomap {<map>}
@whomap2 {<map>}
@whomap3 {<map>}

Returns a list of online characters in a specific map.
If a map is given, the list will be restricted to characters on the specified map.
@whomap will also return character positions.
@whomap2 will also return job classes.
@whomap3 will also return parties/guilds.

---------------------------------------

@whogm {<filter>}

Returns a list of GMs online.
If a filter is given, the list will be restricted to names containing the filter string.
For those who are higher GM level than yourself, only name is shown.
For the rest, the command acts as a combination of @who+@who2+@who3.

---------------------------------------

@users

Displays distribution of players on the server per map (% on each map which has players.)

Output Example:
prontera: 1 (50%)
prt_fild01: 1 (50%)
all: 2

---------------------------------------

@where <player_name>

Locates a player on a map. The player must be online.

---------------------------------------

@jailtime

Displays remaining jail time.
If @jail was used, the chat window will display "You have been jailed indefinitely".

---------------------------------------

@accinfo <player name/account id>

Searches for an account by ID or a character name, and outputs detailed information.
Password will only be displayed for group levels lower than yours.
To search partial names, "%" can be used as a wildcard.

Example:
@accinfo Test%

Output:
-- Account 2000001 --
User: user123 | GM Group: 0 | State: 0
Password: password123
Account e-mail: a@a.com
Last IP: 127.0.0.1 (Unknown)
This user has logged 27 times, the last time were at 2012-11-24 17:29:07
-- Character Details --
[Slot/CID: 0/150001] Test1 | High Swordsman | Level: 99/50 | Off
[Slot/CID: 1/150002] Test2 | Rune Knight | Level: 150/50 | On

======================
| 4. Action Commands |
======================

@me <message>

Displays the text as a normal message with the format "*name <message>*" instead of "name: <message>".

---------------------------------------

@storage

Opens your Kafra storage.
 
---------------------------------------

@mail

Opens your mailbox.

---------------------------------------

@auction

Opens the auction window.

---------------------------------------

@identify
@identifyall

Opens the Identification window if any unappraised items are in your inventory.
@identifyall will automatically identify all unappraised items in your inventory.

---------------------------------------

@trade <player name>

Opens the trade window with the specified player.

---------------------------------------

@autotrade

Allows you continue vending offline, then logs off.
The character will continue vending until you log in to that account again,
all items are sold, or the mapserver closes.

---------------------------------------

@monster <monster name/ID> {<amount>}
/monster <monster name>
@monstersmall <monster name/ID> {<amount>}
@monsterbig <monster name/ID> {<amount>}

Spawns the specified monster.
If an amount is given, that number will be spawned.
Additionally, monster size can be adjusted.

---------------------------------------

@summon <monster name/ID> {<duration>}

Spawns mobs that treat you as their master.
If a duration is specified, they will stay with you until the duration has ended.

---------------------------------------

@clone <player name/ID>
@slaveclone <player name/ID>
@evilclone <player name/ID>

Spawns a clone of the specified player.
@clone will spawn a supportive clone.
@slaveclone will spawn a supportive clone that follows the creator around.
@evilclone will spawn an aggressive clone.

---------------------------------------

@item <item name/ID>{:<item name/ID>:...} {<amount>}
/item <item name>

Creates an item (or multiple items).

---------------------------------------

@item2 <item name/ID> <quantity> <identify_flag> <refine> <attribute> <card1> <card2> <card3> <card4>

Creates an item with the given parameters (the 'cards' can be any item).
identify_flag: 0 = unidentified, 1 = identified
attribute: 0 = not broken, 1 = broken

---------------------------------------

@itembound <item name/ID>{:<item name/ID>:...} <amount> <bound type>
@itembound2 <item name/ID> <quantity> <identify_flag> <refine> <attribute> <card1> <card2> <card3> <card4> <bound type>

Creates an item bounded to the character.
The items cannot be dropped, sold, vended, auctioned, or mailed, and in some cases cannot be traded or stored.

Available types:
-- 1: Account
-- 2: Guild
-- 3: Party
-- 4: Character

---------------------------------------

@delitem <item name/ID> <amount>

Deletes the specified item from the player's inventory.

---------------------------------------

@produce <equip name/ID> <element> <# of Very's>

Creates a weapon with the given parameters.

Example:
@produce 1602 1 2
-> crafts an item called "Very Very Strong Char's Ice Rod".

---------------------------------------

@refine <equip position> <+/- amount>

Refines an equipped item by the specified amount.
0: All Equipment
1: Lower Headgear
2: Right Hand
4: Garment
8: Left Accessory
16: Body Armor
32: Left Hand
64: Shoes
128: Right Accessory
256: Top Headgear
512: Mid Headgear

---------------------------------------

@grade <equip position> <+/- amount>

Enchantgrade an equipped item by the specified amount.
0: All Equipment
1: Lower Headgear
2: Right Hand
4: Garment
8: Left Accessory
16: Body Armor
32: Left Hand
64: Shoes
128: Right Accessory
256: Top Headgear
512: Mid Headgear

---------------------------------------

@repairall

Repairs all broken items in your inventory.

---------------------------------------

@dropall {<item type>}

Drops all items based on the item type.

Valid item types:
    -1 = All Items (default)
     0 = Healing Items
     2 = Useable Items
     3 = Etc Items
     4 = Armors
     5 = Weapons
     6 = Cards
     7 = Pet Eggs
     8 = Pet Armors
     10 = Ammunition Items

Example:
To drop all weapons in inventory...
@dropall 5

---------------------------------------

@storeall

Places all inventory and equipped items directly into your Kafra Storage.

---------------------------------------

@itemreset

Deletes all inventory items (not equipped items).

---------------------------------------

@clearstorage
@cleargstorage

Deletes all items in storage (or guild storage).

---------------------------------------

@clearcart

Deletes all items in cart, but does not remove the cart.

---------------------------------------

@cleanarea
@cleanmap

Deletes floor items in sight range or across the entire map.

---------------------------------------

@save

Sets your save point as your current map coordinates.

---------------------------------------

@memo {<position 0-2>}

Saves a warp point for the "Warp Portal" skill.
If a number is not specified, the command will output all currently saved locations.
Location "void" indicates an empty warp point.

---------------------------------------

@load

Warps to your save point.

---------------------------------------

@jump {<x> <y>}

Warps to the given coordinates on the current map.
If no coordinates are entered, a random location will be chosen.

---------------------------------------

@go {<location name/ID>}

Warps to predefined locations in major cities.
If no ID is given, all available maps will be displayed in the chat window.
Locations and coordinates are stored in '/src/map/atcommand.cpp'.

Restriction:
	- Used from console

---------------------------------------

@warp <map> {<x> <y>}
/mm <map> {<x> <y>}
/mapmove <map> {<x> <y>}

Warps to the specified map.
If no coordinates are entered, a random location will be chosen.

Restriction:
	- Used from console

---------------------------------------

@jumpto <player name/ID>
/shift <player name>
@follow <player name>

Warps to the specified player.
Additionally, @follow will track the player's movements until turned off.

---------------------------------------

@recall <player name>
/summon <player name>
@recallall

Warps a character to your position.
Additionally, @recallall will recall the entire server.

---------------------------------------

@tonpc <npc name>

Warps to the specified npc.

---------------------------------------

@killer

Allows you to attack other players outside of PvP.

---------------------------------------

@killable

Allows other players to attack you outside of PvP.

---------------------------------------

@blvl <+/- amount>
@jlvl <+/- amount>

Changes base or job level by the specified amount.

Restriction:
	- Used from console

---------------------------------------

@str <+/- amount>
@agi <+/- amount>
@vit <+/- amount>
@int <+/- amount>
@dex <+/- amount>
@luk <+/- amount>

Changes the specified stat of your character.

---------------------------------------

@allstats {<+/- amount>}

Changes all stats of your character.
If no amount is given, sets all stats to the maximum (default is 99).

---------------------------------------

@allskill

Gives your character all skills in their current skill tree.

---------------------------------------

@stpoint <+/- amount>
@skpoint <+/- amount>

Changes unused status or skill points by the specified amount.

---------------------------------------

@resetstat
/resetstate
@resetskill
/resetskill
@reset

Resets stats (@streset), skills (@skreset), or both (@reset).

---------------------------------------

@feelreset

Resets a Star Gladiator's marked maps.
Only works on Star Gladiator and Star Emperor classes.

---------------------------------------

@hatereset

Resets a Star Gladiator's marked monsters.
Only works on Star Gladiator and Star Emperor classes.

---------------------------------------

@jobchange <job name>
@jobchange <job ID> {<upper>}

Changes your job.
An 'upper' value can be specified with a job ID to produce its normal (0), advanced (1), or baby (2) version.
If no job is given, a list of all available jobs will be returned.
Note that jobs 22 (Wedding), 26 (Summer), 27 (Christmas), and 28 (Hanbok) are not available via @job.

Restriction:
	- Used from console

---------------------------------------

@speed <0-1000>

Sets the speed at which the character walks and attacks.
Default is 150 (0 is fastest, 1000 is slowest).

---------------------------------------

@spiritball <0-100>

Summons the specified amount of spirit spheres around you.

---------------------------------------

@soulball <0-20>

Summons the specified amount of soul spheres around you.

---------------------------------------

@mount {<dragon color 1-5>}
@mount {<madogear type 0-2>}
@mount2

Toggles mounting/unmounting a job mount (@mount) or cash mount (@mount2).

---------------------------------------

@zeny <+/- amount>

Changes Zeny by the specified amount.

---------------------------------------

@cash <+/- amount>

Changes Cash Points by the specified amount.

---------------------------------------

@points <+/- amount>

Changes Kafra Points by the specified amount.

---------------------------------------

@model <hair style> <hair color> <cloth color>
@hairstyle <default: 0-27>
@haircolor <default: 0-8>
@dye <default: 0-4>
@bodystyle <default: 0-1>

Changes appearance based on the given parameters.
The min/max values are set in '/conf/battle/client.conf'.

Appearance changed via @bodystyle won't save unless
'save_body_style' is enabled in '/conf/battle/client.conf'

---------------------------------------

@changelook {position} <view ID>

Changes the player's appearance to the specified view ID.
If no position is given, the command defaults to headgear.
1: Top
2: Middle
3: Bottom
4: Weapon
5: Shield
6: Shoes
7: Robe

---------------------------------------

@costume {<costume name>}

Changes the player's visible appearance to that of the selected costume.

Available costumes:
Wedding,
Xmas,
Summer,
Hanbok,
Oktoberfest

Typing the command without a costume name will display available costumes. If the
player is wearing a costume it will be removed.

---------------------------------------

@changedress

Removes all character costumes.

---------------------------------------

@fakename {<text string>}

Temporarily changes name to the specified string (lasts until player logs out).
If no string is given, the character's real name will be re-applied.

---------------------------------------

@size <0-2>
@sizeall <0-2>

Changes your size (0 = Normal, 1 = Small, 2 = Large).
Additionally, @sizeall will change the size of all online players.

---------------------------------------

@duel {<duel participant count>}
@duel {<player name>}
@invite <player name>
@accept
@reject
@leave

Duel-organizing commands.
When specifying the participant count accepted values are 2 ~ 65535.
Some options can be found in '/conf/battle/misc.conf'.

---------------------------------------

@heal {<hp> {<sp>}}

Heals the specified amount of HP and SP.
If no paramters are given, the character will be fully healed.

---------------------------------------

@alive
@raisemap
@raise

Resurrection commands.
@alive will revive the attached player.
@raisemap will revive all players on the map.
@raise will revive all players on the server.

---------------------------------------

@disguise <monster/npc name/ID>
@undisguise
@disguiseall <monster/npc name/ID>
@undisguiseall

Disguises or undisguises player as a monster/NPC sprite.
Additionally, @disguiseall/@undisguiseall will disguise all online players.

---------------------------------------

@monsterignore

Makes you immune to attacks (monsters/players/skills cannot target/hit you).

---------------------------------------

@hide
/hide

Toggles GM Hide (total invisibility to characters and monsters).

---------------------------------------

@npctalk <npc name> <message>

Command what other npcs say.
Displays the message above the NPC's head (like the 'npctalk' script command).

---------------------------------------

@vip <+/- time> <player name>

Set a player in VIP mode for a limited time.
Time could be reduced and if below now VIP mode is removed
Time elements: y/a, m, d/j, h, mn, s

Example:
@vip +2h mychar
-> set mychar's account as VIP for 2 hours.

---------------------------------------

@fullstrip <player name>

Unequip all items from a player.

---------------------------------------

@cart <cart ID>

Give or remove a cart to a player and also change the cart skin based on ID:
  0: remove cart
1-5: normal carts
6-9: new carts (available for PACKETVER >= 20120201)

---------------------------------------

@cloneequip <char_id>
@cloneequip "<char name>"

'Clone' other player's equipments then equip them.

---------------------------------------

@clonestat <char_id>
@clonestat "<char name>"

'Clone' other player's stats.

---------------------------------------

@limitedsale

Opens the limited sale window.

---------------------------------------

@camerainfo {<range> <rotation> <latitude>}

Displays/hides camera information from the client.
If args are given, sets camera position.

---------------------------------------

@enchantgradeui

Opens the enchantgrade UI.

---------------------------------------

==============================
| 5. Administrative Commands |
==============================

@langtype <language>

Changes the language attached to the player's account (#langtype).
If no parameter is given, a list of available languages is displayed.
All languages are defined in '/src/common/msg_conf.hpp'.

---------------------------------------

@email <current@email.tld> <new@email.tld>

Changes the email address attached the player's account.
Note: This command doesn't validate the email address itself, but checks the structure of the email (xxx@xxx).

Example:
@email a@b.com b@b.com

Output:
Fail message: Invalid email. If you have default e-mail, type a@a.com.
Success message: Information sent to login-server via char-server.

---------------------------------------

@changesex

Changes the gender attached to the player's account.

---------------------------------------

@changecharsex

Changes the gender attached to the player's character.

---------------------------------------

@marry <player 1> <player 2>
@divorce <player>

Marries or divorces two players.

---------------------------------------

@adopt <player>

Adopts the specified player with the attached character as one of the parents.

---------------------------------------

@refineui

Opens the refine user interface.

Note: This command requires packet version 2016-10-12 or newer.

---------------------------------------

@stylist

Opens the stylist user interface.

Note: This command requires packet version 2015-11-04 or newer.

---------------------------------------

@request <message>

Sends a message to all connected GMs (via the GM whisper system).

---------------------------------------

@gmotd

Displays the motd file to all players.

---------------------------------------

@broadcast <message>
/b <message>
/nb <message>
@localbroadcast <message>
/lb <message>
/nlb <message>

Announces a message in yellow text.
Except for /nb and /nlb, the message will be prefixed with the name of the attached character.
@broadcast will be shown to the entire server.
@localbroadcast will be shown on the player's map only.

---------------------------------------

@kami <message>
@kamib <message>
@kamic <color> <message>
@lkami <message>

Announces a message without a name prefix.
@kami will broadcast in yellow text.
@kamib will broadcast in blue text.
@kamic will broadcast in the specified color (a hexadecimal value).
@lkami will broadcast on the attached character's current map.

Example:
@kamic FF0000 This message is in red.

---------------------------------------

@killmonster
@killmonster2

Kills all monsters on the map.
Additionally, @killmonster2 will prevent the monsters from dropping items (except looted items).

---------------------------------------

@kill
@nuke <player name>
@doommap
@doom

Kill commands.
@kill will kill the attached player.
@nuke will kill the specified player and deal area splash damage.
@doommap will kill all players on the map.
@doom will kill all players on the server.

---------------------------------------

@mute <time> <player name>
@mutearea <time>
@unmute <player name>

Mutes or unmutes a player (prevents talking, usage of skills, and commands).
@mutearea will mute every player on screen for the specified time.

---------------------------------------

@jail <player name>
@jailfor <time> <player name>
@unjail <player name>

Sends the specified character to jail.
If a time is not specified (jailfor), the player will be jailed indefinitely.

---------------------------------------

@kick <player name/ID>

Kick a player from the server.

Restriction:
	- Used from 'atcommand' or 'useatcmd' by autotrader

---------------------------------------

@kickall
/killall

Disconnects a user or all users from the server.

---------------------------------------

@ban <+/- time> <player name>
@unban <player name>

Bans or unbans a player account for a limited time.
Time elements: y/a, m, d/j, h, mn, s

Example:
@ban +2d Char2
-> bans Char2's account for 2 days.

---------------------------------------

@block <player name>
@unblock <player name>

Blocks or unblocks a player from logging in indefinitely.

---------------------------------------

@charban <+/- time> <player name>
@charunban <player name>

Bans or unbans a player for a limited time. 
(Very similar to @ban and but for 1 character only)
Time elements: y/a, m, d/j, h, mn, s

Example:
@charban +2d Char2
-> bans Char2's for 2 days.

---------------------------------------

@mapexit

Sends quit signal to mapserver, saving all data and causing a graceful shutdown.
This will also send a packet to clients causing them to close.

---------------------------------------

@reload <type>
@reloadatcommand
@reloadbattleconf
@reloadinstancedb
@reloaditemdb
@reloadmobdb
@reloadmotd
@reloadmsgconf
@reloadpcdb
@reloadquestdb
@reloadscript
@reloadskilldb
@reloadstatusdb
@reloadachievementdb
@reloadattendancedb
@reloadbarterdb

Reloads a database or configuration file.

Databases:
-- instancedb: Instance Database
-- itemdb: Item Database
-- mobdb: Monster Database
-- questdb: Quest Database
-- script: NPC Scripts and Barter Database
-- skilldb: Skill Database
-- achievementdb: Achievement Database
-- attendancedb: Attendance Database
-- barterdb: Barter Database

Configuration files:
-- atcommand: Atcommand Settings
-- battleconf: Battle Settings (may require relog)
-- motd: Message of the Day
-- msgconf: Message Configuration
-- pcdb: Player Settings
-- statusdb: Status Settings

Affected files:
-- atcommand: atcommands.yml, groups.conf
-- battleconf: battle_athena.conf, battle_conf.txt
-- instancedb: instance_db.yml
-- itemdb: item_db.yml, item_group_db.yml, item_noequip.txt, item_combos.yml, item_randomopt_db.yml, item_randomopt_group.yml
-- mobdb: mob_db.yml, mob_item_ratio.yml, mob_chat_db.yml, mob_avail.yml, mob_summon.yml, pet_db.yml, homunculus_db.txt, homun_skill_tree.txt, exp_homun.yml, mercenary_db.yml, elemental_db.yml
-- motd: motd.txt
-- msgconf: atcommands.yml
-- pcdb: statpoint.yml, job_exp.yml, skill_tree.yml, attr_fix.yml, job_stats.yml, job_basepoints.yml, level_penalty.yml
-- questdb: quest_db.yml
-- script: /npc/*.txt, /npc/*.conf, /npc/barters.yml
-- skilldb: skill_db.yml, skill_nocast_db.txt, skill_changematerial_db.txt, skill_damage_db.txt, abra_db.yml, create_arrow_db.yml, produce_db.txt, spellbook_db.yml, magicmushroom_db.yml
-- statusdb: attr_fix.yml, size_fix.yml, refine.yml
-- achievementdb: achievement_db.yml
-- attendancedb: attendance.yml
-- barterdb: /npc/barters.yml

Restriction:
	- Used from 'atcommand' or 'useatcmd'. For @reload & @reloadscript

---------------------------------------

@set <variable> {<value>}

Changes a player or account variable to the specified value.
If no value is given, the variable's current value will be displayed.
Note that the value of a string variable may be typed with or without double quotes.

---------------------------------------

@setbattleflag <flag> <value> {<reload>}

Changes a battle_config flag without rebooting the server.
If a value is given for reload, then the server will attempt to reload the mob database
if the config being changed is EXP/drop related.

---------------------------------------

@adjgroup <group ID>

Temporarily changes the group of a character (lasts until player logs out).
The groups are defined in '/conf/groups.conf'.

---------------------------------------

@addperm {<permission name>}
@rmvperm {<permission name>}

Temporarily changes the permissions of a character (lasts until player logs out).
If no permission is given, a list of available permissions will be returned.

---------------------------------------

@npcmove <x> <y> <npc name>

Moves an NPC to a specified coordinate on its map.

---------------------------------------

@hidenpc <npc name>
@shownpc <npc name>

Toggles the visibility of an NPC's sprite.

---------------------------------------

@loadnpc <path>

Loads an NPC script by path.

Example:
@loadnpc npc/custom/jobmaster.txt

---------------------------------------

@unloadnpc <npc name>

Unloads an NPC.

Example:
@unloadnpc Job Master

---------------------------------------

@unloadnpcfile <path>

Unloads all NPCs in a file.

Example:
@unloadnpcfile npc/custom/jobmaster.txt

---------------------------------------

@reloadnpcfile <path>

Unloads and loads an NPC.
Same as @unloadnpcfile and @loadnpc but ran as one command.

Example:
@reloadnpcfile npc/custom/jobmaster.txt

---------------------------------------

=====================
| 6. Party Commands |
=====================

@party <party_name>

Organizes a new party, with the attached character as leader.
 
---------------------------------------

@partyoption <pickup share: yes/no> <item distribution: yes/no>

Changes party options for experience sharing and item sharing.

---------------------------------------

@changeleader <party_member_name>

Changes the leader of your party to another member.
You must be the party leader to use this command.

---------------------------------------

@partyrecall <party name>

Warps all online characters of a party to your location.

---------------------------------------

@partyspy <party name>

Allows you to spy on any party's Party Chat.
At least one member of that party must be online.
NOTE: map server needs to be configured to enable spying to use this command (enable_spy: yes)

---------------------------------------

@partysharelvl <value>

Temporarily adjusts the party share level range (lasts until character server restarts).
The permanent value is defined by 'party_share_level' in '/conf/inter_athena.conf'.

---------------------------------------

=====================
| 7. Guild Commands |
=====================

@guild <guild name>

Creates a new guild, with the attached character as guildmaster.

---------------------------------------

@breakguild

Breaks the guild of the attached character.
You must be the guildmaster to use this command.

---------------------------------------

@changegm <guild_member_name>

Changes the guildmaster of your guild to another member.
You must be the guildmaster to use this command.

---------------------------------------

@guildstorage

Opens your guild storage.

---------------------------------------

@glvl <+/- amount>

Changes guild level by the specified amount.

---------------------------------------

@disguiseguild <monster/npc name/ID> <guild name/ID>
@undisguiseguild

Disguises or undisguises all online characters of a guild.
 
---------------------------------------

@sizeguild <size> <guild name>

Changes the size of all online characters of a guild.

---------------------------------------

@guildrecall <guild name>

Warps all online characters of a guild to your location.

---------------------------------------

@guildspy <guild name>

Allows you to spy on any guild's Guild Chat. 
At least one member of that guild must be online.
NOTE: map server needs to be configured to enable spying to use this command (enable_spy: yes)

---------------------------------------

===================
| 8. Pet Commands |
===================

@makeegg <egg ID>

Creates a Pet Egg based on the given ID.

---------------------------------------

@hatch

Opens the Hatch window (like using a Pet Incubator).

---------------------------------------

@pettalk <message>

Command what the player's pet will say.

---------------------------------------

@petrename

If you have not already renamed your pet, you can do this on the Pet window.
If you have renamed your pet, this command will allow you to use the
the rename option on the window again.

---------------------------------------

@petfriendly <0-1000>

Sets the intimacy level of your pet, with 1000 being "Loyal".

---------------------------------------

@pethungry <0-100>

Sets the hunger level of your pet, with 100 being "Stuffed".

---------------------------------------

==========================
| 9. Homunculus Commands |
==========================

@makehomun <Homunculus ID>

Creates the specified homunculus.

---------------------------------------

@homevolution
@hommutate {<Homunculus ID>}

Evolves or mutates your homunculus, if possible.
If no Homunculus ID is specified for @hommutate, a random ID is chosen.
If it doesn't work, the /swt emotion is shown.

---------------------------------------

@hominfo
@homstats

Displays homunculus stats in different formats.

Output Example [@hominfo]:
Homunculus Stats:
HP: 153/153 - SP: 54/54
ATK: 59 - MATK: 69~69
Hungry: 29 - Intimacy: 5
Stats: Str 24 / Agi 25 / Vit 18 / Int 40 / Dex 31 / Luk 14

Output Example [@homstats]:
Homunculus growth stats (Lv 1 Lif):
Max HP: 153 (151~160)
Max SP: 54 (50~60)
Str: 20 (18~22)
Agi: 22 (21~24)
Vit: 16 (16~20)
Int: 40 (39~45)
Dex: 29 (25~34)
Luk: 14 (13~15)

---------------------------------------

@homshuffle

Re-calculates homunculus stats, as if the homunculus was re-leveled from level 1.

---------------------------------------

@homtalk <message>

Command what the player's homunculus will say.

---------------------------------------

@homlevel <+/- amount>

Changes homunculus level by the specified amount.

---------------------------------------

@homfriendly <0-1000>

Sets the intimacy level of your homunculus, with 1000 being "Loyal".

---------------------------------------

@homhungry <0-100>

Sets the hunger level of your homunculus, with 100 being "Stuffed".

---------------------------------------

========================
| 10. Channel Commands |
========================

@join <#channel_name> {<password>}
@channel join <#channel_name> {<password>}

Joins the specified channel.

---------------------------------------

@channel leave <#channel_name>

Leaves the specified channel.

---------------------------------------

@channel create <#channel_name> <channel_password>

Creates a new channel.
'allow_user_channel_creation' must be enabled in '/conf/channels.conf'.

---------------------------------------

@channel delete <#channel_name>

Destroys the specified channel.

---------------------------------------

@channel list
@channel list mine
@channel list colors

'list' displays a list of all public channels.
'list mine' displays a list of channels you have joined.
'list colors' displays a list of all available colors for custom channels.

---------------------------------------

@fontcolor <color_name>

Sets channel chat font color for the invoking character only.
Typing "Normal" returns text to the normal channel color.
If no parameter is given, a list of available colors is displayed.
Option 'ColorOverride' must be enabled for this to take effect.

---------------------------------------

@channel setcolor <#channel_name> <color_name>

Changes the text color of the specified channel.
You must either be the channel's owner or have the channel_admin permission.
All colors are defined in '/conf/channels.conf'.

---------------------------------------

@channel setopt <#channel_name> <option> <value>

Sets an option and value for the specified channel.
You must either be the channel's owner or have the channel_admin permission.

Available options:
-- 'JoinAnnounce <1|0>' : Toggles channel announcement when a new player enters.
-- 'MessageDelay <0-10>' : Sets the delay (in seconds) for messages sent to the channel.
-- 'ColorOverride <1|0>' : Toggles the permission for players to change their color through @fontcolor.

---------------------------------------

@channel ban <#channel_name> <player>
@channel unban <#channel_name> <player>
@channel unbanall <#channel_name>
@channel banlist <#channel_name>

Bans or unbans a player from the specified channel.
'unbanall' clears all bans from the channel.
'banlist' displays a list of all players banned from the channel.

---------------------------------------

@channel bindto <#channel_name>
@channel unbind

Binds or unbinds your global chat with the specified channel, which sends all global messages to the specified channel.

---------------------------------------

@setquest <quest ID>
@erasequest <quest ID>
@completequest <quest ID>
@checkquest <quest ID>

Changes/checks the status of the specified quest ID.

---------------------------------------

=====================
| 11. Clan Commands |
=====================

@clanspy <clan name>

Allows you to spy on any clan's Clan Chat.
At least one member of that clan must be online.
NOTE: map server needs to be configured to enable spying to use this command (enable_spy: yes)

---------------------------------------
//===== BetterRa �ĵ� =======================================
//= BetterRa GMָ��˵���ļ�
//===== ����: ================================================
//= BetterRa �����Ŷ�
//===== ������: ============================================
//= 20170117
//===== �ĵ����: ============================================
//= BetterRa �ǻ��� rAthena ���ж��ο�����, �� rAthena �ٷ�֧
//= �ֵ�GMָ�������, BetterRa Ҳ��չ��һЩGMָ��, ���������
//= ��˵��, �����ص����ָ��Ĳ������÷�.
//============================================================
	
@strategy <��Ϊ���Ա��>

�����л��˺ŵ���Ϊ���Ա��, ���������Ϊ����ϵͳ��˵��.

---------------------------------------

@title <�ƺ�ID>

�˹��ܽ��� 2015 �ͻ��˿���, ���������޸���ҵĳƺ�.
�ƺ�ID�����ڿͻ�����Դ�ļ� data/luafiles514/lua files/datainfo/titletable.lub ����鵽, ����Ϊ 0 ��ȡ���ƺ�.

ע��:
	- �ƺŹ����ڹٷ������ڳɾ�ϵͳ, �������ڳɾ�ϵͳ���ܻ�ûʵװ.
	- ʹ�ø�ָ�����õĳƺŻᱻ���浽���ݿ�

---------------------------------------

@recallmap

�ٻ���ǰ��ͼ����ҵ������߹���.

---------------------------------------

@homattack <��������>

�����������Զ�����, ��Ϊ��2017���һ�θ����н������������Զ�����, �������Ӵ�ָ��.

type Ϊ 0 ʱ, �ر��������Զ�����
     Ϊ 1 ʱ, ������ֻ����ͨ����
     Ϊ 2 ʱ, ���������ͨ�����͵��弼��
     Ϊ 3 ʱ, ���������ͨ������Ⱥ�弼�� 

---------------------------------------

@killmonsterall

����ɱ����ͼ�ϵ�ħ�ﲢ�����¼�, ���������Խű�

---------------------------------------

@autotrade2

���ڷǹҵ�������߹ҵ�

---------------------------------------

@bot_login <char_id>;
@bot_login "<�����>";

��½һ�����ݿ������е��˺�.
	
---------------------------------------

@bot <����>

��ָ��һ�����ڿ����͹ر� BOT, һ�����ڲ���.

����Ϊ 0 ʱ ֹͣ
����Ϊ 1 ʱ ��ʼ
	
---------------------------------------

@showconsole <����>

��ָ�����ڴ�ӡ map-server.exe ����̨��������촰����.

����Ϊ 0 ʱ ֹͣ
����Ϊ 1 ʱ ��ʼ

---------------------------------------

@cashshopsale <�ϼ���ƷID> <�ϼ���Ʒ����> <��ʼʱ��> <����ʱ��(����)>

�� item_cash_db.txt �еĵڰ��� 8: Sale ����ͨ����ָ���ϼܵ� cashshop ��

��ʼʱ���ʽ: YYYY-MM-DD hh:mm:ss(��-��-�� ʱ:��:��)
��: @cashshopsale 501 1 2020-09-05 14:32:00 60

---------------------------------------

@reloaditemids <��ƷID��Χ����ƷID> <��ƷID��Χ����ƷID> ...

�ض�ָ����Ʒ�� item_db.yml �е�����, ����Ч����崻�
��Χ�� ��ʼֵ-����ֵ��ʾ, ����: @reloaditemids 501-550 601-660 1201
�ض�ʱ������� itemdb_reload_thread �򲻻������Ϸ����

---------------------------------------

@hideview <����>

����������ҵ���ʾͼ��

����:
	1 - ͷ��
	2 - ͷ��
	4 - ͷ��
	8 - ����

---------------------------------------

@debugstack

��ָ����ڿ���̨��������ʱ���dmp�ļ�, ������ж�ջ׷���ҳ������������

���������� map_athena.conf �е� console_msg_log ����, Ĭ���ڴ���\����\���Զ������dmp�ļ�, 
�����һ��dmp�ļ���ָ��ʧЧ, �ظ����dmp��Ҫ�ٴ�ִ�д�����

----------------------------------------

@captcha <"�����">;
@captcha <�˺�ID>;

��ָ����ҽ�����֤����֤, �ᵯ����֤��ͼƬ��������֤�������֤.
��֤�����������ӷ�ʽ:
1.rAthena  ���ӷ���ʹ�� db/captcha_db.yml
2.BetterRA ����bmp�ļ����� db/captcha/�ļ���, �����������Ķ� db/captcha/readme.md

----------------------------------------//===== BetterRa �ĵ� =======================================
//= BetterRa �¼���ǩ˵���ļ�
//===== ����: ================================================
//= BetterRa �����Ŷ�
//===== �ĵ����: ============================================
//= BetterRa �ǻ��� rAthena ���ж��ο�����, �� rAthena �ٷ�֧
//= �ֵ��¼���ǩ������, BetterRa Ҳ��չ��һЩ�¼���ǩ, �����
//= �����˵��, ���������Щ�¼��Ĵ���ʱ����ʹ�÷���.
//============================================================
�¼�����Լ��:
	On[�¼��������Ķ���][�¼�����][�¼�����]

�¼��������Ķ���:
	��ָ��ʱ���¼�������ʱ, �ű���������Ķ���, �ձ��ֵΪ: PC(��ʾ���)

�¼�����:
	ֻ�¼�������, ûʲô�ر��

�¼�����:
	���ڿ�ʼ�¼���Ϊ��������: Filter �� Event
	��ʵ Filter �� Event �����¼�, ����֮��Ψһ��������:
	����¼����ֽ�βΪ Filter, ����ζ�������Ա� processhalt �ж�

---------------------------------------

�ж�˵��:
	���һ���¼��ɱ��ж�, ��ô���������һ���жϺ��Ч��


1.- ȫ���¼�, �������κ�NPC�µ���������ʱ���ɱ�����.
2.- NPC�¼�, ������ָ��NPC�µ���NPC��������ʱ��������NPC�µ��¼�.

=====================
|1.-   ȫ���¼�    .|
=====================

---------------------------------------

*OnPCStatCalcEvent:

	����ɫ�����������¼���ʱ�������¼�

BetterRa �ڹٷ��Ļ������������¸Ľ�:
	- ���¼�Ĭ�ϲ��ᱻ���롰�¼����С�, ֻҪ���������ܱ�����ִ��
	- �� conf/battle/extend.conf �� execute_npce_statcalc_right_now ѡ����ԸĻعٷ�Ĭ������

�����¼����ᱻ���롰�¼����С�ʱ, ���²��ֽű�ָ����ᱻִ��:
	mes,next,end,close,close2,menu,select,prompt,
	input,progressbar,produce,cooking,makerune,buyingstore,openstorage,
	openstorage2,openauction,openmail,guildopenstorage,
	callshop,bpet,opendressroom,sleep,sleep2

---------------------------------------

*OnPCKillMvpEvent:

	ɱ��MVPħ��ʱ�������¼� (��������MVP�������һ�������)
	����һ��MVPħ��Ļ�, ���¼�ֻ�ᱻ����1��

����˵��:
	killedgid			��ɱ��ħ���GID
	killedrid			��ɱ��ħ���ħ����(MobID)
	killerrid 			ɱ��ħ������AID
	@mob_dead_m			ħ������ʱ��ͼID
	@mob_dead_x			ħ������ʱ��X����
	@mob_dead_y			ħ������ʱ��Y����
	@mob_lasthit_rid	����MVPħ�����һ�������RID(�˺ű��)
	@mob_lasthit_cid	����MVPħ�����һ������ҽ�ɫ���
	@mob_mvp_rid		����MVPħ������˺������RID(�˺ű��)
	@mob_mvp_cid		����MVPħ������˺�����ҽ�ɫ���

---------------------------------------

*OnBfReloadScriptEvent:

	����ˢ��NPC֮ǰ���¼�, ʹ�� @reloadscript ָ���, ���ȴ������¼�
	ˢ��NPC֮ǰ����100���������, ��ô���¼�����100����ҵ����ݱ�����100��
	���, ������¼�������� announce ����, ��ô������ֻ������Լ��ɼ��� bc_self ����
	����� bc_all ���͵Ļ�, ˢ��ʱ����100���������, ��ÿ����һῴ��100��ȫ������

---------------------------------------

*OnAfReloadScriptEvent:

	ˢ��NPC��Ϻ���¼�, ʹ�� @reloadscript ˢ�����NPC��, ���ٴ������¼�
	ˢ��NPC֮������100���������, ��ô���¼�����100����ҵ����ݱ�����100��
	���, ������¼�������� announce ����, ��ô������ֻ������Լ��ɼ��� bc_self ����
	����� bc_all ���͵Ļ�, ˢ��ʱ����100���������, ��ÿ����һῴ��100��ȫ������

---------------------------------------

*OnPCEquipFilter:

	�����׼��������һ����Ʒ��ʱ��, ���¼��ᱻ���� (������������Ʒ�����)

����˵��:
	@equip_idx Ϊ��Ʒ�ı������
	@equip_pos Ϊ�˼���SEA��CSEA�����, �������˺� @equip_idx һ����ֵ

�ж�˵��: 
	�жϺ����˻�������ұ���װ����������

ʱ��ע������:
	��׼��������˵����û��ɴ���, ���Դ�ʱʹ�� 
	getinventoryinfo(@equip_idx, 2) ȥ��ȡ��װ���Ĵ���λ��ʱ,
	���ص�����ֻ���� 0
	
---------------------------------------

*OnPCUnequipFilter:

	�����׼���ѵ�һ����Ʒ��ʱ��, ���¼��ᱻ���� (������������Ʒ�����)

����˵��:
	@unequip_idx Ϊ��Ʒ�ı������
	@unequip_pos Ϊ�˼���SEA��CSEA�����, �������˺� @unequip_idx һ����ֵ

�ж�˵��: 
	�жϺ����˻�������ұ���װ�����²���

ʱ��ע������:
	��׼���ѵ���˵����û��ȫ�ѵ�, ���Դ�ʱʹ�� 
	getinventoryinfo(@unequip_idx, 2) ȥ��ȡ��װ���Ĵ���λ��ʱ,
	���ص����ݾ��Բ����� 0

�ж�ע������:
	����ʹ�� processhalt �ű�ָ���жϱ��¼��ĺ�������ʱ,
	���ܻᵼ���л�װ��ʧ��. ��Ϊ�л�װ��ʵ������������������ɵ�,
	�ֱ��� �������¾ɵ�, �ٴ����µġ�. �����¾ɵ�װ���������ж�,
	��ô�µ�װ��Ҳ�ᴩ����.

---------------------------------------

*OnPCEquipEvent:

	����ҳɹ�������һ����Ʒ��ʱ��, ���¼��ᱻ���� (������������Ʒ�����)

����˵��:
	@equip_idx Ϊ��Ʒ�ı������
	@equip_pos Ϊ�˼���SEA��CSEA�����, �������˺� @equip_idx һ����ֵ

---------------------------------------

*OnPCUnequipEvent:

	����ҳɹ��ѵ�һ����Ʒ��ʱ��, ���¼��ᱻ���� (������������Ʒ�����)

����˵��:
	@unequip_idx Ϊ��Ʒ�ı������
	@unequip_pos Ϊ�˼���SEA��CSEA�����, �������˺� @unequip_idx һ����ֵ

---------------------------------------

*OnPCBuffStartEvent:

	����һ����һ��״̬(Buff)��, ���¼��ᱻ���� (�������״̬�����)

����˵��:
	@started_sc_id		Ϊ�������״̬�ı��
	@started_sc_rate	Ϊ�������״̬�Ĵ�������(10000 = 100%)
	@started_sc_tick	Ϊ�������״̬�ĳ���ʱ��(��λΪ����)
						ʱ�������ڲ�ʵ�ַ�ʽ�Ĳ�ͬ, �п�����ָ�೤ʱ���ʣ��������һ
	@started_sc_val1	Ϊ�������״̬�ĵ�1��������ֵ
	@started_sc_val2	Ϊ�������״̬�ĵ�2��������ֵ
	@started_sc_val3	Ϊ�������״̬�ĵ�3��������ֵ
	@started_sc_val4	Ϊ�������״̬�ĵ�4��������ֵ
	
	@startedsc 			Ϊ�˼���SEA��CSEA�����, �������˺� @started_sc_id һ����ֵ

---------------------------------------

*OnPCBuffFixFilter:

	����һ��״̬(Buff)ʱ���� (�������״̬�����)

����˵��:
	@started_sc_id		Ϊ�������״̬�ı��
	@started_sc_rate	Ϊ�������״̬�Ĵ�������(10000 = 100%)
	@started_sc_tick	Ϊ�������״̬�ĳ���ʱ��(��λΪ����)
						ʱ�������ڲ�ʵ�ַ�ʽ�Ĳ�ͬ, �п�����ָ�೤ʱ���ʣ��������һ
	@started_sc_val1	Ϊ�������״̬�ĵ�1��������ֵ
	@started_sc_val2	Ϊ�������״̬�ĵ�2��������ֵ
	@started_sc_val3	Ϊ�������״̬�ĵ�3��������ֵ
	@started_sc_val4	Ϊ�������״̬�ĵ�4��������ֵ
	
�ж�˵��: 
	�жϺ��ͨ���޸ķ��صĲ����ﵽ�޸�ʵ����Ч���, �� @started_sc_tick �޸�Ϊ 0 ʱ, ��ǰSC����Ч

---------------------------------------

*OnPCBuffEndEvent:

	����ҽ����һ��״̬(Buff)��, ���¼��ᱻ���� (�������״̬�����)

����˵��:
	@ended_sc_id	Ϊ��������״̬�ı��
	@endedsc 		Ϊ�˼���SEA��CSEA�����, Ҳ�������˺� @ended_sc_id һ����ֵ

---------------------------------------

*OnPCPartyCreateFilter:

	����Ҵ�����һ�������, ���¼��ᱻ���� (����������������)
	
����˵��:
	@create_party_name$	Ҫ�������������

�ж�˵��: 
	��������ʧ��

---------------------------------------

*OnPCPartyJoinFilter:

	����Ҽ�����һ�������, ���¼��ᱻ���� (���������������)
	
����˵��:
	@join_party_id		����ID
	@join_party_aid		�����ߵ�AID
	
�ж�˵��: 
	�������ʧ��

---------------------------------------

*OnPCPartyLeaveFilter:

	������뿪����(��������Ը���Ǳ���), �������¼� (�������뿪��������)

����˵��:
	@left_party_id		����ID
	@left_party_name$	��������
	@left_party_aid		�뿪������ҵ�AID
	@left_party_kick	�Ƿ��Ǳ��ӳ��߳�

�ж�˵��: 
	�뿪����ʧ��
	
---------------------------------------

*OnPCGuildCreateFilter:

	����Ҵ�����һ�������, ���¼��ᱻ���� (�������᳤)
	
����˵��:
	@create_guild_name$	��������ı��

�ж�˵��: 
	�жϺ����˻�������ұ��δ������������

---------------------------------------

*OnPCGuildJoinFilter:

	����Ҽ�����һ�������, ���¼��ᱻ���� (���������빫������)
	
����˵��:
	@join_guild_id		���빫��ı��
	@join_guild_name$	���빫�������

�ж�˵��: 
	�жϺ����˻�������ұ��μ��빫�������

---------------------------------------

*OnPCGuildLeaveFilter:

	������뿪��һ�������, ���¼��ᱻ���� (�������뿪��������)

����˵��:
	@left_guild_id		�뿪����ı��
	@left_guild_name$	�뿪���������

�ж�˵��: 
	�жϺ����˻�������ұ����뿪���������
	
---------------------------------------

*OnPCPetLootEvent:

	����ҵĳ���ʰȡ����Ʒ֮��, ���¼��ᱻ���� (���������������)

����˵��:
	@petloot_item_id		Ϊʰȡ������Ʒ���
	@petloot_item_amount	Ϊʰȡ������Ʒ����
	@petloot_game_id		Ϊ����Ʒ����Ϸ��λ���
	
	@petloot_id 			Ϊ�˼���SEA��CSEA�����, �������˺� @petloot_item_id һ����ֵ
	@petloot_gid 			Ϊ�˼���SEA��CSEA�����, �������˺� @petloot_game_id һ����ֵ
	@petloot_amount 		Ϊ�˼���SEA��CSEA�����, �������˺� @petloot_item_amount һ����ֵ

---------------------------------------

*OnPCPetFeedEvent:

	����Ҹ��Լ��ĳ���ιʳ��, ���¼��ᱻ���� (���������������)

����˵��:
	@pet_id      �����Ӧ��ħ��ID
	@pet_foodid  ����ʳ��ID
	@pet_hungry  ����ιʳ��ı�ʳ��
	@pet_idx     ���ﵰ�ڱ����е�λ�����
	
---------------------------------------

*OnPCPetIncubateFilter:

	���������ʱ�������¼�

����˵��:
	@pet_id      �����Ӧ��ħ��ID
	@pet_idx     ���ﵰ�ڱ����е�λ�����

�ж�˵��: 
	�жϺ�������ʧ��

---------------------------------------

*OnPCPetEvolvesFilter:

	���������ʱ�������¼�, ������������ϲ���ʱ, �Կ��Դ������¼�
	
����˵��:
	@pet_id                  �����Ӧ��ħ��ID
	@pet_gid                 �����GID
	@pet_target_id           ������ĳ����Ӧ��ħ��ID
	@pet_require_itemid[]    ����������ƷID
	@pet_require_itemcount[] ����������Ʒ����
	@pet_require_count       �����ܹ���Ҫ������Ʒ, �������Ա����

�ж�˵��: 
	�жϺ󱾴ν���ʧ��

---------------------------------------

*OnPCPetEvolvesEvent:

	����������󴥷����¼�
	
����˵��:
	@pet_id                  �����Ӧ��ħ��ID
	@pet_gid                 �����GID

---------------------------------------

*OnPCViewEquipFilter:

	����ҵ���鿴ĳ����ҵ�װ��֮��, ���¼��ᱻ���� (��������������鿴��������)

����˵��:
	@view_equip_target_name$	���鿴�ߵĽ�ɫ��
	@view_equip_target_cid	���鿴�ߵĽ�ɫ���
	@view_equip_target_aid	���鿴�ߵ��˺ű��
	
	@vieweq_name$ 	Ϊ�˼���CSEA�����, �������˺� @view_equip_target_name$ һ����ֵ
	@vieweq_cid 	Ϊ�˼���CSEA�����, �������˺� @view_equip_target_cid һ����ֵ
	@vieweq_aid 	Ϊ�˼���CSEA�����, �������˺� @view_equip_target_aid һ����ֵ
	@eqview_cid 	Ϊ�˼���CSEA�����, �������˺� @view_equip_target_cid һ����ֵ

�ж�˵��: 
	�жϺ����˻�������ұ��β鿴����װ����Ϣ������
	
---------------------------------------

*OnPCHomLvUpEvent:

	����ҵ��˹�����������֮��, ���¼��ᱻ���� (�����������������)

����˵��:
	@hom_id	  ������ID
	@hom_gid  ������GID

---------------------------------------

*OnPCHomCallEvent:

	������ٻ����˹�������֮��, ���¼��ᱻ���� (�����������������)
	
����˵��:
	@hom_id	  ������ID
	@hom_gid  ������GID

---------------------------------------

*OnPCHomRestEvent:

	����ҽ��˹������尲Ϣ(��Ϣ)֮��, ���¼��ᱻ���� (�����������������)

����˵��:
	@hom_id	  ������ID
	@hom_gid  ������GID

---------------------------------------

*OnPCHomDeadEvent:

	����ҵ��˹�����������֮��, ���¼��ᱻ���� (�����������������)

����˵��:
	@hom_id	  ������ID
	@hom_gid  ������GID

---------------------------------------

*OnPCHomAliveEvent:

	����Ҹ����˹�������֮��, ���¼��ᱻ���� (�����������������)

����˵��:
	@hom_id	  ������ID
	@hom_gid  ������GID

---------------------------------------

*OnPCUseSkillFilter:

	�����ʩ�ż���ʱ, ��ʵ��ӽ��֮ǰ, ���¼��ᱻ���� (����������ʩ����)
	���ۼ��ܵ���������Ƿ��㹻, ���ռ��ܻ᲻��ʹ��ʧ��, ֻҪ���ʹ���˼���, �ͱض��������¼�

����˵��:
	useskill_id			ʩ�ŵļ���ID
	useskill_lv			��ʩ�ŵļ��ܵȼ�
	useskill_target		��ʩ��Ŀ���GameID����AccountID, ��Ϊ 0 ���ʾ���Ǹ��Ե���ʩ�ŵļ���
	useskill_x			��ʩ���ĵ���X����
	useskill_y			��ʩ���ĵ���Y����

�ж�˵��:
	�жϺ����˻�������ұ���ʹ�ü��ܵ�����
	
---------------------------------------

*OnPCUseSkillEvent:

	����Ҽ��ܳɹ�ʩ�����ʱ, �������¼�

����˵��:
	useskill_id			ʩ�ŵļ���ID
	useskill_lv			��ʩ�ŵļ��ܵȼ�
	useskill_target		��ʩ��Ŀ���GameID����AccountID, ��Ϊ 0 ���ʾ���Ǹ��Ե���ʩ�ŵļ���
	useskill_x			��ʩ���ĵ���X����
	useskill_y			��ʩ���ĵ���Y����
	
---------------------------------------

*OnPCAutoSpellFilter:

	������Զ�����ǰ, �������¼�

����˵��:
	useskill_id			ʩ�ŵļ���ID
	useskill_lv			��ʩ�ŵļ��ܵȼ�
	useskill_target		��ʩ��Ŀ���GameID����AccountID, ���漼����ΪĿ���Ӧ����
	useskill_x			0: ͨ�������Զ�ʩ��, 1: ͨ�� bAutoSpell, 2: ͨ�� bAutoSpellWhenHit, 3: ͨ�� bAutoSpellOnSkill
	useskill_y			bAutoSpell �� bAutoSpell ��Ӧ�ͷ�����, bAutoSpellOnSkill ��Ӧ�ͷż���
	
�ж�˵��:
	�жϺ�˴��Զ����䱻����
	
---------------------------------------

*OnPCAutoSpellEvent:

	����Ҽ��ܳɹ�ʩ�����ʱ, ���¼��ᱻ���� (����������ʩ����)

����˵��:
	useskill_id			ʩ�ŵļ���ID
	useskill_lv			��ʩ�ŵļ��ܵȼ�
	useskill_target		��ʩ��Ŀ���GameID����AccountID, ��Ϊ 0 ���ʾ���Ǹ��Ե���ʩ�ŵļ���
	useskill_x			0: ͨ�������Զ�ʩ��, 1: ͨ�� bAutoSpell, 2: ͨ�� bAutoSpellWhenHit, 3: ͨ�� bAutoSpellOnSkill
	useskill_y			bAutoSpell �� bAutoSpell ��Ӧ�ͷ�����, bAutoSpellOnSkill ��Ӧ�ͷż���

---------------------------------------

*OnPCUseItemFilter:

	�����˫��ʹ�á���װ�������͵���ʱ, ���¼��ᱻ���� (��������Ʒʹ����)
	������Ʒ�����Ƿ��ʹ��ʧ��, ֻҪ���˫������Ʒ, �ͱض��������¼�

����˵��:
	useitem_nameid		�����ʹ�õ���Ʒ���
	useitem_idx			�����ʹ����Ʒ�ı������

�ж�˵��:
	�жϺ����˻�������ұ���ʹ����Ʒ������
	
---------------------------------------

*OnPCUseItemEvent:

	����ҳɹ�ʹ�á���װ�������͵���ʱ, ���¼��ᱻ���� (��������Ʒʹ����)

����˵��:
	useitem_nameid		�����ʹ�õ���Ʒ���
	useitem_idx			�����ʹ����Ʒ�ı������

---------------------------------------

*OnPCUseTokenFilter:

	�����ʹ�ò���֤֮ʱ����
	
����˵��:
	@token_idx    ����֤֮����ƷID
				
�ж�˵��:
	�жϺ󸴻�֤֮ʹ��ʧ��
	
---------------------------------------

*OnPCUseCommandFilter:

	�����ʹ��GMָ��ʱ����
	
����˵��:
	@cmd_aid		ʹ��GMָ������AID
	@cmd_name$		��ʹ�õ�ָ������
	@cmd_params$	ָ����Ĳ���
	@cmd_target_aid	Ŀ����ҵ�AID, ��ָ���˭��Ч, һ����#����ָ���й�
	
�ж�˵��:
	�жϺ�ָ��ʹ��ʧ��
	
---------------------------------------

*OnPCMoveFilter:

	����ҵ�������ĳ��������Ҫ�ƶ�ʱ, ���¼�������ҿ�ʼ��·֮ǰ���� (��������Ҫ�ƶ������)
	
	�� conf/battle/BetterRA.conf �� pc_move_event_trigger_type ֵΪ 0
	��ô��Զ���ᴥ�����¼�
	
	�� conf/battle/BetterRA.conf �� pc_move_event_trigger_type ֵΪ 1
	��ô�����ȵ��� when_pcmove_doevent; �ű�ָ���, ��ҵ���һ���ƶ��Żᴥ�����¼�
	
	�� conf/battle/BetterRA.conf �� pc_move_event_trigger_type ֵΪ 2
	��ô��ҵ������ƶ����ᴥ�����¼�(�˶�Ļ����ܻ�Ӱ������)

����˵��:
	@moveto_x	�����Ҫ�ƶ�����Ŀ��λ�õ�x����
	@moveto_y	�����Ҫ�ƶ�����Ŀ��λ�õ�y����
	
�ж�˵��: 
	�жϺ����˻�������ұ����ƶ�������
	
---------------------------------------

*OnPCDirChangeEvent:

	�����ת��ʱ�������¼�
	
	�� conf/battle/BetterRA.conf �� always_pc_dir_event Ϊ yes ����Զ�������¼�
	�� conf/battle/BetterRA.conf �� always_pc_dir_event Ϊ no ���ȵ��� when_pcdir_doevent ����ҵĲŻᴥ�����¼�

����˵��:
	@body_dir	��ҵĳ���

---------------------------------------

*OnPCWillLoadMapEvent:

	����ҵ�¼��׼�������ͼ������׼���л���ͼʱ, ���ᴥ�����¼� (��������Ҫ��ͼ�����)

����˵��:
	@loadmap_oldmap_id		���׼����ͼʱ, �ϵ�ͼ�ĵ�ͼ���, ��Ϊ0���ʾ��Ҹյ�¼, û���ϵ�ͼ
	@loadmap_oldmap_name$	���׼����ͼʱ, �ϵ�ͼ�ĵ�ͼ����
	@loadmap_oldmap_x		���׼����ͼʱ, ���ϵ�ͼ��������x����
	@loadmap_oldmap_y		���׼����ͼʱ, ���ϵ�ͼ��������y����
	
	@loadmap_newmap_id		���׼����ͼʱ, Ŀ�ĵص�ͼ�ĵ�ͼ���
	@loadmap_newmap_name$	���׼����ͼʱ, Ŀ�ĵص�ͼ�ĵ�ͼ����
	@loadmap_newmap_x		���׼����ͼʱ, ����Ŀ�ĵص�ͼ���ĸ�x�������
	@loadmap_newmap_y		���׼����ͼʱ, ����Ŀ�ĵص�ͼ���ĸ�y�������
	
�ж�˵��: 
	�жϺ����˻�������ұ����ƶ�������
	
ע��: ���䴥������Ƶ��, ������ʹ�ô��¼�, ���������ʹ�� OnPCLoadMapFilter ����

---------------------------------------

*OnPCLoadMapFilter:

	����Ҵ��͵���һ����ͼʱ����
	
����˵��:
	@loadmap_name$	��Ҫ���͵��ĵ�ͼ����
	@loadmap_x		��Ҫ���͵��� x����
	@loadmap_y		��Ҫ���͵��� y����

�ж�˵��: 
	�жϺ�˴δ���ʧ��
	
---------------------------------------

*OnPCChangeTitleFilter:

	����ҵĳƺű����ʱ��, �ͻᴥ�����¼� (�������ƺű�������)
	
	��������������ʱ����:
	
	- �������װ�����ڵġ��ƺš�������˫����ĳ���ƺ�ʱ
	- ʹ��setchartitle�ű�ָ��ȥ���óƺ�ʱ
	- ʹ��GMָ��@titleȥ���óƺ�ʱ
	
	������� @now_title_id ����Ϊ 0 ���ʾ���˫���� ��Title Release��

����˵��:
	@trigger_mode	Ϊ0��ʾͨ��װ����崥����Ϊ1��ʾͨ��setchartitle�ű�ָ�����Ϊ2��ʾͨ��GMָ��@title����
	@now_title_id	��������ɵ�Ŀ��ƺ�ID(��ֵ�����¼��б��޸�)
	@pre_title_id	֮ǰ�ĳƺ�ID�Ƕ���

	���� @now_title_id �ǿɱ��޸ĵ�
	����������úֱܴ��ķ���, ֱ���޸� @now_title_id �ķ�ʽ���۸����յĳƺ�ID
	����Ҫע��, �������ַ����Ļ�, ������ processhalt;

�ж�˵��: 
	�жϺ����˽�������� @now_title_id ������ֵ���趨��ҵĳƺ�

---------------------------------------

*OnPCIdentifyFilter:

	����ڼ����б���ѡ���װ��, ��ȷ��ʱ���� (������������������)

����˵��:
	@identify_idx	Ϊ��Ʒ�ı������

�ж�˵��: 
	�жϺ����˻�������ұ��μ������ߵ�����, ϵͳ���ټ�����װ��

---------------------------------------

*OnPCIdentifyEvent:


	����Ѿ���ɶ�һ��װ���ļ���ʱ�������¼� (������������������)

����˵��:
	@identify_idx	Ϊ��Ʒ�ı������

---------------------------------------

*OnPCProgressAbortEvent:

	�� progressbar �����ʱ��Ĵ����¼�

---------------------------------------

*OnPCOpenRouletteFilter:

�¼�����: 
	׼������͸��ת��ʱ��Ĵ����¼�

ע������:
	��ѡ�������ͻ��˺ͷ���˵�һЩ����, ���ȿͻ��˱����� 2014-10-22 ����µİ汾,
	���ҷ������ conf/battle/feature.conf �е� feature.roulette ѡ��Ҫ����Ϊ on, ������¼������ᱻ����.

�ж�˵��:
	�жϺ����˻�������ұ��δ���͸��ת�̵�����

---------------------------------------

*OnPCCloseRouletteEvent:

�¼�����:
	�Ѿ��ɹ��ر���͸��ת��ʱ�Ĵ����¼�

ע������:
	��ѡ�������ͻ��˺ͷ���˵�һЩ����, ���ȿͻ��˱����� 2014-10-22 ����µİ汾,
	���ҷ������ conf/battle/feature.conf �е� feature.roulette ѡ��Ҫ����Ϊ on, ������¼������ᱻ����.

---------------------------------------

*OnPCPetSkillFilter:

	������ʹ�ü���ʱ����

����˵��:
	@pet_id	Ϊ����� id
	@pet_gid Ϊ����� gid
	@pet_skillid Ϊ�������ͷż��ܵ� skillid
	@pet_damage Ϊ������ petskillattack2 �е��˺�����
	
�ж�˵��:
	�жϺ�����ͷż��ܵ�ʧ��

---------------------------------------

*OnPCSocketRecvFilter:

������˽��յ����ʱ, �������¼�, ����ͨ�� rfifo_int��rfifo_str��wfifo_int��wfifo_str��fifo_debug �Է�����ݽ��н����ͱ༭

�¼����ر���:
	$packet_cmd   ���ͷ
	$packet_len   �������
	$packet_aid   ������ҵ�AID
	
ע��: 1.�¼�������ҹ�����������ʹ�� attachrid.
      2.��ʹ�ù� wfifo_int �� wfifo_str ָ���, �¼����������˻���ͻ��˷��ͱ༭���ķ��, һ����д�������Ҫ��ϸ��¼�.

�ǳ���Ҫ: 
	����Ϊ�ⲿ������뵽 map-sever.exe ʱ, 
	��Ҫ��ѭ�������, ���1~2���ֽ�Ϊ���ͷ(��uint16����), 2~4���ֽ�Ϊ�������, ��5���ֽ�����Ϊ�Զ�������
	�������Ϊ(�Զ��������ֽڳ���+4)
	���ⲿ�������ʱ, ÿ�δ�����������ʹ��haltָ���ж�, �������ɱ��������ӶϿ�

�ж�˵��:
	�жϺ���������Ե�ǰ���

---------------------------------------

*OnPCInsertCardFilter:

	�����׼�����뿨Ƭ��ʱ�򴥷��¼�

����˵��:
	@insert_equip_idx	�����������װ���ı������
	@insert_card_idx	׼������Ŀ�Ƭ�ı������
	@insert_card_id		׼������Ŀ�Ƭ����Ʒ���
	@insert_card_slot	���������뿨Ƭ�Ŀ��۱�� (���� 0 ��ʾ��һ������, ���� 3 ��ʾ���ĸ�����)

�ж�˵��:
	�жϺ����˻�������ұ��β��뿨Ƭ������

---------------------------------------

*OnPCInsertCardEvent:

	�Ѿ��ɹ�����Ƭ���뵽װ��ʱ�����¼�

����˵��:
	@insert_equip_idx	�ѱ������װ���ı������
	@insert_card_idx	�ѱ�����Ŀ�Ƭ�ı������
	@insert_card_id		�ѱ����뿨Ƭ����Ʒ���
	@insert_card_slot	�ѱ����뿨Ƭ�Ŀ��۱�� (���� 0 ��ʾ��һ������, ���� 3 ��ʾ���ĸ�����)

---------------------------------------

*OnPCRefineUIFilter:

	׼��ʹ�þ���UIʱ�����¼�, ��ͨ���޸� @refine_rate �����޸ľ����ɹ���

����˵��:
	@refine_idx			������Ʒ���ڱ����е�����
	@refine_nameid		������Ʒ����ƷID
	@refine_rate		�����ɹ����ʣ�����ͨ���޸������ֵ���ĳɹ����ʣ�
	@refine_zeny		����ʱ���ĵ�zeny
	@refine_cost		����ʱ���ĵľ�������ID
	@refine_blessing	�����Ƿ�ʹ��ף����ʯ
	
ע��:
	����ͨ���ű�ָ�� refineui_result ���Զ��徫��UI
	
�ж�˵��: 
	�жϺ����˻���Ա��ξ�������
	
---------------------------------------

*OnPCRefineUIEvent:

	ʹ�þ���UI������ɺ󴥷��¼�

����˵��:
	@refine_idx			������Ʒ���ڱ����е�����
	@refine_nameid		������Ʒ����ƷID
	@refine_blessing	�����Ƿ�ʹ��ף����ʯ
	@refine_success     �����ɹ����� 1 ���򷵻� 0
		
---------------------------------------

*OnPCEnchantGradeUIFilter:

	ʹ������UIʱ�������¼�

����˵��:
	@enchantgrade_idx					��Ʒ�ڱ����е����idx
	@enchantgrade_blessing				�Ƿ�ʹ��ף����Ʒ
	@enchantgrade_blessing_amount		ʹ��ף����Ʒ������
	@enchantgrade_item					������ƷID (Option - Item)
	@enchantgrade_amount				������Ʒ���� (Option - Amount)
	@enchantgrade_zeny					����Zeny���� (Option - Zeny)
	@enchantgrade_breaking_rate			��Ʒ�𻵵ĸ��� (Option - BreakingRate)
	@enchantgrade_downgrade_amount		����ʧ�ܺ󽵶������۵ȼ�
	@enchantgrade_change				�����ɹ��� (���Ӵ߻������ʺ�������Ʒ��������)
	@enchantgrade_catalyst				�߻�����ƷID
	
�ж�˵��: 
	�жϺ󱾴�װ��������Ч����ͨ��ָ����д����, �жϺ����ͨ�� @enchantgrade_result �������������������.
	
---------------------------------------

*OnPCEnchantGradeUIEvent:

	ʹ������UI�󴥷����¼�, �����������������ʹ�� OnPCEnchantGradeUIFilter �¼�

����˵��:
	@enchantgrade_idx					��Ʒ�ڱ����е����idx, �����Ʒ������������������Ч��
	@enchantgrade_result				���۽�� (0 - �ɹ�, 1 - ʧ��, 2 - ��, 3 - ����)
		
---------------------------------------

*OnPCItemReformUIFilter:

	ʹ�ø���UIʱ�������¼�

����˵��:
	@itemform_idx		�������Ʒ�ڱ����е����idx
	@itemform_item		�򿪸������ʹ�õ���Ʒ
	
�ж�˵��: 
	�жϺ󱾴θ�����Ч��ͨ��ָ����д�������
		
---------------------------------------

*OnPCItemReformUIEvent:

	ʹ�ø���UI�󴥷����¼�

����˵��:
	@itemform_idx		��������Ʒ�ڱ����е����idx
	@itemform_item		�򿪸������ʹ�õ���Ʒ
	@itemform_item_old	����֮ǰ����ƷID
	
---------------------------------------

*OnPCEnchantUIFilter:

	׼��ʹ������UIʱ�����¼�, ��ͨ���޸� @refine_rate �����޸ľ����ɹ���

����˵��:
	@enchant_idx			������Ʒ���ڱ����е�����
	@enchant_nameid			������Ʒ����ƷID
	@enchant_rate			�����ɹ����ʣ�����ͨ���޸������ֵ���ĳɹ����ʣ�
	@enchant_zeny			����ʱ���ĵ�zeny
	@enchant_cost[]			����ʱ���ĵĵ���ID
	@enchant_amount[]		����ʱ���ĵĵ�������
	@enchant_catalysator	�����Ƿ�ʹ�ô߻���
	
�ж�˵��: 
	�жϺ����˻���Ա�����������
	
---------------------------------------

*OnPCEnchantUIEvent:

	ʹ������UI������ɺ󴥷��¼�

����˵��:
	@enchant_idx			������Ʒ���ڱ����е�����
	@enchant_nameid			������Ʒ����ƷID
	@enchant_success		�����ɹ����� 1 ���򷵻� 0
	@enchant_catalysator	�����Ƿ�ʹ�ô߻���
	
---------------------------------------

*OnPCCashShopOpenFilter:

	���̳�ǰ�������¼�
	
�ж�˵��: 
	�жϺ����˻���Ա��δ��̳ǵ�����

---------------------------------------

*OnPCCashShopBuyFilter:

	�������ť��\��û�п۳�CASH�������õ���Ʒǰ�������¼�

����˵��:
	@cashshop_nameid[]		������Ʒ��ID
	@cashshop_quantity[]	������Ʒ������
	@cashshop_price[]		������Ʒ�ĵ���
	@cashshop_type[]		������Ʒ���̳�����Ŀ����
	@cashshop_kafra			�����ܹ�ʹ�õĿ���������
	@cashshop_count			�ܹ�������Ʒ����(���鳤��)
	
�ж�˵��: 
	�жϺ����˻���Ա��δ򿪹�������

---------------------------------------

*OnPCCashShopBuyEvent:

	�̳ǹ���ɹ��󴥷����¼�

����˵��:
	@cashshop_nameid[]		������Ʒ��ID
	@cashshop_quantity[]	������Ʒ������
	@cashshop_price[]		������Ʒ�ĵ���
	@cashshop_type[]		������Ʒ���̳�����Ŀ����
	@cashshop_kafra			�����ܹ�ʹ�õĿ���������
	@cashshop_count			�ܹ�������Ʒ����(���鳤��)

---------------------------------------

*OnPCCashShopCloseEvent:

	�ر��̳Ǻ󴥷����¼�
	
---------------------------------------

*OnPCStylistChangeEvent:

	�ڿͻ���������ƴ����е��ȷ���󴥷����¼�

����˵��:
	@stylist_hair_color		�仯��ķ�ɫ, �ޱ仯���� 0
	@stylist_hair_style		�仯��ķ���, �ޱ仯���� 0
	@stylist_cloth_color	�仯����·���ɫ, �ޱ仯���� 0
    @stylist_head_top		�仯���ͷ��(��), �ޱ仯���� 0
    @stylist_head_mid		�仯���ͷ��(��), �ޱ仯���� 0
    @stylist_head_bottom	�仯���ͷ��(��), �ޱ仯���� 0
	@stylist_body			�仯��ķ�װ���, �ޱ仯���� 0 (�ͻ��˰汾���� 20180516)
	
�ж�˵��:
	�жϺ󱾴α��ʧ��, ���жϺ����¼����Զ������
	
---------------------------------------

*OnPCMannerFilter: 

	����⵽���˵���д�ʱ����, ���ʱ���˵������������û���κ���ʾ, ���¼���� db/manner.txt ʹ��
	
����˵��:
    @manner_type ���ر�ʶ, �� db/manner.txt �еĵ�һ������
    @manner_mes$ ˵������

�ж�˵��: 
	�жϺ����˵������������û���κ���ʾ

---------------------------------------

*OnMobDeadEvent:

	ħ�ﱻɱ��ʱ�������¼� (���¼����������)

����˵��:
	$killedgid			��ɱ��ħ���GID
	$killedrid			��ɱ��ħ���ħ����(MobID)
	$killerrid			ɱ��ħ���ʵ��GID
	
ע��: ����ħ�������¼����᷵��������������
	
---------------------------------------

*OnMobDropItemFilter:

	��ħ������� item_flag.txt �б����2048����Ʒʱ�������¼�
	
����˵��:
    @drop_mobid �������Ʒ��ħ���ID
    @drop_itemid ������Ʒ��ID
	@drop_rate �������
	@drop_ratefix ������ĵ������
	
�ж�˵��: 
	�жϺ󱾴λ�ɱ���������Ʒ
	
---------------------------------------

*OnMobUseSkillFilter:

	��ħ����ʹ�ü���ʱ�������¼�
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����
	
�ж�˵��: 
	�жϺ󱾴�ʹ�ü���ʧ��
	
---------------------------------------

*OnMobUseSkillEvent:

	��ħ����ʹ�ü��ܺ󴥷����¼�
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����

---------------------------------------

*OnMerCreateFilter:

	��Ӷ������ʱ����
	
����˵��:
	@mer_id			Ӷ��ID
	@mer_lifetime	Ӷ������ʱ��
				
�ж�˵��:
	�жϺ󱾴δ���Ӷ��ʧ��
	
---------------------------------------

*OnMerLeaveEvent:

	��Ӷ���뿪ʱ����
	
����˵��:
	@mer_gid	Ӷ��GID
	@mer_reason	Ӷ���뿪ԭ��:
				0 - ����ʱ�䵽��
				1 - Ӷ������
				2 - ���
				3 - ���������������
	
---------------------------------------

*OnMerUseSkillFilter:

	��Ӷ����ʹ�ü���ʱ�������¼�
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����
	
�ж�˵��: 
	�жϺ󱾴�ʹ�ü���ʧ��
	
---------------------------------------

*OnMerUseSkillEvent:

	��Ӷ����ʹ�ü��ܺ󴥷����¼�
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����

---------------------------------------

*OnPCOpenVendFilter:

	����ҿ����ҵ�֮ǰ����
	
����˵��:
	@vend_idx		��Ʒ�����Ƴ��е�λ�����(����)
	@vend_amount	��Ʒ���۵����� (���� ��ͨ���޸�ʵ�ʳ�������)
	@vend_price		��Ʒ���۵ĵ��� (���� ��ͨ���޸�ʵ�ʳ��۵���)
	@vend_loot		ʹ�û��ҵ���ƷID
	@vend_currency	ʹ�û��ҵĻ���ID
	@vend_count		һ�����۶�������Ʒ
	
�ж�˵��: 
	�жϺ󱾴ιҵ�ʧ��
		
---------------------------------------

*OnPCOpenBuyingFilter:

	����ҿ����ɹ��̵�֮ǰ����
	
����˵��:
	@buying_nameid		�ɹ���Ʒ��ID(����)
	@buying_amount		�ɹ���Ʒ������ (���� ��ͨ���޸�ʵ�ʳ�������)
	@buying_price		�ɹ���Ʒ�ĵ��� (���� ��ͨ���޸�ʵ�ʳ��۵���)
	@buying_loot		ʹ�û��ҵ���ƷID
	@buying_count		һ���ɹ���������Ʒ
	
�ж�˵��: 
	�жϺ󱾴βɹ�ʧ��
	
---------------------------------------

*OnPCTradeVendingFilter:

	����Ҵӹҵ깺����Ʒʱ�������¼�, �¼������ҵ����, ��������Ƴ��л�ȡ��Ʒ����
	
����˵��:
	@vend_idx			������Ʒ�����Ƴ��е�λ�����(����)
	@vend_nameid		������Ʒ����ƷID            (����)
	@vend_amount		������Ʒ������              (����)
	@vend_price			������Ʒ�ĵ���              (����)
	@vend_pricetotal	������Ʒ���ܼ�
	@vend_loot			����ʹ�û��ҵ���ƷID
	@vend_currency		����ʹ�û��ҵĻ���ID
	@vend_count			�����������Ʒ
	
�ж�˵��: 
	�жϺ󱾴ιҵ�ʧ��
			
---------------------------------------

*OnPCTradeBuyingFilter:

	������ڲɹ��̵��г�����Ʒʱ����, �¼�����������Ʒ�����, ����ӱ����л�ȡ��Ʒ����
	
����˵��:
    @buying_idx         ������Ʒ�ڱ����е�ID (����)
	@buying_nameid		������Ʒ��ID         (����)
	@buying_amount		������Ʒ������       (����)
	@buying_price		������Ʒ�ĵ���       (����)
	@buying_pricetotal  ������Ʒ���ܼ۸�
	@buying_loot		����ʹ�û��ҵ���ƷID
	@buying_currency	����ʹ�û��ҵĻ���ID
	@buying_count		���۲ɹ���������Ʒ
	
�ж�˵��: 
	�жϺ󱾴γ���ʧ��
		
---------------------------------------

*OnPCTradeAddFilter

	������Ʒ(zeny)���ӵ����ײ˵�ʱ����
	
����˵����
	@trade_partner_aid ���׶Է���AID
	@trade_partner_cid ���׶Է���CID
	@trade_itemid ���뽻�ײ˵���Ʒ��ID, �����Zeny �򷵻� 0
	@trade_amount ���뽻�ײ˵���Ʒ������, �����Zeny ��Zeny����
	@trade_idx ���뽻�ײ˵���Ʒ�ڱ����е�����, �����Zeny �򷵻� -1
	
�ж�˵��: 
	�жϺ���뽻�ײ˵�ʧ��

---------------------------------------

*OnPCMailAddFilter

	������Ʒ(zeny)���ӵ��ʼ�����ʱ����
	
����˵����
	@mail_itemid ���ӵ��ʼ�������Ʒ��ID �����Zeny, �򷵻� 0
	@mail_amount ���ӵ��ʼ�������Ʒ������ �����Zeny, ��Zeny����
	@mail_idx ���ӵ��ʼ�������Ʒ�ڱ����е����� �����Zeny, �򷵻� -1
	
�ж�˵��: 
	�жϺ����ӵ��ʼ�����ʧ��

---------------------------------------

*OnPCInventoryAddFilter

	�������з�����Ʒʱ����
	
����˵����
	@recv_itemid �յ�����ƷID
	@recv_amount �յ�����Ʒ����
	@recv_source ����������
	@recv_storid �յ�����Ʒ�ֿ�ID(����ֿⷵ��-1, ��ͨ�ֿ����չ�ֿⷵ�زֿ�ID)
	@recv_idx ��Ʒԭ��������λ�õ����(���زֿ�/���Ƴ�/����λ�����)

���� @recv_source
	1  => ����
	2  => ���Ƴ�
	3  => ��ͨ/��չ�ֿ�
	4  => ����ֿ�
	5  => ʰȡ
	6  => NPC����
	7  => �ű�(getitem��)
	8  => ����
	9  => ����
	10 => ¶���̵�
	11 => �ɹ�
	12 => ����(����: ��ʯͷ/��ʹ֮���)
	13 => ����
	14 => ����
	15 => �̳�
	16 => ָ��
	17 => ת��
	18 => ����ʱ���
	19 => ����

ע��: 
	������ڿ���м���ʱ�������¼�, 
	�뽫 BetterRA.conf �� enable_delitem_event ����Ϊ yes
	������ʱ @recv_amount Ϊ����, ���ж���Ч

�ж�˵��: 
	�жϺ���Ʒ������ԭλ�ò���, ����Ʒ����Ϊ����ʱ, ���ó���Ʒʱ, �޷��ж��¼�

---------------------------------------

*OnPCStorageAddFilter

	���ֿ������Ʒʱ����, �ֿ�Ϊ��ͨ�ֿ�/��չ�ֿ�/����ֿ�3��, ���ᴥ��
	
����˵����
	@recv_itemid �յ�����ƷID
	@recv_amount �յ�����Ʒ����
	@recv_source ����������(1: ����, 2: ���Ƴ�)
	@recv_stortype �ֿ�����(3: ��ͨ�ֿ� 4: ����ֿ�)
	@recv_storid �յ�����Ʒ�ֿ�ID(����ֿⷵ��-1, ��ͨ�ֿ����չ�ֿⷵ�زֿ�ID)
	@recv_idx ��Ʒԭ��������λ�õ����(���زֿ�/���Ƴ�/����λ�����)

ע��: 
	������ڿ���м���ʱ�������¼�, 
	�뽫 BetterRA.conf �� enable_delitem_event ����Ϊ yes
	������ʱ @recv_amount Ϊ����, ���ж���Ч

�ж�˵��: 
	�жϺ���Ʒ������ԭλ�ò���, ����Ʒ����Ϊ����ʱ, ���ó���Ʒʱ, �޷��ж��¼�

---------------------------------------

*OnPCCartAddFilter

	�����Ƴ�������Ʒʱ����
	
����˵����
	@recv_itemid �յ�����ƷID
	@recv_amount �յ�����Ʒ����
	@recv_source ����������(1: ����, 3: ��ͨ/��չ�ֿ� 4: ����ֿ�)
	@recv_storid �յ�����Ʒ�ֿ�ID(����ֿⷵ��-1, ��ͨ�ֿ����չ�ֿⷵ�زֿ�ID)
	@recv_idx ��Ʒԭ��������λ�õ����(���زֿ�/���Ƴ�/����λ�����)

ע��: 
	������ڿ���м���ʱ�������¼�, 
	�뽫 BetterRA.conf �� enable_delitem_event ����Ϊ yes
	������ʱ @recv_amount Ϊ����, ���ж���Ч

�ж�˵��: 
	�жϺ���Ʒ������ԭλ�ò���, ����Ʒ����Ϊ����ʱ, ���ó���Ʒʱ, �޷��ж��¼�
	
---------------------------------------

*OnPCPickLogEvent

	����Ҽ�¼��ȡʧȥ��Ʒʱ�������¼�, �����¼���ʱ���� MySQL��pick����ͬ
	
����˵��:
	@pick_itemid      ��ƷID
	@pick_amount      ��Ʒ����
	@recv_stortype    ��Ʒ�������� (1: ���� 2:���Ƴ� 3: ��ͨ/��չ�ֿ� 4: ����ֿ�)
	@pick_storid      ��Ʒ���Բֿ�ID (����ֿⷵ��-1, ��ͨ�ֿ����չ�ֿⷵ�زֿ�ID)
	@pick_partner_aid ��Ʒ���ԶԷ���AID (���� ���ס��ҵꡢ�ɹ�)
	@pick_idx         ��Ʒԭ��������λ�õ����, ��ͨ�� getinventoryinfo getcartinfo getstorageinfo getguildstorageinfo �鿴��Ʒ��ϸ��Ϣ
	@pick_type$       log ����
						- 'W' ���Ƴ�
						- 'T' ���� 
						- 'V' �ҵ� 
						- 'P' ���ʰ��
						- 'M' ħ����� 
						- 'S' NPC���� 
						- 'N' �ű����� 
						- 'D' ͵�� 
						- 'C' ���� 
						- 'O' ���� 
						- 'U' MVP��Ʒ 
						- 'A' ָ���ȡ 
						- 'R' �ֿ� 
						- 'G' ����ֿ� 
						- 'E' �ʼ� 
						- 'I' ���� 
						- 'B' �ɹ� 
						- 'L' ħ��ʰȡ����
						- 'K' ����
						- 'X' ���� 
						- '$' �̳� 
						- 'F' �Ƴ���
						- 'Y' ����ת��
						- 'Z' �ϳ�
						- 'Q' ����
						- 'H' ���Ʒ���

---------------------------------------

*OnPCDropItemFilter

	������ӵ���Ʒʱ����
	
����˵����
	@drop_itemid �ӵ���Ʒ��ID
	@drop_amount �ӵ���Ʒ������
	@drop_idx �ӵ���Ʒ�ڱ����е�����
	
�ж�˵��: 
	�жϺ��ӵ���Ʒʧ��

---------------------------------------

*OnPCAttackFilter:

	����ҹ���������˺�ʱ����
	ע��: ���¼���BetterRA.conf�� attack_filter_target ���� �� �ű�ָ�� unitatkeventmark ��ͬ����
	
����˵��(ע��, ���ز��������κη���)
	dmg_type ��������(ʹ��λ������, �����ǲ�����Ҫ�Ĺ�������)
	dmg_damage ���ι���ʵ���˺�, ��󲻳��� 2147483647
	dmg_display ���ι�����ʾ�˺�, ��󲻳��� 2147483647 
	dmg_skillid ���ι�����ʹ�õļ���ID, ���Ϊ��ͨ������Ϊ0
	dmg_skilllv ���ι�����ʹ�õļ��ܵȼ�, ���Ϊ��ͨ������Ϊ0
	dmg_targettype ���ι�����Ŀ������(ʵ������)(ʹ��λ������, �����ǲ�����Ҫ������)
	dmg_targetgid ���ι���Ŀ���GID
	dmg_mobid ���ι���Ŀ���ħ��ID, �����Ϊħ����Ϊ0
	dmg_mark �����ɽű�ָ�� unitatkeventmark ���õı��

�������Ͳ���˵��:
	��������Χ:
		BF_SHORT:  �����빥��
		BF_LONG:   Զ���빥��
		Ĭ��:   BF_SHORT+BF_LONG
	����������:
		BF_WEAPON: ��������
		BF_MAGIC:  ħ������
		BF_MISC:   ��Ϲ���
		Ĭ��:   BF_WEAPON
	����������:
		BF_NORMAL: ��ͨ����
		BF_SKILL:  ���ܹ���
		Ĭ��:   ������������� BF_WEAPON (only) BF_NORMAL, ���� BF_SKILL+BF_NORMAL.
	
ʵ�����Ͳ���˵��:	
	BL_PC   - ���
	BL_PET  - ����
	BL_HOM  - ������
	BL_MER  - Ӷ��
	BL_ELEM - Ԫ��

�ж�˵��: 
	�жϺ��ͨ���޸� dmg_damage �������޸ı����˺���ʵ��ֵ(������Ϊ0), ͨ�� dmg_display �޸���ʾ�˺�

---------------------------------------

*OnPCAttackedFilter:

	����ұ�����������˺�ʱ�������¼�
	ע��: ���¼���BetterRA.conf�� attacked_filter_target(��ͬ��OnPCAttackFilter�¼�) ���� �� �ű�ָ�� unitatkedeventmark(��ͬ��OnPCAttackFilter�¼�) ��ͬ����
	
����˵��(ע��, ���ز��������κη���)
	dmg_type ��������(ʹ��λ������, �����ǲ�����Ҫ�Ĺ�������)
	dmg_damage ���ι���ʵ���˺�, ��󲻳��� 2147483647
	dmg_display ���ι�����ʾ�˺�, ��󲻳��� 2147483647 
	dmg_skillid ���ι�����ʹ�õļ���ID, ���Ϊ��ͨ������Ϊ0
	dmg_skilllv ���ι�����ʹ�õļ��ܵȼ�, ���Ϊ��ͨ������Ϊ0
	dmg_targettype ���ι�����Ŀ������(ʵ������)(ʹ��λ������, �����ǲ�����Ҫ������)
	dmg_targetgid ���ι���Ŀ���GID
	dmg_mobid ���ι���Ŀ���ħ��ID, �����Ϊħ����Ϊ0
	dmg_mark �����ɽű�ָ�� unitatkeventmark ���õı��
	
��������˵������� OnPCAttackFilter �¼�

�ж�˵��: 
	�жϺ��ͨ���޸� dmg_damage �������޸ı����˺���ʵ��ֵ(������Ϊ0), ͨ�� dmg_display �޸���ʾ�˺�

---------------------------------------

*OnPCBonusFilter

	����һ�� bonus ����ʱ����, ָ���ͨ�� getbonus ��ȡ��Ҹ�����ʵ��ֵ, Ҳ��ͨ���ж� ��ҽ�ɫ���˺�ID�����ۼӻ�ȡʵ��ֵ
	
����˵����
	@bonus_type ��������, �� bonus ���һ������(��: bStr ��)
	@bonus_val1 �� 1 ������
	@bonus_val2 �� 2 ������
	@bonus_val3 �� 3 ������
	@bonus_val4 �� 4 ������
    @bonus_val5 �� 5 ������

�ж�˵��: 
	�жϺ��ͨ���޸�����Ĳ�����ʵ�ֶ����ս����Ӱ��, �� @bonus_type Ϊ0ʱ, ��ǰ Bonus ����ʧЧ

---------------------------------------

*OnAnyoneUseSkillFilter:

�¼�������
	���ͷż���ǰ����
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����
	
��Ͻű�ָ�� unitskilltowide �� unitskilltoAOE ʵ�ָ��༼��

---------------------------------------

*OnAnyoneUseSkillEvent:

�¼�������
	���ͷż��ܺ󴥷�
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����

---------------------------------------

*OnAnyoneCustomSkillEvent:

�¼�������
	��ʹ���Զ��弼��ʱ����, ��ͨ���ű�ָ�� unitskilltowide �� unitskilltoAOE ʵ�ָ��๦��
	
����˵����
	$useskill_src �ͷż��ܶ����GID
	$useskill_id ����ID
	$useskill_lv ���ܵȼ�
	$useskill_target Ŀ��GID
	$useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
	$useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����

---------------------------------------

*OnPCProduceFilter:

	�����������Ʒʱ������
	
����˵��:
����ر�����Ʒѡ�񴰿�
	@produce_skill ������Ʒʱʹ�����ĸ�����, ����˵������ҩ
	@produce_nameid ������������Ʒ
	@produce_qty ��������Ʒ����
	@produce_per �����ĳɹ���, �����

�ж�˵��: 
	�жϺ��ͨ���� @produce_qty �� @produce_per ���޸�ֱ���޸����������ͳɹ���
	�������������߳ɹ���Ϊ0ʱ, ����ʧ��.
	
---------------------------------------

*OnPCReviveFilter:

	���渴��ʱ�������¼�
	
����˵��:
	@revive_hp ������HP
	@revive_sp ������SP

�ж�˵��: 
	�жϺ󸴻�ʧ��
	
---------------------------------------

*OnPCPetCatchFilter:

	�����ץȡ����ʱ�������¼�, ���¼���ץ����ȡ��Ӧ����Ҳ���Դ���
	
����˵��:
	@PetCatch_mob     ��ץ�����Ӧ��ħ��ID
	@PetCatch_gid     ��ץ�����Ӧ��ħ��GID
	@PetCatch_item    ��ץ������ʹ�õ���ƷID
	@PetCatch_rate    �������ĳɹ�����

�ж�˵��: 
	�жϺ��ͨ���� @PetCatch_result(1: �ɹ� 0: ʧ��) �޸Ķ������Ž��
	����ͨ���ű�ָ�� makepet �Զ������չ���, Ҳ��ͨ������ָ������������

---------------------------------------

*OnPCPetCatchEvent:

	�����ץȡ��������󴥷����¼�
	
����˵��:
	@PetCatch_mob     ��ץ�����Ӧ��ħ��ID
	@PetCatch_gid     ��ץ�����Ӧ��ħ��GID
	@PetCatch_item    ��ץ������ʹ�õ���ƷID
	@PetCatch_rate    �������ĳɹ�����
	@PetCatch_result  �Ƿ�ץȡ�ɹ�(1: �ɹ� 0: ʧ��)
	
---------------------------------------

*OnPCItemExpiredFilter:

	����Ʒ���ڱ�ɾ��ǰ����
	
����˵��:
	@item_idx    ��Ʒ�ڱ����е�����
	@item_nameid ��ƷID
	
�ж�˵��: 
	����Ϊ�����޵���, ���������ڱ�����, ������Լ�������Ʒɾ���뱣����ʹ�� delinventorybyidx ɾ������Ʒ
	
---------------------------------------

*OnPCStatusUpFilter:

	�������������������Ե���ʱ����
	
����˵��:

	@status_type    ���Ե����� (֧��: bStr,bAgi,bVit,bInt,bDex,bLuk,bPow,bSta,bWis,bSpl,bCon,bCrt)
	@status_amount	���Ե���������
	@status_need	�������Ե���Ҫ���ĵ��ĵ���
	
�ж�˵��: 
	�������Ե���ʧ��
		
---------------------------------------

*OnPCStatusChangeEvent:

	��������Ե������ı�󴥷�
	
����˵��:
	@status_type    ���Ե����� (֧��: bStr,bAgi,bVit,bInt,bDex,bLuk,bPow,bSta,bWis,bSpl,bCon,bCrt)
	@status_amount	���Ե���������
	@status_old		δ����֮ǰ�����Ե���
	
---------------------------------------

*OnPCChannelJoinFilter:

	������Ƶ��ʱ����
	
����˵��:
	@channel_name$    Ƶ������
	@channel_alias$   Ƶ������
	@channel_type     Ƶ������(CHAN_TYPE_PUBLIC ����Ƶ��, CHAN_TYPE_PRIVATE ˽��Ƶ��, CHAN_TYPE_MAP ��ͼƵ��, CHAN_TYPE_ALLY ����ͬ��Ƶ��)
	@channel_opt      Ƶ������(��鿴 channel_create ָ��)
	
�ж�˵��: 
	����Ƶ��ʧ��
	
---------------------------------------

*OnPCChannelLeaveEvent:

	���뿪Ƶ��ʱ����
	
����˵��:
	@channel_name$    Ƶ������
	@channel_alias$   Ƶ������
	@channel_type     Ƶ������(CHAN_TYPE_PUBLIC ����Ƶ��, CHAN_TYPE_PRIVATE ˽��Ƶ��, CHAN_TYPE_MAP ��ͼƵ��, CHAN_TYPE_ALLY ����ͬ��Ƶ��)
	@channel_opt      Ƶ������(��鿴 channel_create ָ��)
	
---------------------------------------

*OnInstanceCreateFilter:

	����������ǰ����, ���¼�������ҹ���, ��ͨ�� getpartymember��getguildmember �Գ�Ա���б���
	
����˵��:
	$@instance_owner ��������ID�����ID������ID������ID������ID��
	$@instance_mode  ����ģʽ
	$@instance_name$ ������

�ж�˵��: 
	�жϺ󸱱�����ʧ��, ������ -4

---------------------------------------

*OnInstanceCreateEvent:

	�����������󴥷�, ���¼�������ҹ���, ��ͨ�� getpartymember��getguildmember �Գ�Ա���б���
	
����˵��:
	$@instance_id    ����ID
	$@instance_owner ��������ID�����ID������ID������ID������ID��
	$@instance_mode  ����ģʽ
	$@instance_name$ ������
	
---------------------------------------

*OnInstanceDestroyEvent:

	�����������󴥷�, ���¼�������ҹ���, ��ͨ�� getpartymember��getguildmember �Գ�Ա���б���
	
����˵��:
	$@instance_id    ����ID
	$@instance_owner ��������ID�����ID������ID������ID������ID��
	$@instance_mode  ����ģʽ
	$@instance_name$ ������
	
---------------------------------------

*OnMobSpawnFilter:

	��ħ������ǰ����, ��ͨ�� setunitdata ����ħ������
	
����˵��:
	$spawn_gid    ħ��GID
	$spawn_mobid  ħ��mob_id
	
�ж�˵��: 
	�жϺ�ħ������ʧ��, ���ᴥ��ħ�������¼�
		
---------------------------------------

*OnMVPSpawnFilter:

	��MVPħ������ǰ����, ��ͨ�� setunitdata ����ħ������
	
����˵��:
	$spawn_gid    ħ��GID
	$spawn_mobid  ħ��mob_id
	
�ж�˵��: 
	�жϺ�ħ������ʧ��, ���ᴥ��ħ�������¼�
	
---------------------------------------

*OnBOTStartFilter:

	��BOT����ʱ����

�ж�˵��: 
	�жϺ�BOT����ʧ��

---------------------------------------

*OnBOTRecvActEvent:

	��BOT���յ�ָ�������������Ϣʱ�������¼�

����˵��:
	@bot_recv_type     �յ���Ϣ������(0: ����ʧ���˳��һ� 1:�������� 2:�������� 3:�������� 4:˽������ 5:�������� 6:�������� 7:�������� 8:��������)
	@bot_recv_target   �յ�����AID��ҵ���Ϣ
	
	
	������ʧ�ܼ���ֹͣ���յ��ǳ���Ϣʱ, ����ԭ��
	@bot_recv_logout   ʧ��ԭ��, ���˱�������Ϊ 0, ������ʧ�ܴ���(1:Ѱ·ʧ�� 2:��ͨ����ʧ�� 3:���ܹ���ʧ��)
	
	���յ�������Ϣʱ, ���ضԷ����͵�������Ϣ
	@bot_recv_name$    �յ�������Ϣ��Ӧ�������
	@bot_recv_message$ �յ�������Ϣ��Ӧ������
	
	���Է��Ľ����б�������ʱ, ���ضԷ������б��е���Ϣ
	@bot_recv_idx[]    �Է������б��е���Ʒ�ڱ��������
	@bot_recv_nameid[] �Է������б��е���ƷID
	@bot_recv_amount[] �Է������б��е���Ʒ����
	@bot_recv_zeny     �Է������б��е�zeny����

ע��: ���¼� ��Ҫ��Ͻű�ָ�� bot_trade bot_party bot_guild һ��ʹ��

---------------------------------------

*OnBOTStopEvent:

	��BOT�һ�ֹͣʱ�ɴ������¼�, �ڴ��¼��¶�BOT�����κβ����Ի�ʧ�����Ҫ��BOT��ͣ������BOT, �������¼����� add_timer ���������¼�����BOT
	
����˵��:
	@offline    ����Ƿ�Ϊ���߹һ�
	@bot_reason ֹͣԭ��, Ϊ 1 ʱ ����ʹ��ʧ�� Ϊ 2 ʱ����ʧ��, Ϊ 3 ʱ�ƶ�ʧ��, Ϊ 4 ʱ�һ�ʱ�䵽
	
---------------------------------------

*OnPCCaptchaFilter:

	��ҿ�ʼ��֤ʱ�ᴥ���ýű��¼�, ���¼�ͨ��ִ�нű���GMָ�� macro_detector �� captcha ����
	ͼƬ��֤˵�����Ķ� db/import/captcha/readme.md
	
����˵��:
	@captcha_key$		ͼƬ�ϵ��ı�(��֤��)
	
�ж�˵��: 
	�жϺ󱾴���֤�벻���͸����
	
---------------------------------------

*OnPCCaptchaEvent:

	�������ͼƬ�ϵ����ݲ�ȷ�Ϻ󴥷����¼�, ���¼�ͨ��ִ�нű���GMָ�� macro_detector �� captcha ����
	ͼƬ��֤˵�����Ķ� db/import/captcha/readme.md
	�ɽ� conf/battle/client.conf �е� macro_detection_punishment ��Ϊ 2 �Ӵ˴������ͷ�
	
����˵��:
	@captcha_key$		ͼƬ�ϵ��ı�(��֤��)
	@captcha_answer$	��������
	@captcha_retry		ʣ�����Դ���
	@captcha_tick		��������ʱ��
	@captcha_result		�Ƿ���֤�ɹ�

---------------------------------------

*OnPetTempRemoveEvent:

	����ʱ���ﱻ��ҵ���ָ�����״̬ʱ������ǿ���Ƴ�ʱ����
	
����˵��:
	@pet_id        ����ID
	@pet_gid       ����GID
	@pet_hungry    ���Ｂ��ֵ
	@pet_intimate  ����øж�
	
ע��: �������������ʱ����ظ�������̬ʱ, 
      �����ڴ��¼���ʹ�� unitremove @pet_gid, 0; ָ����������Ƴ�����.
	  
=====================
|1.-   NPC�¼�    .|
=====================

*OnJoinChatroom:

	�����˫�����뱾NPC�����������Ҵ������¼����¼�, ���¼�ֻ�Ե�ǰNPC��Ч, �뽫���¼�����Ҫ���Ƶ�NPC��

�¼�˳��:
	����֪�� waitingroom �����Դ�һ���¼�, ���������еĳ�Ա
	�����㹻ʱ, �ͻᱻ������

	����������Ҫ֪������, ����ʹ�� processhalt �ж��˱��¼�, ��ô
	��� rAthena �Դ��� waitingroom �¼������ᱻ������

�ж�˵��: 
	�жϺ�ͻ��˽�����������Ҵ���

---------------------------------------

*OnDisplay:

	��NPC������ҿ��ӷ�Χ�ڴ������¼�, ���¼�ֻ�Ե�ǰNPC��Ч, �뽫���¼�����Ҫ���Ƶ�NPC��

�ж�˵��: 
	NPC������ʾ�������Ұ��, ����Ͻű�ָ�� unithide �� unitshow ���һЩNPC�Ը�����ҵ���ʾ�����ز���.

---------------------------------------//===== BetterRa �ĵ� =======================================
//= BetterRa �¼���ǩ˵���ļ�
//===== ����: ================================================
//= BetterRa �����Ŷ�
//===== ������: ============================================
//= 20170831
//===== �ĵ����: ============================================
//= BetterRa �ǻ��� rAthena ���ж��ο�����, �� rAthena �ٷ�֧
//= �ֵ���Ʒ����Ч��������, BetterRa Ҳ��չ��һЩ��Ʒ����Ч��, �����
//= �����˵��, ���������Щ��Ʒ����Ч����ʹ�÷���.
//============================================================

bonus2 bSkillUseHP,sk,n;				���ټ���sk��HP���� + n ���ø�����������
bonus2 bSkillUseHPrate,sk,n;			���ټ���sk��HP���� + n%
bonus2 bSkillUseAP,sk,n;				���ټ���sk��AP���� + n ���ø�����������
bonus2 bSkillUseAPrate,sk,n;			���ټ���sk��AP���� + n%
bonus bAPGainValue,n;                   �Խ�������������ɱ��ħ��ʱ�õ� n AP
bonus bLongAPGainValue,n;				��Զ������������ɱ��ħ��ʱ�õ� n AP
bonus bMagicAPGainValue,n;				��ħ������ɱ��ħ��ʱ�õ� n AP
bonus2 bItemDelay,i,n;					Ϊָ����Ʒ i ����ʹ�ú��ӳ� n ����, ���ø��������ӳ�

bonus2 bAddItemTypeDropRate,t,n;		��ɱ��ħ��������ʱ, ��Ʒ���� t �ĵ��ߵ���������� n/10%
bonus2 bAddRaceDropRate,r,n;			��ɱ��ħ��������ʱ, ħ������ r �ĵ��ߵ���������� n/10%
bonus2 bAddClassDropRate,c,n;			��ɱ��ħ��������ʱ, ħ����� c �ĵ��ߵ���������� n/10%

bonus2 bWeaponSubSize,s,x;				���ܵ���������ʱ, ������������ s ���˺� x%

bonus4 bSkillForAOE,sk,range,n,r;		ʹ��sk����ʱ, ��r(ǧ����)�ļ��ʶ�range��Χ�ڵ�n��Ŀ��ʹ��ͬ���ļ���.
bonus bWeaponAddDamage,n;				��ͨ�������������ܹ���ʱ���� n �Ĺ̶��˺�
bonus bMagicAddDamage,n;				ħ�����ܹ���ʱ���� n �Ĺ̶��˺�
bonus bMiscAddDamage,n;					��ϼ��ܹ���ʱ���� n �Ĺ̶��˺�
bonus2 bAddDamage,bf,n;					�����ʹ�� bf ����ʱ, ���� n �Ĺ̶��˺�
bonus2 bAddDamagerate,bf,n;				�����ʹ�� bf ����ʱ, ���� n% �Ĺ̶��˺�
bonus bAddMastery,n;					�����ƿ��˺� n, ���������������ӵȼ� * 5�˺� bonus bAddMastery,5*getskilllv(NC_TRAININGAXE);
bonus bAddCartMaxWeight,n;				������Ƴ������������� n (ÿ10������1����)
bonus bAddWeight,n;						��Ҹ������� n, �Ǹ������� (ÿ10������1����)
bonus3 bSkillDamage,sk,lv,n;			Ϊlv�ȼ���sk��������n�Ĺ̶��˺�
											�ȼ�Ϊ-1ʱ ÿ���۶��ټ��������ӹ̶��˺�ֵ
											�ȼ�Ϊ 0ʱ ���ռ��ܵȼ��������ӹ̶��˺�
											�ȼ�Ϊ>0ʱ ֻ�Ըü��ܵȼ������˺�
											
bonus3 bDamageReturn,bf,r,n;			������ܵ� bf ����ʱ�� r/10% �ĸ��ʷ��� n% ���˺� (���������ħ������, ���䲻���������¼�, ������bAutoSpell���ᱻ����)
bonus3 bDamageReturnWithGroup,bf,r,n;	������ܵ� bf ����ʱ�� r/10% �ĸ��ʷ��� n% ���˺� (�������ħ������  , ���䲻���������¼�, ������bAutoSpell���ᱻ����)

bonus3 bDamageDrain,bf,r,n;				������ܵ� bf ����ʱ�� r/10% �ĸ������� n ���˺�
bonus3 bDamageDrainRate,bf,r,n;			������ܵ� bf ����ʱ�� r/10% �ĸ������� n/1000% ���˺�
	
bonus2 bDamageFix,r,n;					����˺���������СΪ r, ���Ϊ n, ��� r �� n Ϊ 0 ���������
	
bonus2 bSkillTreeCooldownRate,jobid,n;	ְҵ���ܹ��������ӳٰ��ٷֱȵ���
bonus2 bSkillTreeCooldown,jobid,n;		ְҵ���ܹ��������ӳٵ���
bonus2 bSkillTreeDelayRate,jobid,n;		ְҵ���ܶ��������ӳٰ��ٷֱȵ���
bonus2 bSkillTreeDelay,jobid,n;			ְҵ���ܶ��������ӳٵ���

bonus2 bReborn,r,n;						���������ʱ�� r% �ĸ��ʸ���ָ� n% ��Ѫ��
bonus2 bBlockStatus,x,n;				�̶�������� x Ϊ n
										x ֧��	STATUS_MAXHP STATUS_MAXSP 
												STATUS_STR STATUS_AGI STATUS_VIT STATUS_INT STATUS_DEX STATUS_LUK
												STATUS_ATK_L STATUS_ATK_R STATUS_MATK_L STATUS_MATK_R
												STATUS_HIT STATUS_SPEED STATUS_FLEE_L STATUS_FLEE_R STATUS_CRI
												STATUS_DEF_L STATUS_DEF_R STATUS_MDEF_L STATUS_MDEF_R
												STATUS_ATK_ELE STATUS_DEF_ELE STATUS_ATK_RANGE STATUS_ASPD

bonus bCooldownrate,n;					���ܶ����ӳ�ʱ�� + n%
bonus bMaxASPD,n;						�޸�ASPD����(����CONF�е�����)
bonus bDefSize,s;						�޸����ʹ�СΪ s
bonus bDefRace,r;						�޸�����Ϊ r
bonus bDefEleLevel,n;					�޸ķ������Եȼ�Ϊ n
bonus3 bSkillItemFix,sk,iid,n;			���� sk ���ĵ���ƷID iid ���� n ��(n����Ϊ������������)
bonus3 bRegen,hp,sp,t;					ÿ�� t ����, �ָ� HP �� SP (������, ��������)
bonus3 bRegenPercent,hp,sp,t;			ÿ�� t ����, ���ٷֱȻָ� HP �� SP(������, ��������)
bonus4 bRegen,hp,sp,ap,t;				ÿ�� t ����, �ָ� HP \ SP �� ap (������, ��������)
bonus4 bRegenPercent,hp,sp,ap,t;		ÿ�� t ����, ���ٷֱȻָ� HP \ SP �� ap (������, ��������)

bonus bFixedCastAddRate,n;				�̶�ӽ��ʱ�� + n%(���ۼ�)
bonus3 bMultiDamageRate,bf,r,n;			�����ʹ�� bf ����ʱ, �� r/10% �ĸ���ʹ�˺����� n% ��
bonus2 bSkillCritical,sk,r;				�����ʹ�� sk ����ʱ, �� r/10% �ĸ��ʱ�������ʾ�����˺� (sk Ϊ -1 ʱ�������м��ܱ�������)
bonus bSkillCritAtkRate,n;				���ܱ������� + n%

bonus3 bSkillAddDiv,sk,div,n;			���� sk ����������� div, �˺� + n%, �� n Ϊ 0 ʱ�˺����ݶ�������
bonus2 bSkillChangeType,sk,bf;          �޸ļ��� sk ��������Ϊ bf

bonus2 bIgnoreMdefRaceVal,r,n;			���� r ���� n ��ħ��������
bonus2 bIgnoreMdefClassVal,c,n;			���� c ���ħ�� n ��ħ��������
bonus2 bIgnoreDefRaceVal,r,n;			���� r ���� n ��ħ��������
bonus2 bIgnoreDefClassVal,c,n;			���� c ���ħ�� n ��ħ��������

bonus bIgnoreWhiteImprison,n;			���Ӱ�ɫ����, n������

bonus3 bFinalAddRace,r,x,bf;			ʹ�� bf ����ʱ, ���� r ���� x% ���˺�(�������˺���ȫ������)
bonus3 bFinalAddClass,c,x,bf;			ʹ�� bf ����ʱ, ���� c ���ħ�� x% ���˺�(�������˺���ȫ������)
bonus3 bFinalAddRaceDamage,r,n,bf;		ʹ�� bf ����ʱ, ���� r ���� n ���˺�(�������˺���ȫ������)
bonus3 bFinalAddClassDamage,c,n,bf;		ʹ�� bf ����ʱ, ���� c ���ħ�� n ���˺�(�������˺���ȫ������)

bonus2 bAddSkillArea,sk,n;				���� sk ���� n ��Χ, �����ڽ����Χ����
bonus2 bAddSkillRange,sk,n;				���� sk ���� n �񹥻�����

bonus2 bSkillToAround,sk,r;				���� sk ��ΪȺ�弼��, �Զ�ѡ������ r ��Χ�ڵ����еж�Ŀ����й���
bonus2 bSkillToGround,sk,r;				���� sk ��Ϊ���漼��, ������ r ��Χ�ڵ����еж�Ŀ��
bonus3 bSkillToAround,sk,r,n;			���� sk ��ΪȺ�弼��, �Զ�ѡ�� r ��Χ�ڵ���� n ���ж�Ŀ����й���
bonus3 bSkillToGround,sk,r,n;			���� sk ��Ϊ���漼��, ������ r ��Χ�ڵ���� n ���ж�Ŀ��

bonus2 bSkillNoSpecial,sk,bitmask;		�Ƴ����� sk ����������, bitmask Ϊ ��������(�ɵ���),  
										ת����/ʮ����ħ (bitmask=1 �Ƴ��Է�Ϊ�������ħ����)
										ˮ����/��ʹ֮�� (bitmask=1 �Ƴ�����Ϊˮ������)
										����(bitmask=1 �Ƴ���������)
										�����ްԻ�ȭ(bitmask=4 �Ƴ�SP����)
										��ŭ֮ǹ(bitmask=1 �Ƴ�ʹ����Ʒ����, 2�Ƴ�����ж��װ������, 4�Ƴ�ʹ�ü�������, 8�Ƴ�˵������)
										(��������, ����ϵ��������)
				
bonus bSkillNoRequire,bitmask;			�Ƴ���������, bitmask Ϊ ��������(�ɵ���)
bonus2 bSkillNoRequire,sk,bitmask;		�Ƴ����� sk ����������, bitmask Ϊ ��������(�ɵ���),  
										�Ƴ� 'skill_require_db.txt' �м��ܵ�ָ������.
										��������:
											REQ_HPCOST             (0x1)  - HP����
											REQ_SPCOST             (0x2)  - SP����
											REQ_HPRATECOST         (0x4)  - HP����������
											REQ_SPRATECOST         (0x8)  - SP����������
											REQ_MAXHPTRIGGER      (0x10)  - HPҪ��
											REQ_ZENYCOST          (0x20)  - Zeny����
											REQ_WEAPON            (0x40)  - ����Ҫ��
											REQ_AMMO              (0x80)  - �ӵ�/�ӵ���ƷҪ��
											REQ_STATE            (0x100)  - ����Ҫ��  
											REQ_STATUS           (0x200)  - ״̬Ҫ��
											REQ_SPIRITSPHERECOST (0x400)  - ����������
											REQ_ITEMCOST         (0x800)  - ��Ʒ����
											REQ_EQUIPMEN        (0x1000)  - װ��Ҫ��
bonus bSkillNoRequireItem,iid;			�Ƴ����ܶ� iid ����Ʒ����, ������ bSkillItemFix
bonus bNormalNoRequireAmmo;				ƽ�䲻���ļ�ʸ/��ҩ��
										
bonus3 bSkillAttribute,sk,ele,n;		���� sk ��Ϊ ele ����(Ϊ����������Ĺ������Ч���ͻ���, ÿ�����������ʾһ����ů����Ч)
										 sk Ϊ  0 ʱΪ��ͨ����(n Ϊ�Ƿ���ʾ��ů�ķ���Ч)
										 sk Ϊ -1 ʱΪ���м���(n Ϊ�Ƿ���ʾ��ů�ķ���Ч)
										ele Ϊ -1 ʱ��Ϊ���������(n Ϊ�Ƿ���ʾ��ů�ķ���Ч), 
										ele Ϊ -2 ʱ��Ϊ��ӽ�����(n Ϊ�Ƿ���ʾ��ů�ķ���Ч), 
										ele Ϊ -3 ʱ�������Կ���(�˺���������Ϊ n%, ���ȶ����),

bonus bWeaponReturnDefRate,n;			�ܵ����������˺�ʱ, �˺�����ԭ���� n%
bonus bMagicReturnDefRate,n;			�ܵ�ħ�������˺�ʱ, �˺�����ԭ���� n%

bonus3 bStatusAddBonus,sc,bonus,n;		���Լ�ӵ�� sc ״̬��ʱ��, ������ bonus ����Ϊ n 
										��: bonus3 bStatusAddBonus,SC_BLESSING,bStr,20;
										˵��: ��ʹ�͸��������� 20�� STR

bonus4 bStatusAddBonus,sc,bonus,r,n;	���Լ�ӵ�� sc ״̬��ʱ��, ������ bonus ����Ϊ r,n
										��: bonus4 bStatusAddBonus,SC_BLESSING,bSkillHeal,AL_HEAL,100;
										˵��: ��ʹ�͸��������� �������ظ��� 100%
										
bonus5 bStatusAddBonus,sc,bonus,x,r,n;	���Լ�ӵ�� sc ״̬��ʱ��, ������ bonus ����Ϊ x,r,n
										��: bonus5 bStatusAddBonus,SC_BLESSING,bAutoSpell,14,10,100;
										˵��: ��ʹ�͸��������� ��ͨ���� 10% �Զ����������10��

bonus4 bStatusAddDamage,sc,n,r,bf;		���Է�ӵ�� sc ״̬��ʱ��, ʹ�� bf ����ʱ�� r/10% �ĸ����˺����� n
bonus4 bStatusAddDamageRate,sc,n,r,bf;	���Է�ӵ�� sc ״̬��ʱ��, ʹ�� bf ����ʱ�� r/10% �ĸ����˺����� n%

bonus5 bAddStatusVal,sc,val1,val2,val3,val4;	����״̬ʱ, �����ֱ��ۼ� val1, val2, val3, val4
												��: bonus5 bAddStatusVal,SC_BLESSING,10,10,0,0;
												˵��: ������ʹ�͸�״̬ʱ STR DEX INT �ֱ�� 20 ��

//===== BetterRa �ĵ� =======================================
//= BetterRa ��ͼ���˵���ļ�
//===== ����: ================================================
//= BetterRa �����Ŷ�
//===== ������: ============================================
//= 20170122
//===== �ĵ����: ============================================
//= BetterRa �ǻ��� rAthena ���ж��ο�����, �� rAthena �ٷ�֧
//= �ֵĵ�ͼ��ǻ�����, BetterRa Ҳ��չ��һЩ��ͼ���, �����
//= �����˵��, ������ܵ�ͼ��ǵ����ú�ע������.
//============================================================

---------------------------------------

*tribe

�ڵ�ǰ��ͼʹ����Ӫϵͳ

---------------------------------------

*hideguildinfo

���ص�ǰ��ͼ����ҵĹ�����Ϣ(����ͼ�ꡢ�������ơ�ְλ��)

ע��:
- ʹ�� @mapflag ָ����� setmapflag �ű�ָ��ȥ�޸Ĵ˱�ǵĻ�, �ᵼ���Ѿ����ڴ˵�ͼ����ұ�����ˢ��һ��
- �����Ȼ���Կ����Լ��Ĺ���ͼ�ꡢ�������ƺ�ְλ����Ϣ, ֻ�ǿ�����������ɫ�Ĺ�����Ϣ

---------------------------------------

*hidepartyinfo

���ص�ǰ��ͼ����ҵĶ�������(�Լ�Ҳ�ῴ�����Լ��Ķ�������)

---------------------------------------

*mobinfo <ħ�����Ƶ���Ϣ����>

ʹ��ǰ��ͼ��ħ������չ��ָ������Ϣ, ��ѡ���� conf/battle/monster.conf �� show_mob_info ��ѡ��һ��, ��ֻ�Ե�ǰ��ͼ��Ч.

��ѡ����ڹ���໤��ħ��ͻ���������Ч.

����ѡ��
 1: ��ʾħ���Ѫ�� (�� ʣ��Ѫ��/���Ѫ�� ��ʽ��ʾ)
 2: ��ʾħ���Ѫ�� (�� �ٷֱ� ��ʽ��ʾ)
 4: ��ʾħ��ļ��� [BetterRa ��չѡ��]
 8: ��ʾħ��ı�� [BetterRa ��չѡ��]
16: ��ʾħ������� [BetterRa ��չѡ��]
32: ��ʾħ������� [BetterRa ��չѡ��]
64: ��ʾħ������Ժ����Եȼ� [BetterRa ��չѡ��]

ע��:
- ������ѡ��1֮������ħ��Ѫ��̫��, �����¿ͻ����޷�������ʾ��ʣ��Ѫ��/���Ѫ�����Ļ�, ���Զ�ת�ɰ��ٷֱ���ʾѪ��. 
- ��ͬʱ����ѡ��1��2��8��, ���ħ��ı�ż��Ϻ󳬳��Ļ�, ��ô��Ž����ض�, ���ʵ��ĵ���Ҫչʾ������.  

---------------------------------------

*notoken

��ֹ����ڴ˵�ͼ��ʹ�á�ԭ�ظ���֤֮��

---------------------------------------

*nocapture

��ֹ����ڴ˵�ͼ�ϲ�׽����

---------------------------------------

*noautoloot

��ֹ����ڴ˵�ͼ��ʹ���Զ�ʰȡ����

---------------------------------------

*nopet

��ֹ����ڴ˵�ͼ��ʹ�ó���, ��½���˵�ͼ������Զ��䵰�ص���ұ���.

---------------------------------------

*nohomunculus

��ֹ����ڴ˵�ͼ��ʹ��������, ��½���˵�ͼ������ᱻ�Զ���Ϣ.

---------------------------------------

*nomercenary

��ֹ����ڴ˵�ͼ��ʹ��Ӷ��, ��½���˵�ͼӶ���ᱻ�Զ���ɢ.

---------------------------------------

*mobdroprate	<���ʰٷֱ�>

��������˵�ͼ����ͨħ�����Ʒ���䱶��
�������õ� <���ʰٷֱ�> ������Ϊ 100 ���ʾ 1��, ����Ϊ 200 ���ʾ 2 ��, �Դ�����
Ĭ��ֵΪ 100 (��ʾ 1 ��, ���Ե������κζ���ĵ���)

�˵�ͼ����޷��� @mapflag ָ���б���ѯ������
������ͨ��ֱ���ڽű��ж���, ����ʹ�� setmapflag �ű�ָ��Ľ�������
�˵�ͼ������õı���ֵ�����ڵ�ͼ���� @mapinfo ָ����в鿴 (����ʾĿǰ������Ч�ı���)

�����������ͨħ��Ķ���: ��ħ�����ݿ���û��Ϊ������MVP�����ħ��, ��֮Ϊ��ͨħ��

---------------------------------------

*mvpdroprate	<���ʰٷֱ�>

��������˵�ͼ��MVPħ�����Ʒ���䱶��
�������õ� <���ʰٷֱ�> ������Ϊ 100 ���ʾ 1��, ����Ϊ 200 ���ʾ 2 ��, �Դ�����
Ĭ��ֵΪ 100 (��ʾ 1 ��, ���Ե������κζ���ĵ���)

�˵�ͼ����޷��� @mapflag ָ���б���ѯ������
������ͨ��ֱ���ڽű��ж���, ����ʹ�� setmapflag �ű�ָ��Ľ�������
�˵�ͼ������õı���ֵ�����ڵ�ͼ���� @mapinfo ָ����в鿴 (����ʾĿǰ������Ч�ı���)

���������MVPħ��Ķ���: ��ħ�����ݿ���Ϊ������MVP�����ħ��, ��֮ΪMVPħ��

---------------------------------------

*nonormaldrop
*nominibossdrop
*nomvpdrop

��ֹ��Ӧħ�����Ʒ����, ����ֹMVP����ʱ, MVP��������Ҳ�ᱻ��ֹ

---------------------------------------

*nomail

��ֹ����ڴ˵�ͼ��ʹ�����书��(����RODEX)

---------------------------------------

*nocart

��ֹ����ڴ˵�ͼ�����Ƴ�

---------------------------------------

*mobspawnbase	<Ѫ������>,<��������>,<ħ������>,<���б���>

�޸���Ӧ��ͼ������ħ���Ѫ��������������ħ��������������, ��д100����ʾ100% 
��ͨ�� getmapflag �� setmapflag �� removemapflag ��̬ˢ�ָı�ħ������

---------------------------------------

*partylock2	<��ʶ>

������е��κ�����ڱ��иñ�ǵĵ�ͼ��������ֹ���Ķ��飬�����в�������Ҳ��ᱻ����ͼ��
�����Ҫ��ֹ����˳�����Ļ������ڵ�ͼͬ������ nosave ��ǩ���������ͨ�������޸���������ú����µ�½��ʵ�ָ��Ķ���

��ʶ����
  1: ��ֹ�������
  2: ��ֹ�˳�����
  4: ��ֹ���߳�����
  8: ��ֹ����ӳ�
 16: ��ֹ���Ķ�������
 32: ��ֹ�������

---------------------------------------

*noview

��ֹ�ڵ�ͼ����ʾͷ�����������

---------------------------------------

*nosc	<ʵ������>

��ֹ��Ӧ��ʵ���ڴ˵�ͼ�ϻ��״̬, ����˵�ͼʱ���е�״̬�������, ����������

ʵ������:
	  1: ���
	  2: ħ��
	  4: ����
	  8: ������
	 16: Ӷ��
	128: NPC
	512: Ԫ��

---------------------------------------

*noskill2	<ʵ������>

��ֹ��Ӧ��ʵ���ڴ˵�ͼ��ʹ�ü���

ʵ������:
	  1: ���
	  2: ħ��
	  4: ����
	  8: ������
	 16: Ӷ��
	128: NPC
	512: Ԫ��

---------------------------------------

*noattack2	<ʵ������>

��ֹ��Ӧ��ʵ���ڴ˵�ͼ��ʹ����ͨ����

ʵ������:
	  1: ���
	  2: ħ��
	  4: ����
	  8: ������
	 16: Ӷ��
	128: NPC
	512: Ԫ��

---------------------------------------

*nouseitem

��ֹ����ڴ˵�ͼ��ʹ����Ʒ

---------------------------------------

*nobank

��ֹ����ڴ˵�ͼ��ʹ������

---------------------------------------

*notalk	<����ѡ��>

��ֹ����ڴ˵�ͼ��˵��

����ѡ��
	 1: ����
	 2: ����
	 4: ����
	 8: ����
	16: ˽��
	32: ����Ƶ��

---------------------------------------

*noannounce

��ֹ�ڵ�ͼ�Ͻ���ȫ������

---------------------------------------

*mobatkrate	<�����˺���ֱ�>,<��ʾ�˺���ֱ�>

ħ��Ĺ����˺��ᱻ�˱�ǰ���������
�����˺����˺���ʾ����������, ���Ե�������

---------------------------------------

*mobdmgrate	<�������˺���ֱ�>,<��ʾ�˺���ֱ�>

ħ�����ܵ����˺����ᱻ�˱�ǰ���������
�����˺����˺���ʾ����������, ���Ե�������

---------------------------------------

*pcatkrate	<�����˺���ֱ�>,<��ʾ�˺���ֱ�>

��ҵĹ����˺��ᱻ�˱�ǰ���������
�����˺����˺���ʾ����������, ���Ե�������

---------------------------------------
*pcdmgrate	<�������˺���ֱ�>,<��ʾ�˺���ֱ�>

������ܵ����˺����ᱻ�˱�ǰ���������
�����˺����˺���ʾ����������, ���Ե�������

---------------------------------------


*otheratkrate	<�����˺���ֱ�>,<��ʾ�˺���ֱ�>

������Һ�ħ��֮��������λ�Ĺ����˺��ᱻ�˱�ǰ���������
�����˺����˺���ʾ����������, ���Ե�������

---------------------------------------

*otherdmgrate	<�������˺���ֱ�>,<��ʾ�˺���ֱ�>

������Һ�ħ��֮��������λ���˺����ᱻ�˱�ǰ���������
�����˺����˺���ʾ����������, ���Ե�������

---------------------------------------

*mobdmgfix	<�̶��˺�>

ħ�����ܵ��˺�����Ϊ�̶��˺�, �˱�ǲ������˺���ʾ

---------------------------------------

*mobdmgmax	<�˺�ֵ>

ħ���ܵ����˺������˺�ֵʱ�ᱻ�˱������, �˱�ǲ������˺���ʾ

---------------------------------------

*maxdmg_normal	<�˺�ֵ>

���ƴ˵�ͼ�ϵ�λ�����ƽ���˺�

---------------------------------------

*maxdmg_skill	<�˺�ֵ>

���ƴ˵�ͼ�ϵ�λ��������˺�

---------------------------------------

*maxheal	<������>

���ƴ˵�ͼ�ϵ�λ�����������

---------------------------------------

*attackevent	<ʵ������>

����ͼ�д˱��ʱ��ҹ�����Ӧ��ʵ��ʱ, �ᴥ�� OnPCAttackFilter �¼�
ʵ������: 1: ���, 2: ħ��, 4: ����, 8: ������, 16:Ӷ��, 512: Ԫ��(����Ƕ��ʵ�����������ʵ������)

---------------------------------------

*attackedevent	<ʵ������>

����ͼ�д˱��ʱ��ұ���Ӧ��ʵ�幥��ʱ, �ᴥ�� OnPCAttackedFilter �¼�
ʵ������: 1: ���, 2: ħ��, 4: ����, 8: ������, 16:Ӷ��, 512: Ԫ�� (����Ƕ��ʵ�����������ʵ������)

---------------------------------------

*healevent	<ʵ������+��������>

����ͼ�д˱��ʱ��ҶԶ�Ӧʵ��ʹ�����Ƽ���ʱ�ᴥ�� OnPCHealFilter �¼�
ʵ������: 1: ���, 2: ħ��, 4: ����, 8: ������, 16:Ӷ��, 512: Ԫ�� (����Ƕ��ʵ�����������ʵ������), 
��������: 1024:��ʵ��������Ϊ0ʱ������

---------------------------------------

*noslave

����ͼ�д˱��ʱ��ͼ�ϵ�ħ�ﲻ���ٻ�С��

---------------------------------------

*noitemfunc	<��������>

������ؼ�������ʱ��ֹ����һЩ��Ʒ������, ��Ʒ����ֹ��, ���ϵĹ�����������������Ƭ������������Ч
ͨ�����������ֹ��Ӧ������Ʒ��, ��ͨ���� item_flag.txt ���� 128 ���ʹ������Ʒ�������
�����Ʒ����δ����ֹ, ��ͨ���� item_flag.txt ���� 128 ���ʹ������Ʒ����ֹ
ע: ����ǳ��ﵰ�Գ��ﵰID��Ϊ item_flag.txt ����ӦID
ע: ����ǩֻ�� ���� ���� ��ʸ ʱװ��Ӱװ�� ������ ���� ��Ч

��������: 1: ���� 2 ���� 4: ��ʸ 8: ʱװ��Ӱװ�� 16: ������ 32: ���� 64: ��Ƭ

---------------------------------------

*nohealitem

����ͼ�д˱��ʱ��ֹʹ�ûָ������

---------------------------------------

*noequipfunc	<��������>,<��������>

����ͼ�д˱��ʱ��ָֹ������װ������Ӧ������Ч

��������: 1: ͷ�� 2: ���� 4: ����(����/����/�·�/Ь��) 8: ��Ʒ 8: ʱװ(ͷ��) 16: Ӱװ
��������: 1: ������������ 2: װ���ű� 4: ��Ƭ 8: ��װ���� 16: ����

---------------------------------------

*hidedamage
*hidepcdamage
*hidemobdamage

����ͼ�д˱��ʱ, ��ͼ�ϲ���ʾʵ���˺�

---------------------------------------

*inventory_db	<����ID>

������л������д˱�ǵĵ�ͼʱ, �����л�����, Ĭ�ϱ�����<����ID>Ϊ 0
����ID�� conf/inter_server.yml �ж���, type ���ͱ���Ϊ INVENTORY_DB ���������л�

---------------------------------------

*convenio

��ͼ��������������, ����ʹ�ô����̼��Ἴ��

---------------------------------------
//===== BetterRa �ĵ� =======================================
//= BetterRa �ű�ָ��˵���ļ�
//===== ����: ================================================
//= BetterRa �����Ŷ�
//===== ������: ============================================
//= 20161005
//===== �ĵ����: ============================================
//= BetterRa �ǻ��� rAthena ���ж��ο�����, �� rAthena �ٷ�֧
//= �ֵĽű�ָ�������, BetterRa Ҳ��չ��һЩ�ű�ָ��, �����
//= �����˵��, �����ص���ܽű�ָ��Ĳ������÷�.
//============================================================

�ű�����
--------------

- inventory_slots ��ͨ���˱�����ȡ/�޸���ҵı�����������


�ű�ָ�������
--------------

Ϊ�˼���һЩ��������˵Ľű�, ���ֽű�ָ��ӵ�б���, ʹ�ñ�����ʹ��ԭ�����﷨��Ч����һ����.

���������������������������������������������������������������Щ�����������������������������������������������������������
�� ָ��ԭ�� (�Ƽ�ʹ��)          �� ָ��ı���                  ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *itemexists                  �� *existitem                  ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *setrenttime                 �� *resume                     ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *getequipexpiretick          �� *isrental                   ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *gethotkey                   �� *get_hotkey                 ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *sethotkey                   �� *set_hotkey                 ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *recalculatestat             �� *statuscalc �� *status_calc ��
���������������������������������������������������������������੤����������������������������������������������������������
�� *copynpc                     �� *dupnpc                     ��
���������������������������������������������������������������ة�����������������������������������������������������������


�ű�ָ��˵��
------------

*warpparty2 "<Ŀ���ͼ����>",<x>,<y>,<������>,{"<���Եĵ�ͼ����>"};

�÷��� warpparty һ��, ���ǽ�ָ�������ȫ����Աͳһ���͵�ָ����Ŀ�ĵ�. ���ָ�������һ������, ��ôֻ��λ�ڡ����Եĵ�ͼ���ơ��Ķ�Ա�ᱻ����.

����֮�����������: 
	warpparty ���Ѿ������Ķ�������Ч(�����Ķ��ѻᱻ����ԭ��), �� warpparty2 ���Ѿ������Ķ�����Ч(�ᱻ������ 1HP ��Ѫ������, ��һ�𱻴�����).

---------------------------------------

*getheaddir({<��ɫ���>});

��ȡ��ɫ���Դ�����

������:
	0Ϊ��ǰ��
	1Ϊ���ҿ�
	2Ϊ����

����ֵ:
	�Դ�����

---------------------------------------

*getbodydir({<��ɫ���>});

��ȡ��ɫ����ĳ���

������:
	DIR_NORTH �� 
	DIR_NORTHWEST ���� 
	DIR_WEST �� 
	DIR_SOUTHWEST ���� 
	DIR_SOUTH �� 
	DIR_SOUTHEAST ���� 
	DIR_EAST �� 
	DIR_NORTHEAST ����

����ֵ:
	���峯��

---------------------------------------

*setheaddir <������>{,<��ɫ���>};

���ڵ�����ɫ���Դ�����.

������:
	0Ϊ��ǰ��
	1Ϊ���ҿ�
	2Ϊ����

---------------------------------------

*setbodydir <������>{,<��ɫ���>};

���ڵ�����ɫ����ĳ���.

������:
	DIR_NORTH �� 
	DIR_NORTHWEST ���� 
	DIR_WEST �� 
	DIR_SOUTHWEST ���� 
	DIR_SOUTH �� 
	DIR_SOUTHEAST ���� 
	DIR_EAST �� 
	DIR_NORTHEAST ����

---------------------------------------

*party_leave {<��ɫ���>};

������ָ���Ľ�ɫ�����˳�����.

����ֵ:
	��ָ����ɫ�����߻��ڶ�����, �򷵻� 0, �ɹ��򷵻� 1

---------------------------------------

*openbank {<��ɫ���>};

������ָ���Ľ�ɫ���̴����н���(ֻ��ӵ���˺��������еĿͻ��˰汾��Ч).

---------------------------------------

*instance_users <������ʵ�����>;

���ڻ�ȡָ���ĸ���ʵ���еĲ�������.

����ֵ:
	�ɹ�ֱ�ӷ��ظ����е�����, ���������ڻ򸱱������˴����򷵻� 0

---------------------------------------

*mesclear;

��յ�ǰNPC�ĶԻ�������, ����������������ҵ��"Next"��ť�������, ʹ�� mes ָ����ˢ�¶Ի����ڵ�����.

---------------------------------------

*mobremove <ħ���GID>;

����GID�Ƴ�һ��ħ��(ֻ���Ƴ�, ������ħ������), ����������д��������.

---------------------------------------

*getsameipinfo {<"IP��ַ">};

���ĳ��IP���ߵ�������Լ���ҵĽ�ɫ��ŵ���Ϣ.

���ִ�гɹ��Ļ�, �ḳ����������������ҵ���Ϣ:

$@sameip_aid[]		ʹ��ָ��IP���ߵ�����˺ű������(AccountID)
$@sameip_cid[]		ʹ��ָ��IP���ߵ���ҽ�ɫ�������(CharID)
$@sameip_name$[]	ʹ��ָ��IP���ߵ���ҽ�ɫ������

$@sameip_amount Ŀǰʹ��ָ��IP��¼����Ҹ���.

---------------------------------------

*logout <�ǳ����ɱ��>{,"<��ɫ����>"|<�˺ű��>|<��ɫ���>};

ʹָ���Ľ�ɫ���̵ǳ���Ϸ(������), �����"�ǳ����ɱ��"ֻ�����ο�, ��ͬ�����ɱ�Ż��ÿͻ��˸������ʾ��ͬ����ʾ�ı�(�������Ϣ�����Ժ󺺻�):

	0 = BAN_UNFAIR
	1 = server closed -> MsgStringTable[4]
	2 = ID already logged in -> MsgStringTable[5]
	3 = timeout/too much lag -> MsgStringTable[241]
	4 = server full -> MsgStringTable[264]
	5 = underaged -> MsgStringTable[305]
	8 = Server sill recognizes last connection -> MsgStringTable[441]
	9 = too many connections from this ip -> MsgStringTable[529]
	10 = out of available time paid for -> MsgStringTable[530]
	11 = BAN_PAY_SUSPEND
	12 = BAN_PAY_CHANGE
	13 = BAN_PAY_WRONGIP
	14 = BAN_PAY_PNGAMEROOM
	15 = disconnected by a GM -> if( servicetype == taiwan ) MsgStringTable[579]
	16 = BAN_JAPAN_REFUSE1
	17 = BAN_JAPAN_REFUSE2
	18 = BAN_INFORMATION_REMAINED_ANOTHER_ACCOUNT
	100 = BAN_PC_IP_UNFAIR
	101 = BAN_PC_IP_COUNT_ALL
	102 = BAN_PC_IP_COUNT
	103 = BAN_GRAVITY_MEM_AGREE
	104 = BAN_GAME_MEM_AGREE
	105 = BAN_HAN_VALID
	106 = BAN_PC_IP_LIMIT_ACCESS
	107 = BAN_OVER_CHARACTER_LIST
	108 = BAN_IP_BLOCK
	109 = BAN_INVALID_PWD_CNT
	110 = BAN_NOT_ALLOWED_JOBCLASS
	? = disconnected -> MsgStringTable[3]

---------------------------------------

*searcharray <�������>,<Ҫ��ѯ������>;

��ѯ�����е�һ�γ��ִ���ѯ���ݵ��������, ʹ�����������������ݺܷ���(�÷��ȽϷḻ, �Ժ��پ���ϸ˵).

����ֵ:
	���鲻������򷵻� -1, ���򷵻ش��ڵ��� 0 �����

---------------------------------------

*getinventorylist {<��ɫ���>,<����>};
*getcartlist {<��ɫ���>,<����>};
*getstoragelist {<��ɫ���>,<����>};

���ر��������Ƴ����ֿ��嵥��

��ԭ�����ص����������, BetterRa ���������·�������:

	- @inventorylist_idx[] ����λ�����.
	- @inventorylist_uid$[] װ��Ψһ���(�ַ�����������).
	- @inventorylist_favorite[] �Ƿ�����ղ�.
	- @inventorylist_equipswich[] �����л�װ����λ��.

����: ��ÿ�λ�ȡ�嵥�����д����ı�������ֵ, �������ûᵼ�·�������������, 
      �����ӷ�������, ��ͨ�� | ���㷵�ض�������
	  
	- INV_ID           ��ƷID - @inventorylist_id[]
	- INV_AMOUNT       ��Ʒ���� - @inventorylist_amount[]
	- INV_EQUIP        ��װ��λ�� - @inventorylist_equip[]
	- INV_REFINE       �����ȼ� - @inventorylist_refine[]
	- INV_IDENTIFY     �Ƿ���� - @inventorylist_identify[]
	- INV_ATTRIBUTE    ���� - @inventorylist_attribute[]
	- INV_EXPIRE       ����ʱ�� - @inventorylist_expire[]
	- INV_BOUND        �� - @inventorylist_bound[]
	- INV_CARD         ��Ƭ - @inventorylist_card1[] @inventorylist_card2[] @inventorylist_card3[] @inventorylist_card4[]
	- INV_OPTION       ������� - @inventorylist_option_id[] @inventorylist_option_value[] inventorylist_option_parameter[]
	- INV_IDX          λ������ - @inventorylist_idx[]
	- INV_FAVORITE     �Ƿ��ղ� - @inventorylist_favorite[]
	- INV_UID          ��ƷUID - @inventorylist_uid$[] �� @inventorylist_uid[]
	- INV_TRADABLE     �Ƿ�ɽ��� - @inventorylist_tradable[]
	- INV_EQUIPSWITCH  �л�λ�� - @inventorylist_equipswich[]
	- INV_ALL          ��ȡ����(Ĭ��)

��: ��ȡ������Ʒid�������ͱ����е�����
	getinventorylist getcharid(0),INV_ID|INV_AMOUNT|INV_IDX;

ע��:
	����λ�����ÿһ�ε�¼��ÿһ��������Լ��ı�������ɾ��Ʒ(����������: 
	��֡������Ƴ��������������ʹ�õ��ߵȲ���)�����ܻᵼ�±���λ������б仯. 
	������ע����һ����������Ҳ����ܻ�ͣ���������������Ľű���ȥʹ�á�����λ����š�. 
	����, ֻҪ���� getinventorylist ֮��, ������ҿ�϶ȥ���е��ߵ���ɾ, 
	��ô @inventorylist_idx[] �е����ݽ����ٿɿ�.
	
---------------------------------------

*searchinventory "<����>"{,<��ɫID>};
*searchcart "<����>"{,<��ɫID>}};
*searchstorage "<����>"{,<�ֿ�ID>{,<��ɫID>}};
*searchguildstorage "<����>"{,<��ɫID>};

���˲����ұ��������Ƴ����ֿ��е���Ʒ.

��������:
    -        item: ������ƷID
	-         idx: ͨ���������
	-        type: ��Ʒ����
	-    identify: �Ƿ��Ѽ�����Ʒ
	-      refine: ͨ������ֵ����
	-    has_card: ��Ʒ�Ƿ��ж�Ӧ��Ƭ
	-  has_option: ��Ʒ�Ƿ��ж�Ӧ����
	-     no_card: ��Ʒ���ܴ��ڶ�Ӧ��Ƭ
	-   no_option: ��Ʒ�ǲ��ܴ��ڶ�Ӧ����
	-       grade: ��Ʒ������ֵ�Ƕ���
	-  item_equip: ��Ʒװ��λ��
	-       equip: ��Ʒװ�������ϵ�λ��
	- expire_time: ��Ʒ�������г�
	-       bound: ��Ʒ�İ�����
	-    favorite: ��Ʒ�Ƿ��ղ�
	-     subtype: ��Ʒ��������

�߼�����:
	 > ����
	 < С��
	>= ���ڵ���
	<= С�ڵ���
	!= ������

��������:
	- @inventorylist_idx[] ����λ�����
	- @inventorylist_amount[] �����е�����
	- @inventorylist_count ��������ĳ�Ա��
	
��: 
	searchinventory "item:501,502,503";            // �ڱ��������� ��ɫҩˮ����ɫҩˮ����ɫҩˮ
	searchinventory "type:5;has_card:4001";        // �ڱ��������� ���в�����Ƭ�ķ���
	searchinventory "type:4,5;no_card:>0";         // �ڱ��������� û�в��κο�Ƭ�������ͷ���
	searchinventory "type:4,5;has_option:1,2,3";   // �ڱ��������� ����IDΪ1,2,3�����������ͷ���
	searchinventory "bound:!=4";                   // �ڱ��������� ���ǽ�ɫ�󶨵���Ʒ
	searchinventory "bound:0";                     // �ڱ��������� �������󶨵���Ʒ
	searchinventory "expire_time:>86400,<172800";  // �ڱ��������� ��������ʱ��1��~2��֮�����Ʒ
	
ע��: �����ı��в�Ӧ�ô��ڿո��������Ч����
	
����ֵ:
	�����ɹ�������Ʒ�ڱ����е������� (@inventorylist_amount[]�ĺ�)
	���ֿⱻռ�û��Ҳ����ֿ��򷵻� -1

---------------------------------------

*delitembyidx <�������>,<Ҫ�Ƴ�������>;
*delinventory <�������>,<Ҫ�Ƴ�������>;

�Ƴ�ָ���������ָ�������ĵ���. 

����ı���λ����ſ���ͨ�� getinventorylist �ű�ָ��� @inventorylist_idx[] ���������.

����ֵ:
	�����ɹ��򷵻� 1, ʧ�ܻ�û��ô����߿���ɾ�򷵻� 0

---------------------------------------

*countinventory <����λ�����>;

����ָ���������, ��ȡ�õ����ڱ����е�����.

����ֵ:
	ֱ�ӷ�����Ʒ������, ���ı�����ŵ���Ʒ�������򷵻� 0

---------------------------------------

*identifybyidx <����λ�����>;

����ָ���ı������, �Ըõ��߽��м�������.

---------------------------------------

*equipinventory <����λ�����>;

����ָ������λ�õ�װ��.

����ı���λ����ſ���ͨ�� getinventorylist �ű�ָ��� @inventorylist_idx[] ���������.

����ֵ:
	���������ɹ��򷵻� 1, ʧ���򷵻� 0

---------------------------------------

*unequipinventory <����λ�����>;

����ָ������λ�õ�װ��.

����ı���λ����ſ���ͨ�� getinventorylist �ű�ָ��� @inventorylist_idx[] ���������.

����ֵ:
	���������ɹ��򷵻� 1, ʧ���򷵻� 0

---------------------------------------

*getinventoryinfo <����λ�����>,<Ҫ�鿴����Ϣ����>{,<��ɫID>};
*getequipedinfo <װ��λ�ñ��>,<Ҫ�鿴����Ϣ����>{,<��ɫID>};

*getcartinfo <���Ƴ�λ�����>,<Ҫ�鿴����Ϣ����>{,<��ɫID>};
*getstorageinfo <�ֿ�λ�����>,<Ҫ�鿴����Ϣ����>{,<�ֿ�ID>{,<��ɫID>}};
*getguildstorageinfo <�ֿ�λ�����>,<Ҫ�鿴����Ϣ����>{,<��ɫID>};

�鿴���������Ƴ����ֿ⡢����ֿ���Ӧλ�õĵ�����Ϣ.

����ı���λ����ſ���ͨ�� getinventorylist �ű�ָ��� @inventorylist_idx[] ���������.

Ҫ�鿴����Ϣ����:
	0 	- ��Ʒ���
	1 	- �ѵ�����
	2 	- װ���Ĵ���λ��(���Ϊ 0 ���ʾ��û����������, λ����ο� EQP_* ��ͷ�ĳ���)
	3 	- ����ֵ
	4 	- �Ƿ��Ѿ�����(1Ϊ�Ѽ���, 0Ϊδ����)
	5 	- ����(˵������, ��ʵ����������ж���Ʒ�Ƿ���, �����򷵻�1, û���򷵻� 0)
	6 	- ��һ�����۵Ŀ�Ƭ���
	7 	- �ڶ������۵Ŀ�Ƭ���
	8 	- ���������۵Ŀ�Ƭ���
	9 	- ���ĸ����۵Ŀ�Ƭ���
	10	- ����ʱ��(Unixʱ���, 0 ��ʾ��������)
	11	- ������
	12	- װ����Ψһ���(unique_id)
	13	- װ���Ļ�װ����λ��(equipSwitch)
	14	- װ���ĸ�ħ�ȼ�(enchantgrade)
	16  - �Ƿ�����ղ�.

	
	.@uid$ = getinventoryinfo(�������, 11);	
	.@uid = getinventoryinfo(�������, 11);	

��ȡ��Ʒ�� ������Ϣ ��ʽ����:
	������ʽ: getinventoryinfo <����λ�����>,<Random Option���>,<id����>,<value����>,<param����>{,<��ɫID>};
	������ʽ: getequipedinfo <װ��λ�ñ��>,<Random Option���>,<id����>,<value����>,<param����>{,<��ɫID>};
	��ȡ�ɹ�����Ӧ���ݽ����ڴ���ı�����. 
	����ָ��(getcartinfo,getstorageinfo,getguildstorageinfo)�÷�����, getstorageinfo ����֧�ֲֿ�ID, ��ȡĬ�ϲֿ�
	
����ֵ:
	ʧ���򷵻� -1, �ɹ��򷵻�������ѯ����Ϣ��ֵ

---------------------------------------

*putcartbyidx <����λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};
*putstoragebyidx <����λ�����>,<����>{,<�ֿ�ID>{,<�Ƿ񴥷��¼�>{,<��ɫID>}}};
*putguildstoragebyidx <�ֿ�λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};

�������е���Ʒ�������Ƴ����ֿ�򹫻�ֿ� 

�Ƿ񴥷��¼�,Ϊȫ���¼� OnPCStorageAddFilter OnPCCartAddFilter OnPCCartAddFilter, Ĭ�ϴ�����

����ֵ:
	�ɹ����� 1, ʧ�ܷ��� 0

---------------------------------------

*getcartbyidx <���Ƴ�λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};
*getstoragebyidx <�ֿ�λ�����>,<����>{,<�ֿ�ID>{,<�Ƿ񴥷��¼�>{,<��ɫID>}}};
*getguildstoragebyidx <�ֿ�λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};

�����Ƴ����ֿ�򹫻�ֿ����Ʒ�õ�������

����ֵ:
	�ɹ����� 1, ʧ�ܷ��� 0

---------------------------------------

*delinventorybyidx <����λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};
*delcartbyidx <���Ƴ�λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};
*delstoragebyidx <�ֿ�λ�����>,<����>{,<�ֿ�ID>{,<�Ƿ񴥷��¼�>{,<��ɫID>}}};
*delguildstoragebyidx <�ֿ�λ�����>,<����>{,<�Ƿ񴥷��¼�>{,<��ɫID>}};

�����������Ƴ����ֿ�򹫻�ֿ��е���Ʒɾ��

����ֵ:
	�ɹ����� 1, ʧ�ܷ��� 0

---------------------------------------

*viewequip <�Է����˺ű��>{,<�Ƿ�ǿ�Ʋ鿴>};

�鿴ָ���˺����߽�ɫ��װ����Ϣ(����ֻ��Ҫ�ṩ�˺ű��, ���������˺ű���ҵ���Ŀǰ���ߵĽ�ɫ).

�Ƿ�ǿ�Ʋ鿴:
	0	- ����Է���ֹ������Ҳ鿴װ��, ��ô�Ͳ��鿴
	1	- ����Է���ֹ������Ҳ鿴����װ��, Ҳǿ�ƽ��в鿴

����ֵ:
	��ָ����Ŀ�겻�����򷵻� -1, ���鿴�ɹ��򷵻� 1, ���鿴ʧ��(����Է���ֹ�鿴)�򷵻� 0

---------------------------------------

*itemexists <��Ʒ���>;
*itemexists "��Ʒ����";
*existitem <��Ʒ���>;
*existitem "��Ʒ����";

ȷ�Ϸ������� item_db ���Ƿ����ָ����Ʒ, �����������һЩ��Ʒ�����ִ�й���ʱ, ��ʹ�ø�ָ���ж�һ�¿��Է�ֱֹ�� getitem ���� delitem ���µ�ͼ�������ն���ʾ������Ϣ.

����ֵ:
	���������в����ڴ˵����򷵻�0, ����Ʒ�����ҿɵ����򷵻�"����"����Ʒ���, �����ɶѵ��򷵻�"����"����Ʒ���.

---------------------------------------

*setrenttime <װ��λ�ñ��>,<������ʱ������>{,<��ɫ���>};
*resume <װ��λ�ñ��>,<������ʱ������>{,<��ɫ���>};

����/����ָ��λ��װ��������ʱ��(���Ҫ��������ʱ��Ļ�, �ڶ���������ʹ�ø���).

װ��λ�ñ��: ��ָ EQI_* ��ͷ��λ�ó���.

����ֵ:
	���ָ����װ��λ����Ч����û��װ���򷵻� -1, ���� 0 ��ʾ����Ʒ�������޵���(��������), ������ش��� 0 �������ʾ����Ʒ�����޵���(����ֵ��������������ʱ��֮��, ʣ��ʱ�������)	

---------------------------------------

*battleignore <���ر��>{,<��ɫ���>};

��ָ���Ľ�ɫ����Ϊ���ӹ���״̬, ���ⱻ����.

��ͨ�� getpcblock ��ȡ�Ƿ������״̬��, ����: if (getpcblock() & PCBLOCK_IMMUNE) { mes "��ǰΪ���ӹ���״̬"; }

���ر��:
	0 �ر�����(��ɫ�ᱻħ�￴��), 1 ������(��ɫ���ᱻħ�￴��, Ҳ���ᱻ����)

---------------------------------------

*getequipexpiretick <װ��λ�ñ��>{,<��ɫ���>};
*isrental <װ��λ�ñ��>{,<��ɫ���>};

���ָ��λ��װ�������޵���ʣ������.

����ֵ:
	���ָ����װ��λ����Ч����û��װ���򷵻� -1, ���� 0 ��ʾ����Ʒ�������޵���(��������), ������ش��� 0 �������ʾ����Ʒ�����޵���(����ֵ������ʣ��ʱ�������)	

---------------------------------------

*sc_check <״̬���>{,<gid>};

�����ж�ָ����״̬(Buff)�Ƿ����, ��ȡ��״̬����.

������ֵΪ1��ʱ��, ����ͨ�����±�������ȡ״̬�Ĳ���:

@sc_val1		״̬�ĵ�1������(����Ǽ��ܶ�Ӧ��״̬�Ļ�, ��������������Ǽ��ܵȼ�)
@sc_val2		״̬�ĵ�2������
@sc_val3		״̬�ĵ�3������
@sc_val4		״̬�ĵ�4������
@sc_tickleft	״̬��ʣ��ʱ��(��λΪ����)

����ֵ:
	0 ��ʾ�������û����ָ����״̬(Buff), 1 ��ʾ�������ӵ����ָ����״̬(Buff)

---------------------------------------

*when_pcmove_doevent {<��ɫID>};

����ҵĽ�ɫ����һ���ƶ�ʱ, ���� OnPCMoveFilter �¼�.

ע��: ֻ�е� conf/battle/BetterRA.conf �� pc_move_event_trigger_type ѡ��Ϊ 1 ʱ, �ýű�ָ��Ż��м�ֵ.

---------------------------------------

*when_pcdir_doevent <����>,{<��ɫID>};

��Ҵ��� OnPCDirChangeEvent �¼��Ŀ���.���� 1Ϊ���� 0Ϊ�ر� �����¼�

ע��: ֻ�е� conf/battle/BetterRA.conf �� always_pc_dir_event ѡ��Ϊ no ʱ, �ýű�ָ��Ż��м�ֵ.

---------------------------------------

*processhalt;
*halt;

�ڲ���֧�ֵ��¼������ű���ʹ�ú�, �ܹ����¼��ű�����ʱ, �ж�Դ����ĺ����߼�. 
�˹��ܽ����ű�ר����ʹ��, ûŪ�������Ĺ����߼�֮ǰ, ������ʹ��.

���Ļ�:
	�����¼����л��Ƶ�Ӱ��, �������Զ�������Ҫ����, ֻ��Ϊ�˼���һ�� SeAr, �ܲ��þ;������ð�.

��ָ���ض�����»�ʧЧ:
	��ָ���ʹ��������, ��ʹ�� processhalt ֮ǰ���ܳ��� sleep��sleep2��next��close2��menu��
	select��prompt��input��progressbar �Ȼᵼ�½ű���ͣ��ָ��, ���������ж�Ч����ʧЧ.
	
	��Ҫԭ����: �����ִ������Щָ��, ��ô�������Ҫ�ȴ��ͻ��˻������������Ӧ, 
	��һ�����������������˻����̽����¼���Ϊ��ִ�и�һ���䡱, Ȼ�������ȥ�ж��Ƿ���Ҫ�ж�, 
	���������� processhalt д������Щ�ᵼ�½ű���ͣ��ָ�����, 
	�����ڻ�û���ü�ִ�� processhalt ��ʱ�����˾ͻ���Ϊ����Ҫ�ж϶�����.

ʧЧ���ܻ����Ч������:
	������������ʹ���� processhalt ��ִ��˳��, Ҳ��Ӱ�쵽��һ�δ��¼��Ĵ���Ч��,
	��һ�δ������¼�ʱ�����Ƿ�ִ�й� processhalt, ���ᱻ��Ϊ��Ҫ�ж�.

�¼����л��Ƶ�Ӱ��˵��:
	�ٸ�����, ���ǿ�����Ҫʹ�� processhalt ���ض���������ж� OnPCEquipFilter �¼�,
	�Դﵽ��ֹ��Ҵ���װ����Ŀ��. ����ֻ��ô���ǲ����Ƶ�,  ���ض�����¿�����ȫʧЧ.
	
	Ϊ�˱���һ�����ͬʱִ�ж���ű������ĳ�ͻ, rAthena �Ľű�����ʵ����һ�����¼����С�����,
	�˹����ܹ��������ִ��ĳ���ű���ʱ��, ��������������Ҫ���ִ�еĽű�Ԥ�ȴ�ŵ���������,
	�����ִ�����ϸ��ű��ټ�������ִ����һ���ű�������.
	
	�⽫���³���һ�����, �������ں� NPC �Ի��������ȥ����װ���Ļ�, 
	��ô��ʱ OnPCEquipFilter �¼����ᱻ�Ž������ж���������ִ��. 
	���Ľű������޷��� OnPCEquipFilter �¼����� processhalt ����, 
	������ͼ����������Ϊ��Ҵ���װ���������û�б��ж�, �������ɹ�����װ��.

֧�ֵ��¼��Լ����ж�����˵�����: doc\BetterRa_events.txt

---------------------------------------

*script4each "{<�ű�>}",<���Ƿ�Χ>{,<����>...};
*script4each "NPCNAME::EVENT",<���Ƿ�Χ>{,<����>...};
*script4eachmob "{<�ű�>}",<���Ƿ�Χ>{,<����>...};
*script4eachmob "NPCNAME::EVENT",<���Ƿ�Χ>{,<����>...};
*script4eachnpc "{<�ű�>}",<���Ƿ�Χ>{,<����>...};
*script4eachnpc "NPCNAME::EVENT",<���Ƿ�Χ>{,<����>...};

��ָ����Χ����ҡ�ħ�NPCִ����ͬ��һ�νű�����"{<�ű�>}��NPCNAME::EVENT"��ʹ�� $@gid ����ȡ�ͽű���������ҡ�ħ�NPC�� GID. ��Ӫħ��ͬ������ʹ�ñ�ָ��.

ȫ��				  - script4each "{<�ű�>}��NPCNAME::EVENT",0;
ָ����ͼ			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP,"��ͼ��";
ָ������			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP_RANGE,"��ͼ��",��������x,��������y,��Χ;
ָ����ͼ�ϵĶ���	- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP_PARTY,"��ͼ��",������;
ָ����ͼ�ϵĹ���	- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP_GUILD,"��ͼ��",������;
ָ������			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP_AREA,"��ͼ��",����x0,����y0,����x1,����y1;
ָ������			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_PARTY,������;
ָ������			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_GUILD,������;
ָ����ͼ�ϵ���Ӫ	- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP_TRIBE,"��ͼ��",Tribe��Ӫ���;
ָ����Ӫ			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_TRIBE,Tribe��Ӫ���;
ָ����ͼ�ϵ���Ӫ	- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_MAP_BG,"��ͼ��",BG��Ӫ���;
ָ����Ӫ			- script4each "{<�ű�>}��NPCNAME::EVENT",SFE_BG,BG��Ӫ���;

��:
	script4eachmob "{unittalk $@gid,\"123456\";}",1,"prontera";

	�ȼ���
	script4eachmob "NPCNAME::OnTalk",1,"prontera";
	end;
OnTalk:
	unittalk $@gid,"123456";

ע��: 
	���<�ű�>����ʹ�õ������ŵĻ�, ��Ҫ�ڴ����ŵ����ʹ�� \ ������ת��, ����:
	script4each "{ if (BaseLevel >= 10) \{ getitem 501, 10;\} }",0;

����:
	Ŀǰ script4each ��ִ�еĽű���, ��ֹ���ֻᵼ�½ű�������ͣ״̬��ָ��.
	���� sleep��sleep2��next��close2��menu��select��prompt��input��progressbar ��, ���ǵ��ص���ִ����Щָ��ʱ, 
	����Ҫ�ȴ��ͻ���/��ҷ���һ������Ϣ������ѡ����ܼ�������ִ��.

---------------------------------------

*gethotkey <��ݼ�λ�ñ��>{,<Ҫ��ȡ����������>};
*get_hotkey <��ݼ�λ�ñ��>{,<Ҫ��ȡ����������>};

��ȡָ����ݼ�λ�õ���Ϣ, ��ݼ�λ�ñ�ű������ 0 С�ڵ��� MAX_HOTKEYS (���Ǹ�����, �ű��п���ֱ��ʹ��).

Ҫ��ȡ����������:
	0	- ��ȡ��ݼ������� (0 ��ʾ��λ�õĿ�ݼ��Ϸŵ���һ����Ʒ, 1 ��ʾ��λ�õĿ�ݼ��Ϸŵ���һ������)
	1	- ��ȡ���ܱ�Ż���Ʒ�ı��
	2	- ��ȡ�Ǽ��ڿ�ݼ��ϵļ��ܵȼ�

����ֵ:
	����������Ϸ��򷵻� -1, ���򷵻ص�������Ҫ��ȡ����������

---------------------------------------

*sethotkey <��ݼ�λ�ñ��>,<��ݼ�������>,<��Ʒ���/���ܱ��>,<���ܵȼ�>;
*set_hotkey <��ݼ�λ�ñ��>,<��ݼ�������>,<��Ʒ���/���ܱ��>,<���ܵȼ�>;

������ҿ�ݼ��ϵ�����, ��ݼ�λ�ñ�ű������ 0 С�ڵ��� MAX_HOTKEYS (���Ǹ�����, �ű��п���ֱ��ʹ��).

��ݼ�������:
	0	- �����ݼ�λ�������һ����Ʒ (��ʹ�ø�ֵ, ����ĩβ��"���ܵȼ�"����������, ��ֱ�Ӹ�"���ܵȼ�"������ 0 )
	1	- �����ݼ�λ�������һ������

����ֵ:
	���óɹ��򷵻� 1, ����ʧ���򷵻� 0

---------------------------------------

*bonus_script_remove "<Ҫ�Ƴ��Ľű�����>"{,<��ɫ���>};

�Ƴ�ָ���� bonus_script Ч��

---------------------------------------

*setstrategyid <��Ϊ���Ա��>{,<��ɫ���>};

����ָ����ҵ���Ϊ���Ա��, ��� conf/group_strategy.yml �ж���Ĺ�����ʹ��.

��Ϊ���Ա��:
	���� conf/group_strategy.yml �е� ID ��.

����ֵ:
	���óɹ��򷵻� 1, ����ʧ���򷵻� 0

---------------------------------------

*getstrategyid {<��ɫ���>};

���ָ����ҵ���Ϊ���Ա��, ��� conf/group_strategy.yml �ж���Ĺ�����ʹ��.

����ֵ:
	���óɹ��򷵻���Ϊ���Ա��

---------------------------------------

*getstrategyinfo <��Ϊ���Ա��>,<����>{,<��ɫ���>};

���ָ����ҵ�ǰ����Ϊ��������, ��� conf/group_strategy.yml �ж���Ĺ�����ʹ��.

��Ϊ������Ϣ���(�� conf/group_strategy.yml �е��ֶζ�Ӧ):
	0	- ��������ֵ����
	1	- ְҵ����ֵ����
	2	- ��ͨ��Ʒ���䱶��
	3	- װ����Ʒ���䱶��
	4	- ��Ƭ��Ʒ���䱶��
	5	- ��ͨħ����䱶��
	6	- BOSSħ����䱶��
	7	- MVPħ����䱶��
	8	- ͷ��ͷ����۱��
	9	- group_id �ȼ�

����ֵ:
	�ɹ���������Ҫ��ѯ����Ϣ��ֵ

---------------------------------------

*setchartitle <�ƺ�ID>{,<��ɫ���>};

����ָ����ҵĳƺ�ID, ��ָ��ֻ�ڿͻ��˰汾�Ŵ��ڵ��� 20150513 ��ʱ����Ч.

�ƺ�ID:
	����ƺŵ�ID�ڿͻ��˵� data\luafiles514\lua files\datainfo\titletable.lub �л�ȡ. ����: 1000

����ֵ:
	���óɹ��򷵻� 1, ����ʧ���򷵻� 0

---------------------------------------

*getchartitle {<��ɫ���>};

���ָ����ҵĳƺ�ID, ��ָ��ֻ�ڿͻ��˰汾�Ŵ��ڵ��� 20150513 ��ʱ����Ч.

����ֵ:
	���óɹ��򷵻�Ŀ����ҵĳƺ�ID(��Ϊ 0 ���ʾ�����û�гƺ�), ����ʧ���򷵻� -1

---------------------------------------

*query_multidb "��չ���ݿ����������","SQL��ѯ���"{, <�������1>{, <�������2>{, ...}}};

����չ���ݿ�ִ��SQL��ѯ, �÷��� query_sql ����, ֻ�Ƕ���һ��"��չ���ݿ����������"����, ����ָ��Ҫ��������չ���ݿ�.

��չ���ݿ�Ķ���:
	��Ĭ�������, rAthena �ṩ�Ľű�ָ��ֻ�ܲ��������ݿ�(query_sql)����־���ݿ�(query_logsql), �����������Ҫ�������������ݿ�(���� DiscuzX ��̳���ݿ�) ��ʱ��, rAthena �Դ���ָ�������Ϊ����. Ϊ����չ�ű�������, BetterRa �ܹ�������ͨ�� conf/multidb_athena.conf �����ļ���������չ���ݿ�, ��ʹ�� query_multidb ������в���.

����ֵ:
	�� query_sql��query_logsql ����, ���ٷ���

---------------------------------------

*recalculatestat;
*statuscalc;
*status_calc;

��ָ���ԭ�� recalculatestat �� rAthena �Ĺٷ��Դ��ű�ָ��, �ڴ�Ϊ�˼���һЩ�ű�, ������ statuscalc �� status_calc ������������.

---------------------------------------

*getequipidx <װ��λ�ñ��>,{<��ɫ���>};

������ȡ������ָ��λ�õ�װ���ġ�����λ����š�.

ע��: ��װ��λ�ñ�š��� getequipid һ��, �� EQI_* ��ͷ�ĳ���(������ EQP_* ��ͷ�ĳ���).

����ֵ:
	-1	- ��ָ����λ���Ҳ���װ��
	-2	- װ��λ�ñ����Ч
	�������ڵ��� 0 ����ֵ, ���ʾ�ɹ�, ����ֵ��������λ��װ���ġ�����λ����š�.

---------------------------------------

*bounditembyidx <�������>,<������>{,<��ɫID>};
*bounditembypos <װ�����>,<������>{,<��ɫID>};

�� �������/װ����� ָ�����ߵĵ���

������: 
	BOUND_NONE    ����
	BOUND_ACCOUNT �˺Ű�
	BOUND_GUILD   �����
	BOUND_PARTY   �����
	BOUND_CHAR    ��ɫ��
	
---------------------------------------

*setoptionbyidx <�������>,<Random Option ID����>,<Random Option value����>,<Random Option param����>;
*setoptionbypos <װ�����>,<Random Option ID����>,<Random Option value����>,<Random Option param����>;

���� �������/װ����� ָ�����ߵ� Random Option ����.

װ�����: ��ָ EQI_* ��ͷ��λ�ó���.

��ѡ����� picklog ��־�������µ��ߵı仯�ۼ�.

---------------------------------------

*resetoptionbyidx <�������>;
*resetoptionbypos <װ�����>;

��� �������/װ����� ָ����Ʒ�� Random Option ����.

��ѡ����� picklog ��־�������µ��ߵı仯�ۼ�.

����ֵ:
	�����ɹ��򷵻� 1, ʧ���򷵻� 0

---------------------------------------

*getoptionbyidx <�������>;
*getoptionbypos <װ�����>;

��ȡ �������/װ����� ָ�����ߵ� Random Option ���Ե�ֵ.

����ָ���, װ���� Random Option ���Ե�ֵ���������������� @option_id @option_value @option_param

---------------------------------------

*getidxrandomoption(<�������>,<Random Option���>,<Ҫ�޸ĵ���������>{,<��ɫ���>});
*getposrandomoption(<װ�����>,<Random Option���>,<Ҫ�޸ĵ���������>{,<��ɫ���>});

��ȡ �������/װ����� ָ�����ߵ� Random Option ���Ե�ֵ.

װ�����: ��ָ EQI_* ��ͷ��λ�ó���.

Ҫ�޸ĵ���������:
	ROA_ID - ������Ե�ID, Ҫ�� db/re/item_randomopt_db.txt �еĶ�Ӧ
	ROA_VALUE - ������Ե�ֵ
	ROA_PARAM - ������ԵĲ���(�������������ȡ����item_randomopt_db.txt�����ʹ��ROA_PARAM, Ŀǰ�������йٷ���������Զ�û���õ��������)

����ֵ:
	�����ɹ��򷵻ز�ѯ��ֵ, ʧ���򷵻� -1, �����Ϊ�����<����>��Ч��ʧ���򷵻� 0

---------------------------------------

*setidxrandomoption(<�������>,<Random Option���>,<id>,<value>,<param>{,<��ɫ���>});
*setposrandomoption(<װ�����>,<Random Option���>,<id>,<value>,<param>{,<��ɫ���>});

���� �������/װ����� ָ�����ߵ� Random Option ����.

װ�����: ��ָ EQI_* ��ͷ��λ�ó���.

������趨�ĵ���δ������, ��ô���ȸ��߿ͻ��˸õ��߱�ɾ��, 
Ȼ����ɶԵ��ߵ������޸ĺ�, �ٸ��߿ͻ���������һ���µ���, ��ʱ���������и���ʾ.

������趨�ĵ����ѱ�����, ��ô���Ƚ�װ������, Ȼ����߿ͻ��˸õ��߱�ɾ��, 
������ɶԵ��ߵ������޸ĺ�, �ٸ��߿ͻ���������һ���µ���, ���Զ���װ��������.

�õ��ߵı�����Ų�����Ϊ��ָ��Ĳ��������޸�.

��ѡ����� picklog ��־�������µ��ߵı仯�ۼ�.

����ֵ:
	�����ɹ��򷵻� 1, ʧ���򷵻� 0

---------------------------------------

*getiteminfo(<��Ʒ���>,<����>)

��ԭ�����͵Ļ�����, BetterRa ��������������:

ITEMINFO_CANREFINE     - �Ƿ�ɾ���, 1��ʾ���Ծ���, 0��ʾ���ܾ���
ITEMINFO_CANTRADE      - ������������, �����ظ���Ʒ�� item_trade ���ݿ��еڶ��ж����ֵ
ITEMINFO_CALLPET       - �Ƿ�Ϊ���ﲶ׽����, 0��ʾ��, �����򷵻��ܲ����ħ����
ITEMINFO_CALLFUNC      - �Ƿ�����ʹ�ýű��е����� callfunc ָ��, 1��ʾ��, 0��ʾ�� (����ǰ�汾���� -1)
ITEMINFO_ARMORLEVEL    - ��ȡ���ߵȼ�
ITEMINFO_SCRIPT        - ��ȡ��Ʒ�ű�
ITEMINFO_EQUIPSCRIPT   - ��ȡ��Ʒ�����ű�
ITEMINFO_UNEQUIPSCRIPT - ��ȡ��Ʒ���½ű�

---------------------------------------

*setiteminfo(<��Ʒ���>,<����>,<ֵ>)

��ԭ�����͵Ļ�����, BetterRa ��������������:

ITEMINFO_SCRIPT        - ��ȡ��Ʒ�ű�
ITEMINFO_EQUIPSCRIPT   - ��ȡ��Ʒ�����ű�
ITEMINFO_UNEQUIPSCRIPT - ��ȡ��Ʒ���½ű�

---------------------------------------

*duplicate("<���Ƴ�������NPC���ڵ�ͼ����>,<X����>,<Y����>,<������>","duplicate(<��ԴNPC����>)","<���Ƴ�������NPC����>","<��ɫ���>");
*duplicate("<���Ƴ�������NPC���ڵ�ͼ����>,<X����>,<Y����>,<������>%TAB%duplicate(<��ԴNPC����>)%TAB%<���Ƴ�������NPC����>%TAB%<��ɫ���>");
*copynpc("<���Ƴ�������NPC���ڵ�ͼ����>,<X����>,<Y����>,<������>","duplicate(<��ԴNPC����>)","<���Ƴ�������NPC����>","<��ɫ���>");
*copynpc("<���Ƴ�������NPC���ڵ�ͼ����>,<X����>,<Y����>,<������>%TAB%duplicate(<��ԴNPC����>)%TAB%<���Ƴ�������NPC����>%TAB%<��ɫ���>");
*dupnpc("<���Ƴ�������NPC���ڵ�ͼ����>,<X����>,<Y����>,<������>","duplicate(<��ԴNPC����>)","<���Ƴ�������NPC����>","<��ɫ���>");

��һ��ָ����NPC���Ƶ�һ���µ�λ��.
��Ҫ�Ĳ�����4���ַ���, ���ĸ��ַ�����ʹ�� duplicate ���о�̬����ʱ����ĸ��� %TAB% �ָ���������һ����.
�ű�ָ����Խ�NPC���Ƶ�������, ���Ƶ����������ƻ�ı�, ��ʹ�� instance_npcname ���NPC����ʵ����.

����������NPC, �������������һ���µĳ���:

	prontera,146,99,2    script    PVP����Ա::PVPCOPYTEST    917,{
		mes "[PVP����Ա]";
		mes "������������, ���Ժ�����...";
		close;
	}

ͨ�����������ڽű���, ʹ�� duplicate ָ����о�̬����, ��:

	prontera,156,99,2	duplicate(PVPCOPYTEST)	PVP����Ա#1	917

���������ʹ�� copynpc �ű�ָ��, ��������һ�о�̬���ƴ��밴 %TAB% �ָ�Ϊ4���ֶ�, Ȼ�����ַ�����ʽ���ݸ� copynpc �ű�ָ��, ��:

	copynpc "prontera,156,99,2","duplicate(PVPCOPYTEST)","PVP����Ա#1","917";

ͬʱ�˺���֧�ַ��ظ��Ƴ�������NPC��GID, ������ʹ�� unit ϵ��ָ�������в���, ��:
	
	.@gid = copynpc("prontera,156,99,2	duplicate(PVPCOPYTEST)	PVP����Ա#1	917");
	.@gid = copynpc("prontera,156,99,2","duplicate(PVPCOPYTEST)","PVP����Ա#1","917");
	unittalk .@gid, "My GID is : " + .@gid;
	
����ڸ�����ʹ��:

	.@w1 = instance_mapname("1@tower") + ",156,99,2";
	.@w2 = "duplicate(PVPCOPYTEST)";
	.@w3 = "PVP����Ա::123";
	.@w4 = "917";
	
	copynpc .@w1, .@w2, .@w3, .@w4;
	npctalk "���Ǹ����� PVPCOPYTEST ��NPC", instance_npcname("PVPCOPYTEST::123");
	
ע��: 1. NPC�����б������ ::XXX ���ܸ��Ƴɹ�, XXX���Ϊ����
	  2. ���ڸ����и��ƶ����ͬ��NPCʱ, ͨ���޸� ::XXX ������NPC�����ظ�
	  3. ����ͨ�� instance_npcname("��ԴNPC����::XXX"); ��ȡNPC����ʵ����. 
 
	// ������ͬԴ���ɵ�NPC
	copynpc instance_mapname("1@tower") + ",156,100,2", "duplicate(PVPCOPYTEST)", "PVP����Ա::1", "917";
	copynpc instance_mapname("1@tower") + ",156,101,2", "duplicate(PVPCOPYTEST)", "PVP����Ա::2", "917";
	copynpc instance_mapname("1@tower") + ",156,102,2", "duplicate(PVPCOPYTEST)", "PVP����Ա::3", "917";
	copynpc instance_mapname("1@tower") + ",156,103,2", "duplicate(PVPCOPYTEST)", "PVP����Ա::4", "917";
	sleep 3000;
	// �Ƴ���ͬԴ���ɵ�NPC
	unloadcopynpc instance_npcname("PVPCOPYTEST::1");
	unloadcopynpc instance_npcname("PVPCOPYTEST::2");
	unloadcopynpc instance_npcname("PVPCOPYTEST::3");
	unloadcopynpc instance_npcname("PVPCOPYTEST::4");

����ֵ:
	���Ƴɹ�, �򷵻ظ��Ƴ�������NPC��GID, ʧ���򷵻� 0

---------------------------------------

*unloadduplicate "<NPC����>";
*unloadcopynpc "<NPC����>";

ж�ص����Ƶ�NPC, ����ʹ�÷�����鿴ָ�� copynpc

����Ǹ����е�NPC������ instance_npcname ָ���NPC����, Ҳ����ͨ�� strnpcinfo(3) ��ȡNPC����.

---------------------------------------

*getareagid("<��ͼ��>",<��ѯ�ĵ�λ����>,<x0>,<y0>,<x1>,<y1>,<��������>);
*getareagid("<��ͼ��>",<��ѯ�ĵ�λ����>,<��������x>,<��������y>,<�뾶>,<��������>);
*getareagid("<��ͼ��>",<��ѯ�ĵ�λ����>,<��������>);

����ͼ��Ϊ this ʱ, ��ʾΪִ�нű���������ڵĵ�ͼ, ��ʱ�ű�����������.

��ѯ�ĵ�λ����:
	BL_PC		- ��ҵ�λ
	BL_MOB		- ħ�ﵥλ
	BL_PET		- ���ﵥλ
	BL_HOM		- �˹������嵥λ
	BL_MER		- Ӷ����λ
	BL_ITEM		- ��Ʒ��λ (�õ���Ҳ��ʱ�ò���)
	BL_SKILL	- ���ܵ�λ (�õ���Ҳ��ʱ�ò���)
	BL_NPC		- NPC��λ
	BL_CHAT		- �����ҵ�λ (�õ���Ҳ��ʱ�ò���)
	BL_ELEM		- Ԫ�ؾ��鵥λ (�õ���Ҳ��ʱ�ò���)

��������:
	��дһ����ϣ���鵽�� GID �洢��������������ı�����, ���� .@gids
	
	ע��: ��������ı�����, ���Ҫ����ִ�и�ָ���ʱ��, �ű��Ƿ���������, 
	���û�й����Ļ���Ҫʹ�ú�����޹صı�������, ���� $@ ��ͷ�ı���
	
�ٸ�����:
prontera,150,90,4	script	getareagid_test	123,{
	.@result = getareagid("this", BL_NPC, .@gids);
	if (.@result < 0) {
		dispbottom "ִ�� getareagid ʱ�����˴���, ����ֵΪ: " + .@result;
	}
	
	for (.@i = 0; .@i < .@result; .@i++) {
		dispbottom ".@gids[" + .@i + "] = " + .@gids[.@i] + " NPC����Ϊ: " + getunitname(.@gids[.@i]);
	}
}

����ֵ:
	���ش��� 0 ����ֵ: ��ʾ�ҵ��˵�λ, ���ص���ֵΪ�ҵ��ĵ�λ����
	���� -1 : ָ����ͼΪ this ����û�й������
	���� -2 : �����ĵ�ͼ��������Ч��, �Ҳ�����ͼ
	���� -3 : ���ݵĲ�����������, ������3����6������7������
	���� -4 : ������"��������"���Ͳ���, ������һ���ַ�������ֵ����, Ҳ�������ַ�������
	���� -5 : ������"��������"��һ����Ҫ������ҵı�������, ����û�й������ (���� . �� .@ ��ͷ��������������)
	
---------------------------------------

mail_create <��������>,<��Ŀ>,<����>{,<ZENY>}
mail_additem��mail_additem2��mail_additem3��mail_additembound��mail_additembound2��mail_additembound3 ����Ӧ��getitemָ�������ͬ
mail_send {<�ռ���CID �� �ռ�����>} ͨ��CID�����ʼ�ֻ�ܷ��͸��������

�����ʼ�ָ��, ע��mail_create\mail_additem*\mail_send ָ���������ʹ��.�����п�����ɷ����ʼ���Ʒ��������.
���㴴�����ʼ���������Ʒ���ʼ���, ��������ʹ�� mail_send ������Ⱥ��..

---------------------------------------

*sendmail(<�ռ��˽�ɫ���>,"<����������>","<����>","<����>"{,<�����еĽ��>{,<����һ����Ʒ���>,<����һ����Ʒ����>{,<����������Ʒ���>,<����������Ʒ����>{,<����������Ʒ���>,<����������Ʒ����>{,<�����ĵ���Ʒ���>,<�����ĵ���Ʒ����>{,<���������Ʒ���>,<���������Ʒ����>}}}}}});
*sendmail2(<�ռ��˽�ɫ���>,"<����������>","<����>","<����>"{,<�����еĽ��>{,<����һ����Ʒ���>,<����һ����Ʒ����>,<����һ�Ƿ��Ѽ���>,<����һ�ľ���ֵ>,<����һ������>,<����һ�ĵ�һ�ſ�Ƭ>,<����һ�ĵڶ��ſ�Ƭ>,<����һ�ĵ����ſ�Ƭ>,<����һ�ĵ����ſ�Ƭ>{,<����������Ʒ���>,<����������Ʒ����>,<�������Ƿ��Ѽ���>,<�������ľ���ֵ>,<������������>,<�������ĵ�һ�ſ�Ƭ>,<�������ĵڶ��ſ�Ƭ>,<�������ĵ����ſ�Ƭ>,<�������ĵ����ſ�Ƭ>{,<����������Ʒ���>,<����������Ʒ����>,<�������Ƿ��Ѽ���>,<�������ľ���ֵ>,<������������>,<�������ĵ�һ�ſ�Ƭ>,<�������ĵڶ��ſ�Ƭ>,<�������ĵ����ſ�Ƭ>,<�������ĵ����ſ�Ƭ>{,<�����ĵ���Ʒ���>,<�����ĵ���Ʒ����>,<�������Ƿ��Ѽ���>,<�����ĵľ���ֵ>,<�����ĵ�����>,<�����ĵĵ�һ�ſ�Ƭ>,<�����ĵĵڶ��ſ�Ƭ>,<�����ĵĵ����ſ�Ƭ>,<�����ĵĵ����ſ�Ƭ>{,<���������Ʒ���>,<���������Ʒ����>,<�������Ƿ��Ѽ���>,<������ľ���ֵ>,<�����������>,<������ĵ�һ�ſ�Ƭ>,<������ĵڶ��ſ�Ƭ>,<������ĵ����ſ�Ƭ>,<������ĵ����ſ�Ƭ>}}}}}});
*sendmail3(<�ռ��˽�ɫ���>,"<����������>","<����>","<����>"{,<�����еĽ��>{,<����һ����Ʒ���>,<����һ����Ʒ����>,<����һ�Ƿ��Ѽ���>,<����һ�ľ���ֵ>,<����һ������>,<����һ�ĵ�һ�ſ�Ƭ>,<����һ�ĵڶ��ſ�Ƭ>,<����һ�ĵ����ſ�Ƭ>,<����һ�ĵ����ſ�Ƭ>,<����һ��RandomIDArray>,<����һ��RandomValueArray>,<����һ��RandomParamArray>{,<����������Ʒ���>,<����������Ʒ����>,<�������Ƿ��Ѽ���>,<�������ľ���ֵ>,<������������>,<�������ĵ�һ�ſ�Ƭ>,<�������ĵڶ��ſ�Ƭ>,<�������ĵ����ſ�Ƭ>,<�������ĵ����ſ�Ƭ>,<��������RandomIDArray>,<��������RandomValueArray>,<��������RandomParamArray>{,<����������Ʒ���>,<����������Ʒ����>,<�������Ƿ��Ѽ���>,<�������ľ���ֵ>,<������������>,<�������ĵ�һ�ſ�Ƭ>,<�������ĵڶ��ſ�Ƭ>,<�������ĵ����ſ�Ƭ>,<�������ĵ����ſ�Ƭ>,<��������RandomIDArray>,<��������RandomValueArray>,<��������RandomParamArray>{,<�����ĵ���Ʒ���>,<�����ĵ���Ʒ����>,<�������Ƿ��Ѽ���>,<�����ĵľ���ֵ>,<�����ĵ�����>,<�����ĵĵ�һ�ſ�Ƭ>,<�����ĵĵڶ��ſ�Ƭ>,<�����ĵĵ����ſ�Ƭ>,<�����ĵĵ����ſ�Ƭ>,<�����ĵ�RandomIDArray>,<�����ĵ�RandomValueArray>,<�����ĵ�RandomParamArray>{,<���������Ʒ���>,<���������Ʒ����>,<�������Ƿ��Ѽ���>,<������ľ���ֵ>,<�����������>,<������ĵ�һ�ſ�Ƭ>,<������ĵڶ��ſ�Ƭ>,<������ĵ����ſ�Ƭ>,<������ĵ����ſ�Ƭ>,<�������RandomIDArray>,<�������RandomValueArray>,<�������RandomParamArray>}}}}}});

ʹ�ø�ָ��, ���Ը�ָ������ҷ���һ���ʼ�. ������ͬ�汾��ָ����ʵֻ��֧�ֵĲ���������ͬ.

�汾����:
	sendmail 	���Է��ͼ򵥵ĸ���(���κο�Ƭ���߾���ֵ�ĵ���, ҩˮ��)
	sendmail2	���Է��ͱȽϸ��ӵĸ���(���趨��Ƭ������ֵ��)
	sendmail3	���˿�Ƭ�;���ֵ֮��, ������֧�� Random Options (�������)

��ʾ�ű�:
	������һϵ�е�ָ��ʹ�÷���, ���Բο� npc\BetterRa\BetterRa_sendmail.txt ��ʾ�ű�

ע������:
	��һϵ�е�ָ���ȥ�����ж��ռ��˽�ɫ����Ƿ�Ϸ�, ��Ҫ�Լ����ж�.
	���ͻ��˲�֧��RODEX�Ļ�, ��ô����ֻ�е�һ������Ч.

---------------------------------------

getservantgid <����>{,<��ɫ���>};

�����Ӧ���͵ĸ����ߵ�GID.

��ѯ�ĵ�λ����:
	BL_PC		- ��ҵ�λ
	BL_PET		- ���ﵥλ
	BL_HOM		- �˹������嵥λ
	BL_MER		- Ӷ����λ

---------------------------------------

unitremove <GID>,<��Ч���>;

�����Ƴ�ĳ��GIDʵ��, ������ĳ������.
�����Ƴ�:  - ��ҵ�λ
           - ħ�ﵥλ
           - ���ﵥλ
           - �˹������嵥λ
           - Ӷ����λ
           - ��Ʒ��λ (�õ���Ҳ��ʱ�ò���)
           - ���ܵ�λ (�õ���Ҳ��ʱ�ò���)
           - NPC��λ
		   - Ԫ�ؾ��鵥λ (�õ���Ҳ��ʱ�ò���)
		   
��Ч���:  
	0: û����Ч
	1: �ǳ���Ч
	2: ˲����Ч
	3: ������Ч

---------------------------------------

tribe_setteam <��Ӫ���>;
tribe_setteam <GID>,<��Ӫ���>;

������һ�ħ�����Ӫ��. ��ͬ����Ӫ��֮�����г�޵�, Ҳ����˵ ħ���ħ��֮����Դ�, Ĭ����ӪΪ0;
��Ӫϵͳֻ����ӵ��tribe��� mapflag ��ǩ��ʱ�����Ч

---------------------------------------

tribe_getteam {<GID>};

ͨ��GID��ȡĳ��ʵ�����Ӫ���.

---------------------------------------

tribe_mobteam <��Ӫ���>;

����ͨ�� monster, areamonster �ٻ�������ħ�����Ӫ���..������monster��areamonster֮��ʹ��.

����:(�ٻ�������10������Ϊ��Ӫ1)
	monster "prontera",0,0,"Quest Poring",1002,10;
	tribe_mobteam 1;

---------------------------------------

tribe_monster <��Ӫ���>,"<��ͼ����>",<x����>,<y����>,"<ħ������>",<ħ��ID>,"<�¼���ǩ>";

�ٻ�һ�����ﲢ�������л���ħ���ħ��ID. ��ͨ�� playerattached �ж��Ƿ������ɱ����ħ�

�¼����ر���:
	
	ע��: ���¼������������������ʱ���Ŷ�, ��������ҹ���ʱʹ��ȫ�ֱ�������ֵ�ᱻ������ɱ����, 
	����㿪���� disable_mobdead_queue ��������Ǵ��������ֱ��ʹ��ȫ�ֱ���
	
	��������ɱ��, �򷵻�:
		killedgid			��ɱ��ħ���GID
		killedrid			��ɱ��ħ���ħ����(MobID)
		killerrid			ɱ��ħ���ʵ��GID
	
	�����ħ��ɱ��, �򷵻�: 
		$killedgid			��ɱ��ħ���GID
		$killedrid			��ɱ��ħ���ħ����(MobID)
		$killerrid			ɱ��ħ���ʵ��GID

����:

	tribe_monster .@tribe_id,"prontera",100,100,"Food Depot",1910,"Feed Depot#1::OnMyMobDead";
	end;

	set .@monster_gid, tribe_monster(.@tribe_id,"prontera",100,104,"Guardian",1949,"NPCNAME::OnMyMobDead");
	end;

---------------------------------------

unitsteppath <GID>,"<·����>"{,<Ѱ·AI>,{<����>,{<"�¼�����">}}};
unitsteppath <GID>,<·����>{,<Ѱ·AI>,{<����>,{<"�¼�����">}}};

��ħ�������Զ�����·��, �����Զ�����·����, ħ�ｫ�ᰴ��·��������һ��һ���İ���˳������ȥ,ֱ���ߵ��ص�Ϊֹ.

"<·����>"\<·����> Ϊ step_path.txt �еĵ�һ���ֶ�.

Ѱ·AI:
	PH_WALKBACK: �뿪·��<����>��������ϰ�ʱ, ����׷��, �Զ����߷���·��. (Ĭ��)
	PH_WARPBACK: �뿪·��ֱ��ʧȥĿ���, ���ͻ�·����������·��.
	PH_IGNOREWALK: ��Զ��׷��Ŀ��, �����Ŀ���ڹ���(ʰȡ)��Χ��, ��Ȼ�ṥ��(ʰȡ).
	PH_IGNOREALL: ��Զ�����κ���������, һ·�ߵ�·�����.
	PH_ASTARTWALK: �뿪·����, ����A*�㷨����·��, ���ߵ����չ涨��·���յ�.
	PH_ASTARTWALKBACK: �뿪·����, ����A*�㷨���㷵��·��.

<����> Ĭ��Ϊ 25, Ϊ PH_WALKBACK �ṩ���ؾ��룬 ��ħ���뿪·�� <����> ��ʱ��ħ�ﲻ��׷�ٷ���·����
<"�¼�����"> Ϊ·���������Ժ���õ��¼���ħ��·��Ѱ·ʧ��Ҳ��ִ�д�����, �¼���ͨ�� $@steppath_gid ��ô����¼�ħ���GID, $@steppath_fail ���ص����յ�.

---------------------------------------

*bot_login <char_id>;
*bot_login "<�����>";

	��½һ�����ݿ������е��˺�. 
	��½������, �ű���ͣ�ȴ���½��ɺ�, �ű�������ת������½��BOT�˺�
	
����ֵ:
	���� BOT �� AID

---------------------------------------

*bot_adduseskill <����ID>,<���ܵȼ�>{,<ʹ�ü��>{,<���ȼ�>{,<ʹ������>{,<����1>{,<����2>{,<��ɫID>}}}}}};

	���Ӽ��ܵ�ʹ���б�, ����������ʱ, �����˻��Զ��ͷż���.

ʹ�ü��:
	�����ͷź�, ��Ҫ�����ò����ٴ��ͷ�.

���ȼ�:
	���ȼ��ϸߵļ������������������ͷ�.

ʹ������:
	always				������ ( Ĭ��, û�в��� ).
	myhpinrate			���Լ��� HP ���޶���Χ�� ( С�� <����1> ����� <����2> ʱ ).
	myspinrate			���Լ��� HP ���޶���Χ�� ( С�� <����1> ����� <����2> ʱ ).
	mystatuson			���Լ�ӵ��ָ��״̬ʱ ( <����1> Ϊָ����״̬ID ).
	mystatusoff			���Լ�ʧȥָ��״̬ʱ ( <����1> Ϊָ����״̬ID ).
	friendhpinrate		������(�����Լ�)�� HP ���޶���Χ�� ( С�� <����1> ����� <����2> ʱ ).
	friendstatuson		������(�����Լ�)ӵ��ָ��״̬ʱ ( <����1> Ϊָ����״̬ID ).
	friendstatusoff		������(�����Լ�)ʧȥָ��״̬ʱ ( <����1> Ϊָ����״̬ID ).
	attackedgt			�������Լ��ĵ��˳���ָ������ʱ ( <����1> Ϊ�����Լ������� ).
	closedattacked		���������빥��ʱ ( û�в��� ).
	longrangeattacked	����Զ���빥��ʱ ( û�в��� ).
	afterskill			��ʹ��ָ�����ܺ� ( <����1> Ϊָ���ļ���ID ).
	mobincount			�����ӷ�Χ��ħ���������޶���Χ�� ( С�� <����1> ����� <����2> ʱ ).
	itemlessthan		��������ָ����Ʒ������С��ָ����ֵʱ ( ��ƷIDΪ <����1> ����ƷС�� <����2> ��ʱ ).

---------------------------------------

*bot_adduseitem <��ƷID>{,<ʹ����ʱ>{,<���ȼ�>{,<ʹ������>{,<����1>{,<����2>{,<��ɫID>}}}}}};

	������Ʒ��ʹ���б�, ����������ʱ, �����˻��Զ�ʹ����Ʒ.

ʹ�ü��:
	��Ʒʹ�ú�, ��Ҫ�����ò����ٴ�ʹ��.
	
���ȼ�:
	���ȼ��ϸߵ���Ʒ��������������ʹ��.

ʹ������:
	������������� bot_adduseskill ָ��

---------------------------------------

*bot_addevent <"�¼�����">{,<�����ӳ�>{,<���ȼ�>{,<��������>{,<����1>{,<����2>{,<��ɫID>}}}}}};

	�����˴����¼�, ����������ʱ, �����˻��Զ�ʹ����Ʒ.

�������:
	�����ü��һ���¼���������, Ĭ�� 1000 ����.

���ȼ�:
	���ȼ��ϸߵ��¼��������������ȴ���.

��������:
	������������� bot_adduseskill ָ��

---------------------------------------

*bot_addlootitem <��ƷID>{,<ʰȡ���˵�ս��Ʒ>{,<��ɫID>}};

	������Ʒ��ʰȡ�б�, �������ɺ��ʰȡ�����ĵ���, Ĭ��ʰȡ���˵�ս��Ʒ

---------------------------------------

*bot_addattackmob <ħ��ID>{,<���ȼ�>{,<��ɫID>}};

	����ħ�ﵽ�����б�, ��ѡ��ħ��ʱ, ����ѡ�����ȶȸߵ�ħ��
	��ħ���б�����ħ��ʱ, �򲻻ṥ�������б���û�е�ħ��

---------------------------------------

*bot_addmode <ģʽ>{,<����>{,<��ɫID>}};

	���ӻ����˵�ģʽ

ģʽ:
	BOT_IDEA             - ����״̬, ��ͨ�� bot_run �Ƴ���״̬.
	BOT_SKILL_ATK        - ʹ�ü��ܹ���
	BOT_WEAPON_ATK       - ʹ����ͨ����
	BOT_SUPPORT_SELF     - ʹ�ü��ܸ����Լ�
	BOT_SUPPORT_FRIEND   - ʹ�ü��ܸ�������
	BOT_NO_WALK          - ���Զ�Ѱ· (������Ȼ���߹�ȥ����)
	BOT_FOLLOW_WALK      - ����ָ����AID (����Ϊ��������ҵ�AID)
	BOT_RANDOM_WALK      - ��Χ��û�е���ʱ, ʹ�����Ѱ·Ѱ�ҵ���
	BOT_ASTAR_WALK       - ��Χ��û�е���ʱ, ʹ��A*·Ѱ�ҵ��� (���ȼ����� BOT_RANDOM_WALK)
	BOT_IGNORE_TOUCH     - ���Ӵ��͵��NPC�����Ի�
	BOT_IGNORE_SAME_ELE  - ����ͬ���Եĵ��� (����Ϊ����ֵ, ����Ϊ50ʱ, ������������50��ħ�ﲻ��)
	BOT_ALWAYS_MASTER    - ֻ�������˵�����
	BOT_COUNTERATTACK    - �����ڹ��������˵�ʵ����з���
	BOT_OFFLINE          - �������߹һ�ģʽ
	BOT_KILL_PRONTECT    - ��ֹ����������

---------------------------------------

*bot_delmode <ģʽ>{,<��ɫID>};

	�Ƴ������˵�ģʽ

ģʽ: 
	��鿴 bot_addmode ָ��

---------------------------------------

*bot_hasmode <ģʽ>{,<��ɫID>};

	�жϻ������Ƿ�����ص�ģʽ, �ж϶��ģʽ�������

ģʽ: 
	��鿴 bot_addmode ָ��

---------------------------------------

*bot_setdelay <����>,<��С�ӳ�>,<����ӳ�>{,<��ɫID>};

	Ϊ�����˶�����������ӳ�, ���Կ��������������

����:
	BOT_DELAY_LOOT		ʰȡ��Ʒ�ӳ�(Ĭ��: 300ms ~ 800ms)
	BOT_DELAY_CHOOSE	ѡ������ӳ�(Ĭ��: 800ms ~ 1300ms)
	BOT_DELAY_SKILL		ʹ�ü����ӳ�(Ĭ��: 0ms ~ 300ms, ������� 7 ��ȥ������ӳ�)

---------------------------------------

*bot_trade <����>;
*bot_trade <����>,<�������>,<��������>;
*bot_trade <����>,<ZENY����>;

	��BOT�յ���������ʱ, ����ͨ�����ָ�����BOT����

����:
	BOT_ACT_ACCEPT  ͬ�⽻�ײ����뽻�״���
	BOT_ACT_REFUSE  �ܾ�����
	BOT_ACT_ADDITEM �ڽ��״��������ӵ���(�����ڽ��״�����ʹ��, ������Ч��)
	BOT_ACT_ZENY    �ڽ��״���������ZENY(�����ڽ��״�����ʹ��, ������Ч��)
	BOT_ACT_OK      ȷ�Ͻ���
	
ע��: ��ָ����Ҫ��� OnBOTRecvActEvent �ű��¼�һ��ʹ��

---------------------------------------

*bot_party <����>;

	��BOT�յ������������ʱ, ����ͨ�����ָ�����BOT���ܻ�ܾ�����

����:
	BOT_ACT_ACCEPT  ͬ�����
	BOT_ACT_REFUSE  �ܾ�����
	
ע��: ��ָ����Ҫ��� OnBOTRecvActEvent �ű��¼�һ��ʹ��

---------------------------------------

*bot_guild <����>;

	��BOT�յ����빫������ʱ, ����ͨ�����ָ�����BOT���ܻ�ܾ�����
	
����:
	BOT_ACT_ACCEPT  ͬ�����
	BOT_ACT_REFUSE  �ܾ�����
		
ע��: ��ָ����Ҫ��� OnBOTRecvActEvent �ű��¼�һ��ʹ��

---------------------------------------

*bot_reset {<����>{,<��ɫID>}};

	���û����������Ϣ, ������ý�������Ӽ���

����: 
	BOT_REST_SKILL  - ���ü����б�
	BOT_REST_ITEM   - ������Ʒ�б�
	BOT_REST_EVENT  - �����¼��б�
	BOT_REST_LOOT   - ����ʰȡ�б�
	BOT_REST_MOB    - ����ħ���б�
	BOT_REST_MODE   - ���û�����ģʽ, ��������������Ϊ����(BOT_IDEA)״̬
	BOT_REST_ALL    - ������������
	  
---------------------------------------

*is_bot {<��ɫID>};

	�����ж�����Ƿ��ǻ�����
	
ע��:�������ʹ�ó�bot_stop�����ָ��ʱ, �����ᱻ�ж�Ϊ������

����: 0 ʱ��Ҳ���BOT, 1 ʱBOTΪ����(BOT_IDEA)״̬, 2 ʱBOTΪ����״̬

---------------------------------------

*bot_run {<AIģʽ>{,<����ʱ��>{,<��ɫID>}}};

	����������, �����Ƴ������˵�����(BOT_IDEA)״̬, Ч����ͬ�� bot_delmode(BOT_IDEA).

AIģʽ:
	  ��ѡ��� bot_addmode ָ����Ϊ���������ӵ� mode
	  Ĭ��Ϊ 0 ������ bot_addmode ��ָ���� mode

����ʱ��: (����)
	  - 0 ����������ʱ��(Ĭ��)

����: -1 û�л����˵��������
      -2 ��ɫ������
	  -3 ��ɫ���ڹҵ�����ֿ��״̬

����: ��鿴 npc\BetterRa\BetterRa_bot.txt

---------------------------------------

*bot_pause {<��ɫID>};

	��ͣ������, ����Ϊ��������������(BOT_IDEA)״̬, Ч����ͬ�� bot_addmode(BOT_IDEA).

---------------------------------------

*bot_remove {<�Ƿ�ǳ�>{,<��ɫID>}};

	�ͷ�һ��������
	
�Ƿ�ǳ�:
	1 - �ǳ�
	0 - ��������, ���BOTΪ���߹һ�����Ч��
	
---------------------------------------

*is_offline {<��ɫID>};

	�����ж�����Ƿ���ͨ��offlineָ�����ߵ����

---------------------------------------

*openchat "<����>"{,<��������>{,"<����>"{,<��ɫID>}}};

����һ�����촰��

---------------------------------------

*openvending "<�̵�����>"{,<��ƷID>,<��Ʒ����>,<��Ʒ�ۼ�>{,<��ƷID>,<��Ʒ����>,<��Ʒ�ۼ�>...{,<��ɫID>}}};
*openvendingbyidx "<�̵�����>"{,<��Ʒ�����Ƴ��е����>,<��Ʒ����>,<��Ʒ�ۼ�>{,<��Ʒ�����Ƴ��е����>,<��Ʒ����>,<��Ʒ�ۼ�>...{,<��ɫID>}}};

����һ�������̵�, ���Ƴ��б�������Щ��Ʒ.
��Ʒ�����Ƴ��е���ſ�ͨ�� getcartlist ��ȡ.
������Ĭ�ϻ���Ϊ Zeny ���ʹ������������ʹ�� setpccurrency ָ�����û���

---------------------------------------

*openbuying "<�̵�����>"{,<��ƷID>,<��Ʒ����>,<��Ʒ�ۼ�>{,<��ƷID>,<��Ʒ����>,<��Ʒ�ۼ�>...{,<��ɫID>}}}

����һ���ɹ��̵�, ���ֻ��ͬʱ�ɹ� 3 ����Ʒ.
������Ĭ�ϻ���Ϊ Zeny ���ʹ������������ʹ�� setpccurrency ָ�����û���
	
---------------------------------------

*closechat {<��ɫID>};

�رս�ɫ���촰��

---------------------------------------

*closevending {<��ɫID>};

�رս�ɫ�����̵�.

---------------------------------------

*closebuying {<��ɫID>};

�رս�ɫ�ɹ��̵�.

---------------------------------------

*setpccurrency <��ƷID>{,<��ɫID>};

��������ڲɹ��̵���̯ʱ��ʹ�õĻ��ҵ���ƷID

����ֵ:
	���ú���һ��ҵ���ƷID, ʧ�ܷ��� 0
	
��:
	.@text$ = "[cash] "+gettime(DT_MONTH)+"."+gettime(DT_DAYOFMONTH)+" - ����";
	openvending(.@text$ ,501,11,11  ,502,11,11 ,503,11,11 ,getcharid(0));
	setpccurrency 30001;
	
---------------------------------------

*getpccurrency({<��ɫID>});

��ȡ����ڲɹ��̵���̯ʱ��ʹ�õĻ��ҵ���ƷID

����ֵ:
	��һ��ҵ���ƷID

---------------------------------------

*http_get "<URL>"{,<��ʱʱ��(��)>{,<��ȡ���Ƿ���NPC�ļ�����>}};

����GETָ��. ָ��ֱ�ӷ�������, ע�Ȿָ�֧��HTTPS����..

<��ȡ���Ƿ���NPC�ļ�����> 0Ϊ��, 1Ϊ��, ���صĽű�����Ϊ�����ϵļ��ܽű�

����:
	dispbottom "" + http_get("http://betterra.cn/assets/demo.txt");

---------------------------------------

*callshop "<�̵�����>",<����>,"<�����ı�>";
*callshop "<�̵�����>",<����>,<�����������>;

����Ϊ10ʱ, Ϊ����NPC���۵ķ����˵�, �˵�����ʹ�ù����ı�.

�����ı��÷���鿴 searchinventory �ű�ָ��.

����:
	callshop "shoptest",10,"item:501,502,503";            // ���������˵�, ��ɫҩˮ����ɫҩˮ����ɫҩˮ
	callshop "shoptest",10,"type:5;has_card:4001";        // ���������˵�, ���в�����Ƭ�ķ���
	callshop "shoptest",10,"type:4,5;no_card:>0";         // ���������˵�, û�в��κο�Ƭ�������ͷ���
	callshop "shoptest",10,"type:4,5;has_option:1,2,3";   // ���������˵�, ����IDΪ1,2,3�����������ͷ���
	callshop "shoptest",10,"bound:!=4";                   // ���������˵�, ���ǽ�ɫ�󶨵���Ʒ
	callshop "shoptest",10,"bound:0";                     // ���������˵�, �������󶨵���Ʒ
	callshop "shoptest",10,"expire_time:>86400,<172800";  // ���������˵�, ��������ʱ��1��~2��֮�����Ʒ

����:
	deletearray @inventorylist_idx;
	searchinventory "item:501,502,503";
	callshop "shoptest",10,@inventorylist_idx;
	��ͬ��:
	callshop "shoptest",10,"item:501,502,503";

---------------------------------------

*unit_Astar_walkto <GID>,<x����>,<y����>{,<�Զ��ͷ�>{,<Ѱ·AI>,{<����>,{<"�¼�����">}}}};

ȫͼѰ·����ҡ�ħ���NPC����������ͼ�ϵ�����һ�㡣
<�Զ��ͷ�> Ĭ��Ϊ1�������Ҫ����ε��ÿ��Խ��Զ��ͷ�����Ϊ 0�� ����һֱ����·��ϵͳ�С�

Ѱ·AI:
	PH_WALKBACK: �뿪·��<����>��������ϰ�ʱ, ����׷��, �Զ����߷���·��. (Ĭ��)
	PH_WARPBACK: �뿪·��ֱ��ʧȥĿ���, ���ͻ�·����������·��.
	PH_IGNOREWALK: ��Զ��׷��Ŀ��, �����Ŀ���ڹ���(ʰȡ)��Χ��, ��Ȼ�ṥ��(ʰȡ).
	PH_IGNOREALL: ��Զ�����κ���������, һ·�ߵ�·�����.
	PH_ASTARTWALK: �뿪·����, ����A*�㷨����·��, ���ߵ����չ涨��·���յ�).
	PH_ASTARTWALKBACK: �뿪·����, ����A*�㷨���㷵��·��.

<����> 
	Ĭ��Ϊ 25, Ϊ PH_WALKBACK �ṩ���ؾ��룬��ħ���뿪·�� <����> ��ʱ��ħ�ﲻ��׷�پ������򷵻�·����
	
<"�¼�����"> 
	Ϊ·���������Ժ���õ��¼���ħ��·��Ѱ·ʧ��Ҳ��ִ�д����
	��ͨ�� $@steppath_gid ��ô����¼�ħ���GID
	��ͨ�� $@steppath_fail ��ñ���Ѱ·�Ƿ�ɹ�
	
����ֵ:
	ʧ�ܷ��� 0, �ɹ����� 1
	
---------------------------------------

*unit_cross_map_walkto <GID>,"<��ͼ��>",<x����>,<y����>{,<Ѱ·AI>,{<����>,{<"�¼�����">}}};

��Խ��ͼ��ȫͼѰ·����ҡ�ħ���NPC��ͨ�����͵�����ָ����ͼ�ϵ�����һ�㡣
<�Զ��ͷ�> Ĭ��Ϊ1�������Ҫ����ε��ÿ��Խ��Զ��ͷ�����Ϊ 0�� ����һֱ����·��ϵͳ�С�

Ѱ·AI:
	PH_WALKBACK: �뿪·��<����>��������ϰ�ʱ, ����׷��, �Զ����߷���·��. (Ĭ��)
	PH_WARPBACK: �뿪·��ֱ��ʧȥĿ���, ���ͻ�·����������·��.
	PH_IGNOREWALK: ��Զ��׷��Ŀ��, �����Ŀ���ڹ���(ʰȡ)��Χ��, ��Ȼ�ṥ��(ʰȡ).
	PH_IGNOREALL: ��Զ�����κ���������, һ·�ߵ�·�����.
	PH_ASTARTWALK: �뿪·����, ����A*�㷨����·��, ���ߵ����չ涨��·���յ�.
	PH_ASTARTWALKBACK: �뿪·����, ����A*�㷨���㷵��·��.

<����> 
	Ĭ��Ϊ 25, Ϊ PH_WALKBACK �ṩ���ؾ��룬��ħ���뿪·�� <����> ��ʱ��ħ�ﲻ��׷�پ������򷵻�·����
	
<"�¼�����"> 
	Ϊ·���������Ժ���õ��¼���ħ��·��Ѱ·ʧ��Ҳ��ִ�д����
	��ͨ�� $@steppath_gid ��ô����¼�ħ���GID
	��ͨ�� $@steppath_fail ��ñ���Ѱ·�Ƿ�ɹ�
	
����ֵ:
	ʧ�ܷ��� 0, �ɹ����� 1

---------------------------------------

*mobstaypos <GID>,<x����>,<y����>{,<׷�پ���>};

��ħ��̶���һ�㣬���̶���ħ��ֻ�����������Χ���
<׷�پ���> ��Ŀ�����׷�پ���ʱ�򷵻�, ׷�پ������Ϊ 25��
��x�����y����Ϊħ������, ׷�پ���Ϊ 0 ʱ����̶���

����ֵ:
	ʧ�ܷ��� 0, �ɹ����� 1

---------------------------------------

*instance_name {<����ID>};

��ȡ�����ӵ�еĸ��������֡�����ID ͨ�� instance_id ָ���ȡ��

---------------------------------------

*energyshield <GID>,<����Ѫ��>{,<����ʱ��>{,<����>{,<��ЧID>}}};

����һ�����ֵܵ�һ��Ѫ�����˺�, ����û�н���ǰ�����ܵ��˺�
����û�г���ʱ����һֱ����, ÿ����ɫ������50��ħ������

����ʱ��: ����ָ��ʱ���, �����Զ���ʧ
	
����: ֻ����ָ��������˺�

	RC_Angel		��ʹϵ
	RC_Brute		����ϵ
	RC_DemiHuman	����ϵ
	RC_Demon		��ħϵ
	RC_Dragon		��ϵ
	RC_Fish			�㱴ϵ
	RC_Formless		����ϵ
	RC_Insect		����ϵ
	RC_Plant		ֲ��ϵ
	RC_Player		���
	RC_Undead		����ϵ
	RC_All			��������
	
��ЧID: ����ʹ�� effect_db.yml �е�ID, Ĭ��Ϊ 346

---------------------------------------

*getbonus <����>,<���������>{,<���������>{,<���������>{,<���������>{,<���������>}}}};
*getcharbonus <����>,<���������>,<��ɫID>;
*getcharbonus <����>,<���������>,<���������>,<��ɫID>;
*getcharbonus <����>,<���������>,<���������>,<���������>,<��ɫID>;
*getcharbonus <����>,<���������>,<���������>,<���������>,<���������>,<��ɫID>;
*getcharbonus <����>,<���������>,<���������>,<���������>,<���������>,<���������>,<��ɫID>;

������ȡ bonus �Ĳ�������������д����ʱ���ȡ��Ӧλ���ϵĲ�����

ע: 
	getcharbonus �÷���getbonus��ͬ, ֻ�����һ������Ϊ��ҵĽ�ɫID, ������ȡָ����ҵ� bonus ����
	�� bf ����Ϊ -1 ʱ ����� bf����, ��ȡ�Ľ��Ϊ������������֮��
	
����

	getbonus bAddEle,Ele_Dark,.@val;
	dispbottom "������� Ele_Dark ���� "+.@val+" ���˺�";
	getbonus bAddEle,Ele_Dark,.@val,BF_SHORT;	
	dispbottom "��������������ʱ, ������� Ele_Dark ���� "+.@val+" ���˺�";
	
	
֧�ֵ� Bonus �б�:
	bonus2 bAddEle,e,x;
	bonus3 bAddEle,e,x,bf;
	bonus2 bMagicAddEle,e,x;
	bonus2 bSubEle,e,x;
	bonus3 bSubEle,e,x,bf;
	bonus2 bSubDefEle,e,x;
	
	bonus2 bAddRace,r,x;
	bonus2 bMagicAddRace,r,x;
	bonus2 bSubRace,r,x;
	bonus3 bSubRace,r,x,bf;
	
	bonus2 bAddClass,c,x;
	bonus2 bMagicAddClass,c,x;
	bonus2 bSubClass,c,x;
	
	bonus2 bAddSize,s,x;
	bonus2 bMagicAddSize,s,x;
	bonus2 bSubSize,s,x;
	bonus2 bWeaponSubSize,s,x;
	bonus2 bMagicSubSize,s,x;
	
	bonus2 bAddDamageClass,mid,x;
	bonus2 bAddMagicDamageClass,mid,x;
	bonus2 bAddDefMonster,mid,x;
	bonus2 bAddMDefMonster,mid,x;
	
	bonus2 bAddRace2,mr,x;
	bonus2 bSubRace2,mr,x;
	bonus2 bMagicAddRace2,mr,x;
	
	bonus2 bSubSkill,sk,n;
	
	bonus2 bResEff,eff,n;
	
	bonus bCastrate,n;
	bonus2 bCastrate,sk,n;
	bonus bFixedCastrate,n;
	bonus2 bFixedCastrate,sk,n;
	bonus2 bSkillCooldown,sk,t;
	
	bonus bWeaponAtkRate,n;
	bonus bWeaponMatkRate,n;
	
	bonus3 bFinalAddRace,r,x,bf;
	bonus3 bFinalAddClass,c,x,bf;
	bonus3 bFinalAddRaceDamage,r,n,bf;
	bonus3 bFinalAddClassDamage,c,n,bf;
	
	bonus2 bAddDamage,bf,n;
	bonus2 bAddDamagerate,bf,n;
	
	bonus2 bIgnoreDefRaceRate,r,n;
	bonus2 bIgnoreMdefRaceRate,r,n;
	bonus2 bIgnoreDefClassRate,c,n;	
	bonus2 bIgnoreMdefClassRate,c,n;
	
	bonus2 bMagicAtkEle,e,x;

	bonus bMaxHPrate,n;
	bonus bMaxSPrate,n;
	bonus bMaxAPrate,n;
	bonus bUseSPrate,n;
	bonus bSpeedRate,n;
	bonus bSpeedAddRate,n;
	bonus bAspdRate,n;
	bonus bHPrecovRate,n;
	bonus bSPrecovRate,n;
	bonus bNearAtkDef,n;
	bonus bLongAtkDef,n;
	bonus bDoubleRate,n;
	bonus bDoubleAddRate,n;
	bonus bMatkRate,n;
	bonus bAtkRate,n;
	bonus bMagicAtkDef,n;
	bonus bMiscAtkDef,n;
	bonus bPerfectHitRate,n;
	bonus bPerfectHitAddRate,n;
	bonus bCriticalRate,n;
	bonus bHitRate,n;
	bonus bFleeRate,n;
	bonus bFlee2Rate,n;
	bonus bDefRate,n;
	bonus bDef2Rate,n;
	bonus bMdefRate,n;
	bonus bMdef2Rate,n;
	bonus bPAtkRate,n;
	bonus bSMatkRate,n;
	bonus bResRate,n;
	bonus bMResRate,n;
	bonus bHPlusRate,n;
	bonus bCRateRate,n;
	bonus bRestartFullRecover,n;
	bonus bNoCastCancel,n;
	bonus bNoCastCancel2,n;
	bonus bNoSizeFix,n;
	bonus bNoMagicDamage,n;
	bonus bNoWeaponDamage,n;
	bonus bNoMiscDamage,n;
	bonus bNoGemStone,n;
	bonus bIntravision,n;
	bonus bNoKnockback,n;
	bonus bNoMadoFuel,n;
	bonus bNoWalkDelay,n;
	bonus bSplashRange,n;
	bonus bSplashAddRange,n;
	bonus bShortWeaponDamageReturn,n;
	bonus bLongWeaponDamageReturn,n;
	bonus bMagicDamageReturn,n;
	bonus bReduceDamageReturn,n;
	bonus bPerfectHide,n;
	bonus bUnbreakable,n;
	bonus bUnbreakableGarment,n;
	bonus bUnbreakableWeapon,n;
	bonus bUnbreakableArmor,n;
	bonus bUnbreakableHelm,n;
	bonus bUnbreakableShield,n;
	bonus bUnbreakableShoes,n;
	bonus bClassChange,n;
	bonus bShortAtkRate,n;
	bonus bLongAtkRate,n;
	bonus bBreakWeaponRate,n;
	bonus bBreakArmorRate,n;
	bonus bAddStealRate,n;
	bonus bDelayrate,n;
	bonus bCritAtkRate,n;
	bonus bUnstripable,n;
	bonus bUnstripableWeapon,n;
	bonus bUnstripableArmor,n;
	bonus bUnstripableHelm,n;
	bonus bUnstripableShield,n;
	bonus bSPGainValue,n;
	bonus bHPGainValue,n;
	bonus bLongSPGainValue,n;
	bonus bLongHPGainValue,n;
	bonus bMagicSPGainValue,n;
	bonus bMagicHPGainValue,n;
	bonus bHealPower,n;
	bonus bHealPower2,n;
	bonus bAddItemHealRate,n;
	bonus bMatk,n;
	bonus bFixedCastAddRate,n;
	bonus bFixedCast,n;
	bonus bVariableCast,n;
	bonus bVariableCastrate,n;
	bonus bCritDefRate,n;
	bonus bAddItemSPHealRate,n;
	bonus bIgnoreWhiteImprison,n;
	bonus bCooldownrate,n;
	bonus bMaxASPD,n;
	bonus bWeaponAddDamage,n;
	bonus bMagicAddDamage,n;
	bonus bMiscAddDamage,n;
	bonus bAddMastery,n;
	bonus bAddCartMaxWeight,n;
	bonus bAddWeight,n;
	bonus bDefSize,n;
	bonus bDefRace,n;
	bonus bDefEleLevel,n;

---------------------------------------

*bonus_minfix <����>,<���������>{,<���������>{,<���������>{,<���������>{,<���������>}}}},<��Сֵ>;
*bonus_maxfix <����>,<���������>{,<���������>{,<���������>{,<���������>{,<���������>}}}},<���ֵ>;

��ָ������� OnPCStatCalcEvent �¼���������������Ӧ��bonus��ֵ��

��:
	bonus_maxfix bAddEle,Ele_Dark,.@val,BF_SHORT,80; // �����빥��ʱ�İ������������ܴ���80%, .@val ��ȡ���յ�ֵ
	bonus_minfix bAddEle,Ele_Dark,.@val,10; // ��������������С��10%, .@val ��ȡ���յ�ֵ
	
֧�ֵ� Bonus �б�ͬ getbonus.

---------------------------------------

*bonus_ratefix <����>,<���ֵ>{,<��ɫID>};

��ָ������� OnPCStatCalcEvent �¼���������������Ӧ��bonus��ֵ
�� bonus_maxfix �� bonus_minfix ��ͬ�����������ṩ��������, �����ṩ�����µ��������ݽ���������

����
	bonus_ratefix bAddEle,50; // bAddEle �����������ܴ���50%
	
��ͬ��:
	bonus_maxfix bAddEle,Ele_Dark,50;
	bonus_maxfix bAddEle,Ele_Earth,50;
	bonus_maxfix bAddEle,Ele_Fire,50;
	bonus_maxfix bAddEle,Ele_Ghost,50;
	bonus_maxfix bAddEle,Ele_Holy,50;
	bonus_maxfix bAddEle,Ele_Neutral,50;
	bonus_maxfix bAddEle,Ele_Poison,50;
	bonus_maxfix bAddEle,Ele_Undead,50;
	bonus_maxfix bAddEle,Ele_Water,50;
	bonus_maxfix bAddEle,Ele_Wind,50;
	bonus_maxfix bAddEle,Ele_All,50;
	
֧�ֵ� Bonus �б�:

	bonus2 bAddEle,e,x;
	bonus3 bAddEle,e,x,bf;
	bonus2 bMagicAddEle,e,x;
	bonus2 bSubEle,e,x;
	bonus3 bSubEle,e,x,bf;
	bonus2 bSubDefEle,e,x;
	
	bonus2 bAddRace,r,x;
	bonus2 bMagicAddRace,r,x;
	bonus2 bSubRace,r,x;
	bonus3 bSubRace,r,x,bf;

	bonus2 bAddClass,c,x;
	bonus2 bMagicAddClass,c,x;
	bonus2 bSubClass,c,x;
	
	bonus2 bAddSize,s,x;
	bonus2 bMagicAddSize,s,x;
	bonus2 bSubSize,s,x;
	bonus2 bWeaponSubSize,s,x;
	bonus2 bMagicSubSize,s,x;
	
	bonus2 bAddRace2,mr,x;
	bonus2 bSubRace2,mr,x;
	bonus2 bMagicAddRace2,mr,x;
	
	bonus2 bAddDamageClass,mid,x;
	bonus2 bAddMagicDamageClass,mid,x;
	
	bonus2 bAddDefMonster,mid,x;
	bonus2 bAddMDefMonster,mid,x;
	
	bonus2 bResEff,eff,n;
	
	bonus2 bSubSkill,sk,n;
	bonus2 bCastrate,sk,n;
	bonus2 bVariableCastrate,sk,n;
	bonus2 bFixedCastrate,sk,n;
	bonus2 bSkillCooldown,sk,t;
	
---------------------------------------

*getrateidx <��������>;
*getrateidx <����>{,<����>{,<����>....}};

�����ṩ�ĸ��ʷ��ظø���ֵ�������е�λ�ã�������ֵԽ��ѡ�еĸ���Խ��

����
	setarray .@item[0],501,502,503;
	setarray .@rate[0],1000,20,10;
	getitem .@item[getrateidx(.@rate)],1;
	
	// �� 1000/(1000+20+10) �ĸ��ʻ�ú�ɫҩˮ(501)
	// �� 20/(1000+20+10) �ĸ��ʻ�ó�ɫҩˮ(502)
	// �� 10/(1000+20+10) �ĸ��ʻ�û�ɫҩˮ(503)
	
---------------------------------------

*readstatus <����>;

��ȡ���Ե�������

����: 
	bStr:  ��ȡ�����ӵ�е� STR ����ֵ
	bAgi:  ��ȡ�����ӵ�е� AGI ����ֵ
	bVit:  ��ȡ�����ӵ�е� VIT ����ֵ
	bInt:  ��ȡ�����ӵ�е� INT ����ֵ
	bDex:  ��ȡ�����ӵ�е� DEX ����ֵ
	bLuk:  ��ȡ�����ӵ�е� LUK ����ֵ
	bPow:  ��ȡ�����ӵ�е� POW ����ֵ
	bSta:  ��ȡ�����ӵ�е� STA ����ֵ
	bWis:  ��ȡ�����ӵ�е� WIS ����ֵ
	bSpl:  ��ȡ�����ӵ�е� SPL ����ֵ
	bCon:  ��ȡ�����ӵ�е� CON ����ֵ
	bCrt:  ��ȡ�����ӵ�е� CRT ����ֵ
	
---------------------------------------

*getareamember <�Ŷ�����>,{<��Χ>{,<��ɫID>}};

��ȡָ�����ͬ����Χ��ͬ��ӡ����ᡢս����Ա������AID

���ͣ�
	PARTY_AREA:  ��Χ�ڵĶ����Ա
	GUILD_AREA:  ��Χ�ڵĹ����Ա
	BG_AREA:     ��Χ�ڵ�ս����Ա

����ֵ:
	��Ա������

���ر���:
	@member_aid �����ԱAID

---------------------------------------

*getmapmember <�Ŷ�����>,"<��ͼ��>",<�Ŷ�ID>;

��ȡ��ͼ��ָ����ӡ����ᡢս����Ա������AID

���ͣ�
	PARTY_AREA:  ��Χ�ڵĶ����Ա
	GUILD_AREA:  ��Χ�ڵĹ����Ա
	BG_AREA:     ��Χ�ڵ�ս����Ա

����ֵ:
	��Ա������

���ر���:
	$@member_aid �����ԱAID
	
---------------------------------------

*addatkevent <��������>,<����>,<����>,"<�¼�>",<����ʱ����>{,<��ɫID>};

���ӹ����¼�, �ﵽ�����������¼�������, �¼������Զ�����..

��������:
��������Χ:
	BF_SHORT:  �����빥��
	BF_LONG:   Զ���빥��
	Ĭ��:   BF_SHORT+BF_LONG
����������:
	BF_WEAPON: ��������
	BF_MAGIC:  ħ������
	BF_MISC:   ��Ϲ���
	Ĭ��:   BF_WEAPON
����������:
	BF_NORMAL: ��ͨ����
	BF_SKILL:  ���ܹ���
	Ĭ��:   ������������� BF_WEAPON (only) BF_NORMAL, ���� BF_SKILL+BF_NORMAL.

����: Ϊǧ����, �����¼��ĸ���
����: �����򵽴����󴥷��¼�
����ʱ����: ÿ�δ���ʱ�������ٺ����Ժ�ſ��Դ�����һ��

ע��!! ������ʺʹ���ͬʱ����д, ��ô�����������붼����Żᴥ��...
�¼�: ���������¼���, ��ʽΪ"NPCNAME::EVENTNAME"..

ע��!!!!!!!!������ʺʹ�������д0�Ļ�, ÿ�ι������ᴥ���¼�, ��������������������д, ����¼�����̫Ƶ��, ���ܻ���Ϊ�¼��µĴ�����ù���Ƶ����ɷ�����CPU��Դ������ռ�õ����..

---------------------------------------

*delatkevent <��������>{,<��ɫID>};

ɾ�����������ʹ������¼�������.

---------------------------------------


*getatkevent <��������>,<��ǩ>{,<��ɫID>};

��ð��������ʹ������¼�������.

<��ǩ>:
	Ϊ 1 ʱ, ���� ���������ٴ�, ���ﵽ��ߴ�ʱ����, �������¼�.
	Ϊ 2 ʱ, ���� addatkeventָ���е�2������(<����>)
	Ϊ 3 ʱ, ���� addatkeventָ���е�3������(<����>)
	Ϊ 4 ʱ, ���� addatkeventָ���е�4������("<�¼�>")
	Ϊ 5 ʱ, ���� addatkeventָ���е�5������(<����ʱ����>)

---------------------------------------

*gettarget{<GID>};

��ȡ���ڹ���Ŀ���GID..

---------------------------------------

*unitskillfixed <GID>,<����ID>,<��������>,<�˺�����>,<��������>{,<����ʱ��>};

����ʱ����, �Լ��ܵ�����ʱ��, �˺���������, ���������������Ϊ 0, ��ֱ��������������Ӧ����. 

����ID:
	�������IDΪ-1, �����м��ܹ�����������
	�������IDΪ-2, ��������ͨ������������
	�������IDΪ-3, ��������ͨ�����ͼ��ܹ�����������

��������(�������:ѡ������������):
	&0: ������˺���ԭ�л������ۼ�(���ȼ�С����������)
	&1: ����ֱ������(<��������>�ṩ�����ݾ���������ʱ��, ���ȼ����� &4)
	&2: �˺�ֱ������(<�˺�����>�ṩ�����ݾ��Ǽ������˺�, ���ȼ����� &8)
	&4: ������ݰٷֱ�����(<��������>�ṩ�����İٷֱ�)
	&8: �˺��������ݰٷֱ�����(<�˺�����>�ṩ�����İٷֱ�)

��:
	unitskillfixed 19,1000,5000000,3; //����һ�λ�������ܵ������޸�Ϊ1��, �˺��޸�Ϊ 5000000
	unitskillfixed 19,1000,5000000,0; //����һ�λ�������ܵ������ۼ�1��, �˺��ۼ� 5000000
	unitskillfixed 19,1000,5000000,2; //����һ�λ�������ܵ������ۼ�1��, �˺��޸�Ϊ 5000000

---------------------------------------

*unitskillfixedreset <GID>;

��֮ǰ����������.

---------------------------------------

*gettarget {<GID>};

��ȡ���ڹ���Ŀ���GID��

---------------------------------------

*homattack <��������>;

�����ر��������Զ�����, ��Ϊ��2017���һ�θ����н������������Զ�����, �������Ӵ�ָ��.

<��������> 0: �ر�
           1: ֻ����ͨ����
           2����ͨ�����͵��弼��
           3����ͨ������Ⱥ�弼��
		   
---------------------------------------

*mobdrop <GID>,<ħ��ID>{,<���䱶��>{,<���������>}}

ģ��ħ�����, ��ħ�����ݿ��еĵ�����Ʒ�����μ�����䣨�����Ʒ����ͬʱ���䣩, 
����λ��Ϊ<GID>���ڵ�λ�ã����<GID>Ϊ 0 ����Ʒֱ�Ӹ���ű����������ң����������˵AID����GID��
������� = ħ�����ݿ�����Ʒ�ĵ������ x <���䱶��> / 100
<���������>����Լ�����յ������

---------------------------------------

*sortarray <����>{,<��ǩ>};
*sortarray <�ο�����>,<��������>,<��ǩ>;

�������������

<��ǩ>(����ѡ��)
	&1 : ��������
	&2 : ��������
	&4 : ����<�ο�����>��ֵ��<��������>��ֵ��������
	&8 : ����<�ο�����>��ֵ��<�ο�����>�ļ���������, ��ʱ<�ο�����>������������, <��������>Ϊ�Լ����ŵĽ���Ĵ洢����

˵����
	��Ϊ���������������ֵΪ�����б�������֣�.@example[��] = ֵ;
	�����ֵ��������
	
��1��
	.@example[100005] = 1;
	.@example[982254] = 2;
	.@example[852742] = 3;
	.@example[758787] = 4;
	
	sortarray(.@example, .@result, 1 | 8);  //����.@exampleֵ��˳���.@exampl�ļ�������������
	// .@example Ϊ 1,2,3,4
	// .@result Ϊ 100005,982254,852742,758787
	
	sortarray(.@example, 2); //��ֵ���з�������
	// .@example Ϊ 4,3,2,1
��2��
	setarray .@example[10],10,1,3,8,9,5,7,2,4,6,0;
	
	sortarray(.@example); //��ֵ������������
	// .@example Ϊ 0,1,2,3,4,5,6,7,8,9,10
	sortarray(.@example, 2); //��ֵ���з�������
	// .@example Ϊ 10,9,8,7,6,5,4,3,2,1,0
��3��
	setarray .@example[0],5,1,4,2,3;
	setarray .@result[0],10,20,30,40,50;
	
	sortarray(.@example, .@result, 2 | 4); //����.@exampleֵ��˳���.@result��ֵ���з�������
	// .@example Ϊ 5,4,3,2,1 
	// .@result Ϊ 10,30,50,40,20
	
	sortarray(.@example, .@result, 1 | 4); //����.@exampleֵ��˳���.@result��ֵ������������
	// .@example Ϊ 1,2,3,4,5
	// .@result Ϊ 20,40,50,30,10
	
��4��
	setarray .@example[0],5,1,4,2,3;
	setarray .@result[0],0,0,0,0,0;
	
	sortarray(.@example, .@result, 2 | 8); //����.@exampleֵ��˳���.@exampl�ļ����з�������
	// .@example Ϊ 5,4,3,2,1
	// .@result Ϊ 0,2,4,3,1

---------------------------------------

*npcshopattach "<name>"{,<flag>};

��չ OnSellItem �¼����ӷ��� @sold_idx ���飬������Ʒ�ڱ����е����С�

---------------------------------------

*getdaytick("<��׼ʱ���ʽ>");
*getdaytick(<��>,<��>,<��>{,<ʱ>{,<��>{,<��>}}});

�������ṩ��ʱ�䷵��ʱ�������1970��1��1�����ṩʱ�䡣
��׼ʱ���ʽΪ "��-��-�� ʱ:��:��" �� "��-��-��"

����ֵ:
	����ʱ���, ʱ���Ϊ����
	
��:
	getdaytick("2018-12-31");
	getdaytick(2018,12,31);
	getdaytick("2018-12-31 5:23:31");

---------------------------------------

*unitmasterid(<gid>);

���GID��Ӧ�����˵�GID, ֧�ֳ��ħ������塢Ӷ����Ԫ�ؾ��顢����

����ֵ:
	���˵�GID�����û���ҵ����˵Ļ��򷵻�0

---------------------------------------

*is_attach({<��ɫID>});

��ȡ����Ƿ���ű��й���, һ�������ж�����Ƿ����ڸ�NPC�Ի�
һ�����ڽű���ʹ��, ����ڽű����ȡ GID ��ʹ�� getattachnpc ָ��

��:
501,Vip_list,VIP�˵�,11,10,,70,,,,,0xFFFFFFFF,63,2,,,,,,{ if (is_attach()) dispbottom "ʹ��VIP�˵����ȹر��� "+getunitname(is_attach())+" �Ľ�̸"; },{},{}

prontera,153,179,5	script	is_attach����	56,{
	mes "������NPC�Ի�,�벻Ҫ����ر�,������ʹ��VIP�˵�";
	close;
}

����ֵ:
	���ڶԻ��򷵻��ϲ���� NPC �� GID , û���ڶԻ�����0;

---------------------------------------

*getattachnpc({<��ɫID>});

�����ҵ�ǰ����� NPC �� GID.

prontera,153,179,5	script	getattachnpc����	56,{
	mes "������NPC�Ի�, NPC ����: "+getunitname(getattachnpc());
	close;
}

����ֵ:
	NPC �� GID , û���ڶԻ�����0;
	
---------------------------------------

*unitskilluse <GID>,<����ID>,<���ܵȼ�>{,<Ŀ��GID>,<����ʱ��>{,<�Ƿ�ɴ��>}};
*unitskilluse <GID>,"<��������>",<���ܵȼ�>{,<Ŀ��GID>,<����ʱ��>{,<�Ƿ�ɴ��>}};

��Ŀ��ʹ�ü���, Ч��������unitskilluseid, ��ָ����Զ��жϵ��漼�ܻ���Ŀ�꼼��, ��ʹ�ü���Ϊ���漼��ʱ������Ŀ��Ϊ�����ͷż��ܡ�
���Ƿ��ϱ�ʡ��ʱ�����ܻ���� skill_db.txt �е� castcancel ���ж��Ƿ�ɴ�ϡ�

---------------------------------------

* mobskill <ħ��GID>,<����ID>,<���ܵȼ�>,<ӽ��ʱ��(��)>,<�Ƿ�ɴ��>,<Ŀ������>{,<ƫ��x>,<ƫ��y>};
* mobskill <ħ��GID>,<"��������">,<���ܵȼ�>,<ӽ��ʱ��(��)>,<�Ƿ�ɴ��>,<Ŀ������>{,<ƫ��x>,<ƫ��y>};

ħ��ʹ�ü���, �����������ӽ����ȡ��Ŀǰ�ͷŵļ���, ��ָ���д�ű����˷ǳ��Ѻ�.
����kuku

<�Ƿ�ɴ��>
   0: ���ɴ��
   1: ���Դ��

<Ŀ������>
   0: �Լ�
   1: ���ﵱǰĿ��
   2: ���������
   3: ���Ŀ��
   
<ƫ��x> ���漼�������Ŀ������x���ƫ����
<ƫ��y> ���漼�������Ŀ������y���ƫ����

---------------------------------------

*sleep3 <ʱ��>

��ʱ����, ���ᶪʧ����ҵĹ���, ���������ű�û�й���Ҳ���ᱨ��.

---------------------------------------

*unitgettarget(<GID>);
*gettarget(<GID>);

��ȡGID�������ڹ�����Ŀ���GID.

---------------------------------------

*when_progressbar_abort_doevent;
*when_progressbar_abort_doevent(<��ɫID>);

ʹ�ô˽ű��� progressbar ����Ϻ���¼� OnPCProgressAbortEvent �Żᱻ����.

---------------------------------------

*isequippedcnt2(<��ƷID>{,<��ƷID>{,<��ƷID>{,<��ƷID>}}});

�÷�ͬ isequippedcnt ����֧���κ���ƷID, ��Ҫ������չ��ħ����. 

����ֵ:
	��������

---------------------------------------

*isequipped2(<��ƷID>{,<��ƷID>{,<��ƷID>{,<��ƷID>}}})

�÷�ͬ isequipped ����֧���κ���ƷID, ��Ҫ������չ��ħ����. 

����ֵ:
	��������

---------------------------------------

*instance_enter_left {<��ɫ���>};

�����ϴ��뿪������λ��..������ BatterRA.conf ������ instance_leave_record ������Ч
�ú���ͨ������ instance_record$ �õ�������Ϣ, �������жϱ��������ݵĺϷ���
����ͬһ���������ᱻ����, �����ڵ����ؽ����븱��, Ҳ�������뿪�������ػظ���

����ֵ��
	�ο� instance_enter

---------------------------------------

*instance_record {<��ǩ>{,<��ɫID>}};

������������ instance_record$ ���������������������ڽ��еĸ���
�����ڻ�ȡ���� instance_record$ �б���ĵ�ͼ��X���ꡢY����

<��ǩ>
	���� ����� instance_record$ ���������������������ڽ��еĸ���, �Ϸ�����1, ���򷵻�0
	1 : ���ظ�����ԭ��ͼ ��ͨ�� instance_map������ȡ������ͼ, ʧ�ܷ���0
	2 ������X����, ʧ�ܷ���0
	3 ������Y����, ʧ�ܷ���0

---------------------------------------

*getmobdmglog(<ħ��GID>,<CID����>,<�˺�����>{,<����ȡ����>{,<�����˺���������>})};

������ȡ��ħ������˺���������, ���ݴ���<�洢����>, �������, ���������¿�ʼ�����ҵ���Ӧ���ݻᱻ��ա�
��ָ�����ֻ�ܻ��30���˺����ݡ�(�Ƽ�ʹ�� unit_battle_* ϵ���������)

<CID����>
	���ڴ洢���CID
	
<�˺�����>
	���ڴ洢�˺���ֵ
	
<�����˺���������>
	0 : �� (��������˺�˳������)
	1 : �� (Ĭ���Զ�����)

����ֵ:
	����<�洢����>�����ݵĸ�����

---------------------------------------

*charid2rid(��ɫID);

���ؽ�ɫID(charid)��Ӧ���˺�ID(rid, gid, aid)

����ֵ:
	����AID

---------------------------------------

*unithide <GID>,<��ɫID>{,<��Ч���>};

��ʱ����ĳ��GID������ֻ���<��ɫID>��������뿪�ٻ���ʱ�����Կ������Ŀ�ꡣ
��ͨ��NPC�¼� OnDisplay ��ϳ��ڶ�ĳ���������/��ʾָ��NPC��OnDisplayʹ�÷����μ� npc\BetterRa\BetterRa_event_demo.txt

��Ч���:  
	0: û����Ч
	1: �ǳ���Ч
	2: ˲����Ч(Ĭ��)
	3: ������Ч

---------------------------------------

*unitshow <GID>,<��ɫID>;

��ʱ��ʾĳ��GID����ʾֻ���<��ɫID>��������뿪�ٻ���ʱ���ǿ��������Ŀ�ꡣ
��ͨ��NPC�¼� OnDisplay ��ϳ��ڶ�ĳ���������/��ʾָ��NPC��OnDisplayʹ�÷����μ� npc\BetterRa\BetterRa_event_demo.txt

---------------------------------------

*preg_match(<ƥ������>,<ƥ���ı�>{,<����λ��>});

��ָ��Ϊ�ٷ�ָ�BetterRA֧��ȡ��ƥ�����ƥ���ı��������� $@p$[0] �С�
���������$@p$[1]��$@p$[2]��$@p$[3]��$@p$[4].....��

����ֵ��
	ƥ������(��$@p$�����Ա��)

---------------------------------------

*showvending("<NPC����>",<�Ƿ���ʾ>{,"<��������>"});

ʹָ��<NPC����>ͷ����ʾ¶���̵������, ������ƿɴ���NPC

�Ƿ���ʾ:
	0 - ��������
	1 - ��ʾ����
	
����: showvend

�÷�:
prontera,150,150,4	shop	Vend_Title_Test	48,501:-1

-	script	NPC_Vend	-1,{
	end;
	OnInit:
		showvending("Vend_Title_Test", 1, "�����Ƶ��̵�");
	end;
}

����ֵ:
	�����ɹ��򷵻� 1, ʧ���򷵻� 0

---------------------------------------

*showbuying("<NPC����>",<�Ƿ���ʾ>{,"<��������>"});

ʹָ��<NPC����>ͷ����ʾ�ɹ��̵������, ������ƿɴ���NPC

�Ƿ���ʾ:
	0 - ��������
	1 - ��ʾ����

�÷�:
prontera,150,150,4	shop	Buy_Title_Test	48,501:-1

-	script	NPC_BUY	-1,{
	end;
	OnInit:
		showbuying("Buy_Title_Test", 1, "�����Ƶ��̵�");
	end;
}

����ֵ:
	�����ɹ��򷵻� 1, ʧ���򷵻� 0

---------------------------------------

*killaroundmonster <GID>,<��Χ>,<ħ��mode>;

ɱ��GID��Χ�ڵ�ħ��, ����<ħ��mode>��ħ�ﲻ�ᱻը��

<ħ��mode>�������Զ�ѡ, ��|����

ע�⣺ָ����޵е�ħ��(UMOB_DMGIMMUNE)������ˮ�����ػ�ʯ��Ч

�У�
    killaroundmonster getcharid(3),10,MD_MVP; //ɱ������MVP֮���10��Χ�ڵ�ħ��
	
---------------------------------------

*isloggedin2 <��ɫID>;

��ȡ����Ƿ�����, �����򷵻��˺�ID (account id) �������򷵻� 0

---------------------------------------

*unitatkeventmark <GID>,<���ֵ>;

ָ��Ϊ OnPCAttackFilter �¼��ı��ָ��, ���ڱ����ҡ�ħ���������塢Ӷ���ȡ�
������ǵ�ħ�ﱻ����ʱ��ǿ�ƴ��� OnPCAttackFilter �¼�, ���� BetterRA.conf �� attack_event ����,
�¼��з��ص� dmg_mark Ϊ�˴��趨�� <���ֵ>

---------------------------------------

*unitatkedeventmark <GID>,<���ֵ>;

ָ��Ϊ OnPCAttackedFilter �¼��ı��ָ��, ���ڱ����ҡ�ħ���������塢Ӷ���ȡ�
������ǵ�ħ�ﱻ����ʱ��ǿ�ƴ��� OnPCAttackedFilter �¼�, ���� BetterRA.conf �� attacked_event ����,
�¼��з��ص� dmg_mark Ϊ�˴��趨�� <���ֵ>

---------------------------------------

*setcell "<��ͼ����>",<x1>,<y1>,<x2>,<y2>,<����>,<����>;

���������� CELL_SAFEZONE ���ð�ȫ��, ��ȫ�������һ�ħ�ﲻ�����԰�ȫ���ڵ����ΪĿ��(����GVG, PVP��ͼ)

---------------------------------------

*checkcell ("<��ͼ����>",<x����>,<y����>,<����>);

���������� CELL_CHKSAFEZONE ��ȫ�����

---------------------------------------

*setquesttime <����ID>,<ʱ��(��)>{,<��ɫID>};

����������ʱ��, ������û������ʱ, �����������õ���ʱ��, ����ʱ������ quest_db.txt �еĵڶ���
������и�����ʱ, ��ֻ����������ʱ��

---------------------------------------

*getquesttime <����ID>{,<��ɫID>};

��ȡ������ʱ��

---------------------------------------

*runitemscript <��ƷID>,{<����>{,<��ɫID>}};

������Ʒ�Ľű�..

<����>:
 0 - Script
 1 - OnEquip_Script
 2 - OnUnequip_Script

�ɹ�����1, ʧ�ܷ���0

---------------------------------------

*runitemoption <Option ID>,<Option Value>,<Option Param>{,<��ɫID>};

���д����Ľű�..

option Ϊ item_randomopt_db.yml �е� Id ֵ, ������ϵĴ�������ͨ�� getidxrandomoption �� getposrandomoption ��ȡ

�ɹ�����1, ʧ�ܷ���0

---------------------------------------

*pcisdead {<GID>};

�������Ƿ�����, �������� 1, δ�������߲�����ʱ���� 0 

---------------------------------------

*unitdamage <GID>,<�˺�ֵ>{,<�������>};
*unitdamagerate <GID>,<�˺��۳�MAXHP����>{,<�������>};

ʹĿ���ܵ��˺�ֵ, ������ʾ�˺�����, ���ܵ��˺�Ϊ���ʱ, ��δ��û�л�ɫ�˺�ֵ.

---------------------------------------

*unitsleep <GID>,<ʱ�����>;

�ӳ�һ��ʱ��, ָ����GID��, ��GID���ӳٹ����в�����ʱ���� 0

---------------------------------------

*unitsleepend <GID>,<ʱ�����>;

�ӳ�һ��ʱ��, ָ����GID��, ��GID���ӳٹ����в�����ʱ�ű�ֹͣ

---------------------------------------

*unitspecialeffect <GID>,<��ЧID>{,<����Ŀ��>{{,<Ŀ��GID>}});

ʹָ��ʵ��<GID>��ʾһ����ЧЧ��, ������ specialeffect ������������ʾ���κ�Ŀ��

����Ŀ��
   AREA - ���͸����ӷ�Χ�ڵ����(Ĭ��)
   SELF - ���͸��Լ�, ���ָ��<Ŀ��GID> ����Чֻ��ָ����ҿ���
   PARTY_AREA - ���͸����ӷ�Χ�ڵ�ָ������
   GUILD_AREA - ���͸����ӷ�Χ�ڵ�ָ������
   BG_AREA - ���͸����ӷ�Χ�ڵ�ָ��BG����
   
---------------------------------------

*unit_battle_mark <GID>,<����>;

���һ��ʵ�嵥λ, ʹ����Լ�¼һЩս������, ���ݼ�¼�����ͨ�� unit_battle_get ��ȡ����.
�ú��������¼����, ���������ʱû����ȷ�Ƴ�, ���ܻᱣ���������.

����(��������ѡ�����������):
	BLG_ATTACK   ��¼�����˺�����
	BLG_ATTACKED ��¼�������˺�����
	BLG_HEAL     ��¼ʵ�������������
	BLG_ALL      ��¼��������
      
---------------------------------------

*unit_battle_get <GID>,<����>,<��Ӧʵ������>,<�Ƿ�ϲ�����>,<CID/GID ����>,<�������>{,<��������>};

ȡ���ѱ��ʵ���������ս������, ���Խ�������, Ĭ�Ϻ�������˺�.
ע��: ����������г�����GIDΪ 0, �����Ʒ����� Unknown ����˺���Դ���в�δ���

����:
	BLG_ATTACK   ȡ�������˺�����
	BLG_ATTACKED ȡ���������˺�����
	BLG_HEAL     ȡ��ʵ�������������
	
��Ӧʵ������:

	��: �� GID ָ�����Aʱ, 
	    �����Aͬʱ��ħ������B����, ʵ�������� BL_PC  ��ֻȡ�� ���A�����B֮���ս������
	    �����Aͬʱ��ħ������B����, ʵ�������� BL_MOB ��ֻȡ�� ���A��ħ��֮���ս������
		
	BL_PC		- ��ҵ�λ (Ĭ��)
	BL_MOB		- ħ�ﵥλ 
	BL_PET		- ���ﵥλ
	BL_HOM		- �˹������嵥λ
	BL_MER		- Ӷ����λ
	BL_ELEM		- Ԫ�ؾ��鵥λ
	
�Ƿ�ϲ�����:
	��ȡ����λ����Ϊ BL_PC  ʱ, �ϲ����ݽ���ҹ����ĳ�������塢Ӷ����Ԫ�ؾ�����˺���������˺�
	��ȡ����λ����Ϊ BL_MOB ʱ, ����ͬħ��ID����ɵ������˺����ݺϲ�
	����������رպϲ�����, �����޽�����
	
CID/GID ����(����):
	��ȡ����λ����Ϊ BL_PC  ʱ, ����������ҵ� CID
	��ȡ����λ����Ϊ BL_PET/BL_HOM/BL_MER/BL_ELEM ʱ, �������������ҵ� CID
	��ȡ����λ����Ϊ BL_MOB ʱ, ��������ħ�� GID
	��ȡ����λ����Ϊ BL_MOB �� �ϲ�����ʱ, ��������ħ��ID(MOB_ID) 
	
�������(����):
	���ڴ洢�˺�����������ֵ

��������(����):
	����ʵ�������(����)
	�����������ʱ�����ʱ, �����ٻ�ȡ�������, ���ڴ˴�����ʵ����

����ֵ:
	����ȡ�����ݵ�����, һ������ѭ������ʱ, ����ѭ����Χ
	
---------------------------------------

*unit_battle_gettotal <GID>,<����>;

ȡ���ѱ��ʵ���������Ӧ���͵������ܺ�

����ֵ:
	���������ܺ�
	
---------------------------------------

*unit_battle_clear <GID>{,<����>{,<��Ӧʵ������>{,<��Ӧ��ʵ��ID>}}};

����ѱ��ʵ�嵥λ���������, ����в����к��ж�Ӧ��ʵ�嵥λ, ��ֻ���ָ��ʵ���ս������

����:
	BLG_ATTACK   ��������˺�����
	BLG_ATTACKED ����������˺�����
	BLG_HEAL     ���ʵ�������������
	BLG_ALL      �����������(Ĭ��)
	
��Ӧʵ������:
	BL_PC		- ��ҵ�λ
	BL_MOB		- ħ�ﵥλ 
	BL_PET		- ���ﵥλ
	BL_HOM		- �˹������嵥λ
	BL_MER		- Ӷ����λ
	BL_ELEM		- Ԫ�ؾ��鵥λ
	BL_ALL      - ���е�λ(Ĭ��)
	
��Ӧʵ�嵥λ:
	�����д ��ҽ�ɫID ��ɾ����ɫ��ս����¼��, ��ɾ����ҹ����ĳ����������ս����¼
	�����д GID ��ɾ����Ӧ GID ������ս����¼
	�����дħ��ID��������ж�Ӧħ���
	ע��: ��ҵ�λֻ���� CID �޷�ʹ�� GID ����Ҽ�¼���в���, ������λ������ʹ�� GID ����
	
---------------------------------------

*specialeffectnum(<��ЧID>,<��Ч����>{,<����Ŀ��>{,<ԴGID>{,<Ŀ��GID>}}});
*specialeffectnum(<��ЧID>,<��Ч����>{,<����Ŀ��>{,"<ԴNPC��>"{,<Ŀ��GID>}}});

ʹĿ����ʾһ������������ЧЧ��, ���ָ�� <ԴGID>("<ԴNPC��>") ����Ч����ʾ��ָ����Դʵ����

����Ŀ��
   AREA - ���͸����ӷ�Χ�ڵ����(Ĭ��)
   SELF - ���͸��Լ�, ���ָ��<Ŀ��GID> ����Чֻ��ָ����ҿ���
   PARTY_AREA - ���͸����ӷ�Χ�ڵ�ָ������
   GUILD_AREA - ���͸����ӷ�Χ�ڵ�ָ������
   BG_AREA - ���͸����ӷ�Χ�ڵ�ָ��BG����

---------------------------------------

*removespecialeffect(<��ЧID>{,<����Ŀ��>{,<ԴGID>{,<Ŀ��GID>}}});
*removespecialeffect(<��ЧID>{,<����Ŀ��>{,"<ԴNPC��>"{,<Ŀ��GID>}}});

�Ƴ�Ŀ�����ϵ�һ����ЧЧ��, ���ָ�� <ԴGID>("<ԴNPC��>") ����Ч����ʾ��ָ����Դʵ����

����Ŀ��
   AREA - ���͸����ӷ�Χ�ڵ����(Ĭ��)
   SELF - ���͸��Լ�, ���ָ��<Ŀ��GID> ����Чֻ��ָ����ҿ���
   PARTY_AREA - ���͸����ӷ�Χ�ڵ�ָ������
   GUILD_AREA - ���͸����ӷ�Χ�ڵ�ָ������
   BG_AREA - ���͸����ӷ�Χ�ڵ�ָ��BG����

ע��: ��ָ��ֻ�� 20181002 ���Ͽͻ�����Ч. 

---------------------------------------

*getcomputeruid {<��ɫID>};

��ȡ��һ�����, ֻ�пͻ��˼����˷����dll�ſ���ʹ��

---------------------------------------

*getsameuidinfo {<��һ�����>};

���ĳ�����������ߵ�������Լ���ҵĽ�ɫ��ŵ���Ϣ.

���ִ�гɹ��Ļ�, �ḳ����������������ҵ���Ϣ:

$@sameuid_aid[]		ʹ��ָ�����������ߵ�����˺ű������(AccountID)
$@sameuid_cid[]		ʹ��ָ�����������ߵ���ҽ�ɫ�������(CharID)
$@sameuid_name$[]	ʹ��ָ�����������ߵ���ҽ�ɫ������

$@sameuid_amount ʹ��ָ���������¼����Ҹ���.

---------------------------------------

*countrentitem(<��ƷID>{,<�˺�ID>})
*countrentitem("<��Ʒ����>"{,<�˺�ID>})
*countrentitem2(<��ƷID>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>{,<�˺�ID>})
*countrentitem2("<��Ʒ����>",<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>{,<�˺�ID>})
*countrentitem3(<��ƷID>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*countrentitem3("<��Ʒ����>",<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})

ָ�����ڻ�ȡ������Ʒ������, ��������������ʱ��, ͨ�� (countitem - countrentitem) �������������Ʒ������, �÷���ο� countitem

---------------------------------------

*getitem(<��ƷID>,<����>{,<�˺�ID>})
*getitem("<��Ʒ����>",<����>{,<�˺�ID>})
*getitem2(<��ƷID>,<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>{,<�˺�ID>})
*getitem2("<��Ʒ����>",<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>{,<�˺�ID>})
*getitem3(<��ƷID>,<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*getitem3("<��Ʒ����>",<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*getitem4 <��ƷID>,<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<���۵ȼ�>,<�������ID����>,<���������ֵ����>,<������Բ�������>{,<�˺�ID>};
*getitem4 "<��Ʒ����>",<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<���۵ȼ�>,<�������ID����>,<���������ֵ����>,<������Բ�������>{,<�˺�ID>};
*getitembound4 <��ƷID>,<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<���۵ȼ�>,<������>,<�������ID����>,<���������ֵ����>,<������Բ�������>,<���۵ȼ�>{,<�˺�ID>};
*getitembound4 "<��Ʒ����>",<����>,<����>,<����>,<����>,<��Ƭ1>,<��Ƭ2>,<��Ƭ3>,<��Ƭ4>,<���۵ȼ�>,<������>,<�������ID����>,<���������ֵ����>,<������Բ�������>,<���۵ȼ�>{,<�˺�ID>};

ָ������һ����ȡ��Ʒ�ı�������, ��ָ��ֻ��ԭָ�������˷������е��Ż�, ����д�ű�

---------------------------------------

*monster("<��ͼ��>",<x>,<y>,"<��ʾ������>",<ħ��ID>,<����>{,"<����������ǩ>",<����>,<AI>});
*areamonster("<��ͼ��>",<x1>,<y1>,<x2>,<y2>,"<��ʾ������>",<ħ��ID>,<����>{,"<����������ǩ>",<����>,<AI>});

ָ������һ���ٻ�ħ���GID, �ٻ�ʧ�ܷ���0, ��ָ��ֻ��ԭָ�������˷���ID���Ż�, ����д�ű�

---------------------------------------

*getbrokencount({<��ɫID>});

��ȡ��������װ����������

---------------------------------------

*mobattached();

�ű��Ƿ���ħ�������, ���򷵻�ħ��GID, ���򷵻� 0;
һ������ OnTouchNPC ��ȡ����ħ��, �� getattachedrid + getunittype �÷���ͬ��

---------------------------------------

*setgroupid <Ȩ�޵ȼ�>{,<��ɫID>};
*setgroupid <Ȩ�޵ȼ�>{,<"��ɫ��">};

��������µ�Ȩ�޵ȼ�, ��Ҳ����߻�ʧ�ܲ�����.

---------------------------------------

*getunitstatus <GID>,<����>;
*getunitstatus <����>;

�����ӦGID (��ҡ�ħ���������塢Ӷ����Ԫ�ء�NPC) ��ս������.

����:
	STATUS_HP			Ѫ��
	STATUS_SP			����
	STATUS_MAXHP		���Ѫ��
	STATUS_MAXSP		�������
	STATUS_STR			������ֵ
	STATUS_AGI			������ֵ
	STATUS_VIT			������ֵ
	STATUS_INT			������ֵ
	STATUS_DEX			������ֵ
	STATUS_LUK			������ֵ
	STATUS_POW			��������������
	STATUS_STA			��������
	STATUS_WIS			ħ������
	STATUS_SPL			����ħ��������
	STATUS_CON			������ޒ����
	STATUS_CRT			���������ظ��������˺�����
	STATUS_ATK			���﹥
	STATUS_ATK_L		�﹥(��ֵ) �� �����������С�﹥
	STATUS_ATK_R 		�﹥(��ֵ) �� �������������﹥
	STATUS_MATK			��ħ��
	STATUS_MATK_L		ħ��(��ֵ) �� �����������Сħ��
	STATUS_MATK_R		ħ��(��ֵ) �� ������������ħ��
	STATUS_SPEED		�ƶ��ٶ�
	STATUS_ADELAY		�������ӳ�
	STATUS_AMOTION		�����������ӳ�
	STATUS_DMOTION		���������ӳ�
	STATUS_MODE			MODE
	STATUS_HIT			������
	STATUS_FLEE_L		�ر���
	STATUS_FLEE_R		��ȫ�ر�
	STATUS_CRI			������
	STATUS_DEF_L		���(��ֵ)
	STATUS_DEF_R		���(��ֵ)
	STATUS_MDEF_L		ħ��(��ֵ)
	STATUS_MDEF_R		ħ��(��ֵ)
	STATUS_ATK_ELE		��������
	STATUS_ATK_RANGE	������Χ
	STATUS_DEF_ELE		��������
	STATUS_DEF_ELE_LV 	�������Եȼ�
	STATUS_SIZE			����
	STATUS_RACE			����
	STATUS_CLASS		ְҵ(���ID)
	STATUS_ASPD			����
	
����ֵ:
	��Ӧ��ս������

----------------------------------------

*skf_src_status <����>;

��ȡ�����ߵĻ�������, �����Զ��弼�ܹ�ʽ, ������ skill_formula_db.yml �ļ���ʹ��..

����:
	�ο� getunitstatus ָ��

----------------------------------------

*skf_target_status <����>;

��ȡĿ��(��������)�Ļ�������, �����Զ��弼�ܹ�ʽ, ������ skill_formula_db.yml �ļ���ʹ��..

����:
	�ο� getunitstatus ָ��

----------------------------------------

*skf_attr_fix <�˺�>;

���㱾���˺�����������, �����Զ��弼�ܹ�ʽ, ������ skill_formula_db.yml �е� Formula ����ʹ��..

----------------------------------------

*skf_card_fix <�˺�>,<��������>{,<NK>{,<��������>}};

���㱾���˺��� BONUS ����, �����Զ��弼�ܹ�ʽ, ������ skill_formula_db.yml �е� Formula ����ʹ��..

��������:
��������Χ:
	BF_SHORT:  �����빥��
	BF_LONG:   Զ���빥��
	Ĭ��:   BF_SHORT+BF_LONG
����������:
	BF_WEAPON: ��������
	BF_MAGIC:  ħ������
	BF_MISC:   ��Ϲ���
	Ĭ��:   BF_WEAPON
����������:
	BF_NORMAL: ��ͨ����
	BF_SKILL:  ���ܹ���
	Ĭ��:   ������������� BF_WEAPON (only) BF_NORMAL, ���� BF_SKILL+BF_NORMAL.
	
NK: Ϊ skill_db.txt �е� NK�� ��д-1Ϊ����Ĭ��
	0x01 - No damage skill
	0x02 - Has splash area
	0x04 - Damage should be split among targets
	0x08 - Skill ignores caster's % damage cards (misc type always ignores)
	0x10 - Skill ignores elemental adjustments
	0x20 - Skill ignores target's defense (misc type always ignores)
	0x40 - Skill ignores target's flee (magic type always ignores)
	0x80 - Skill ignores target's def cards
	0x100 - Skill can critical (��ɫ�����ʾ�˺�)

<��������>
BF_MISC and BF_MAGIC ignore flag value
	3: Calculates attacker bonuses in both hands.
	2: Calculates attacker bonuses in right-hand only.
	0 or 1: Only calculates target bonuses.

----------------------------------------

*atcommand <"GMָ��">{,<��ǩ>};
*useatcmd <"GMָ��">{,<��ǩ>};

�����ʹ��һ��GMָ��, atcommand����ָ��Ȩ��, ���ӱ�ǩ����, �����Ƿ���ʾָ�������Ϣ (��ɫ��)

��ǩ:
	1 �����GMָ����Ϣ
	0 �� ���� ���GMָ���ǩ

----------------------------------------

*progressbar_unit("<��ɫ>",<��>{,<GID>});

��GID��Ӧ��Ŀ��ͷ����ʾһ����������
�� progressbar(progressbar_npc)��ͬ����, �ű�������ͣ, ���ǻ��������
���GID����������Ȼ���ʾ����ű����������ͷ��

----------------------------------------

*getvariableofpc(<����>,<���AID>{,<Ĭ��ֵ>});

�ű�����ָ����ҵı���, �����Ҳ������򷵻�Ĭ��ֵ

����:

//�����������Ϊ player �� @var ����, �����Ҳ������򷵻�0
	.@v = getvariableofpc(@var, getcharid(CHAR_ID_ACCOUNT, "player"));

//���������Ϊ player �� @var ����Ϊ 1
	set(getvariableofpc(@var, getcharid(CHAR_ID_ACCOUNT, "player")), 1);

----------------------------------------

*getcalendartime(<ʱ>,<��>{,<�·ݵĵڼ���>{,<ÿ�ܵĵڼ���>}});

ָ����´γ���ָ��ʱ���ʱ���

�·ݵĵڼ������ 1 �� 31 ֮��, Ĭ��ֵΪ -1 �������·�.
ÿ�ܵĵڼ����ֵΪ:
	0 - SUNDAY
	1 - MONDAY
	2 - TUESDAY
	3 - WEDNESDAY
	4 - THURSDAY
	5 - FRIDAY
	6 - SATURDAY

�������ÿ�ܵĵڼ�����ÿ�µĵڼ����ͻ
������ȡÿ�ܵڼ���ĳ��ʱ�ε�ʱ���, ��ÿ�µĵڼ������Ϊ -1. ���򷵻� -1.

����:
	getcalendartime(19, 00); // ����´� 19:00 ��ʱ���
	getcalendartime(19, 00, 6); // ����´� 6�� 19:00��ʱ���
	getcalendartime(19, 10, -1, 1); // ����´� ��һ 19:10 ��ʱ���
	
----------------------------------------

*sprintf(<��ʽ�ı�>{,����{,����{, ...}}});

C������ʽ��sprintf. �����������ʽ����������ַ���.

��ʽ�ַ�������ʹ�����½ṹ��

  %[���������][flags][width]specifier

��ʽ�ı�֧������˵����:

%%: ���һ�� '%' (�����������֧�ֲ�������־������)
%d, %i: �з���ʮ��������
%u: �޷���ʮ��������
%x: �޷���ʮ����������
%X: �޷���ʮ��������������д��ĸ��
%o: �з��Ű˽���
%s: �ַ����ַ���
%c: �ַ�����ʹ���ַ����ĵ�һ���ַ���

��ʽ�ı���֧������˵������

%n (���ڰ�ȫ���ǲ�֧��)
%f, %F, %e, %E, %g, %G (�ű����治֧�ָ�������)
%p (�ű����治֧��ָ��)
%a, %A (��֧��, ��ֱ�ʹ�� 0x%x �� 0x%X ���)

���������:

����ͨ�� 'x$' ָ����ʽ�ı��е�˵�����ֱ�ʹ���ĸ����� ( x ��һ������, �������õڼ�������),
�����Խ������������� (���ڷ����ַ����п������ã���Ϊ����˳�������ԭʼ˳��ͬ). 

����:
	// ���������������ʱ, ������Ϊ������˳��ͬ, ����Ҫ�ߵ����������, ����ͨ�� 'x$' �����������
	mes(sprintf("Hello, It's %d minutes after %d o'clock.", gettime(DT_MINUTE), gettime(DT_HOUR))); // ����
	mes(sprintf("���, ������ %2$d�� %1$d��", gettime(DT_MINUTE), gettime(DT_HOUR))); // ���

��ʽ�ı�֧�ֵ� flags����ʶ����:

- (����): �ڸ������ֶο���������룬Ĭ�����Ҷ��루�μ� width ��˵������
+ (�Ӻ�): ǿ���ڽ��֮ǰ��ʾ�ӺŻ���ţ�+ �� -����������ǰ�����ʾ + �š�Ĭ������£�ֻ�и���ǰ�����ʾһ�� - �š�
(�ո�): ���û��д���κη��ţ����ڸ�ֵǰ�����һ���ո�
0 (��): ��ָ����� padding ��������߷����㣨0���������ǿո񣨲μ� width ��˵������

	mes(sprintf("���ڵ��¶��� %+d ���϶�", 25)); // ��ֵǰ�汣�� '+' ��
	.@map_name$ = sprintf("quiz_%02d", .@i); // λ��������� 2, ��ǰ����� 0, ������� "quiz_00"

�����ڲ�����ָ���ֶο��ȣ���ȷ�����������ٸ��ַ������ʹ��('*')��Ϊָ�����ȣ�
����Ƚ���Ϊsprintf()�����Ĳ�����ȡ

	sprintf("%04d", 10) // Returns "0010"
	sprintf("%0*d", 5, 10) // Returns "00010"
	sprintf("%5d", 10) // Returns "   10"
	sprintf("%-5d", 10) // Returns "10   "
	sprintf("%10s", "Hello") // Returns "     Hello";
	sprintf("%-10s", "Hello") // Returns "Hello    ";

���� ('.precision') �� ���� ('hh', 'h', 'l', 'll', 'L', 'z', 'j', 't') δʵ��, �ű����治��Ҫ.

����:
	.@format$ = "The %s contains %d monkeys";
	dispbottom(sprintf(.@format$, "zoo", 5));
	//prints "The zoo contains 5 monkeys"

	dispbottom(sprintf(.@format$, "barrel", 82));
	//prints "The barrel contains 82 monkeys"
	
----------------------------------------

*mesf <��ʽ�ı�>{,����{,����{, ...}}};

��NPC�Ի����ӡһ�仰, ͬ mes,����ʹ�÷����μ� sprintf

����:

	mesf("���, ���� %s, һ���ȼ�Ϊ %d �� %s", strcharinfo(PC_NAME), BaseLevel, jobname(Class));
	// is equivalent to:
	mes(sprintf("���, ���� %s, һ���ȼ�Ϊ %d �� %s", strcharinfo(PC_NAME), BaseLevel, jobname(Class)));

ָ���� mes() �� sprintf() �ļ򻯰�.

----------------------------------------

*consolemes("<����>","<��ʽ�ı�>"{,<����>{,<����>{, ...}}})

�ڿ���̨��ӡ�ı�, ��2����������ʹ�õ���������sprintf�ĸ�ʽ

<����>:
	MSG_DEBUG		������Ϣ
	MSG_ERROR		������Ϣ
	MSG_WARNING		������Ϣ
	MSG_INFORMATION	��ͨ��Ϣ
	MSG_STATUS 		״̬��Ϣ
	MSG_NOTICE 		ע����Ϣ
Example:

	consolemes(CONSOLEMES_DEBUG, "%s �������!", strcharinfo(PC_NAME));
	consolemes(CONSOLEMES_DEBUG, "\033[0;32mHello World"); // ֧����ɫ����

----------------------------------------
	
*setequipedcard <װ��λ�ñ��>,<�ڼ�������>,<��ƷID>{,<��ɫID>};

����װ���ĵ�����������Ӧ�����е���Ʒ, �����ڴ�����ʾж���ٴ���װ��.
��� ��ƬID Ϊ 0 �������Ӧ���۵ĵ���
ע��: ���ÿ��۲���Ա������κε������ӻ�ɾ��

<װ��λ�ñ��> ��ָ EQI_* ��ͷ��λ�ó���
<�ڼ�������> ��0��ʼ 0~3������
<��ƷID> Ϊ����Ҫ���뿨�۵���Ʒ, �������κ���Ʒ

----------------------------------------

*abs(<����>);

�������־���ֵ

----------------------------------------

*addmobskill <GID>,"<���ܸ�ʽ>";

��ָ��GID��ħ������һ������, ��Ӱ������ħ��, <���ܸ�ʽ> �μ� mob_skill_db.txt �ı���ʽ
ע��: һ��ħ�����ֻ����50������

����:
// monster "prontera",155,106,"12345",1029,1;
// addmobskill $@mobid,"1029,Scorpion@NPC_FIREATTACK,attack,14,10,10000,0,0,yes,target,always,0,,,,,,,"; 

----------------------------------------

*delmobskill <GID>,<����ID>;

��ָ��GID��ħ��ɾ������, ħ��ӵ�е�ָ�����ܶ��ᱻɾ��

�������:
����IDΪ0, ��ԭħ��Ϊԭ��ļ����б�
����IDΪ1, ��ɾ����ħ������м���

----------------------------------------

*mapcutin "<��ͼ����>","<�ļ���>",<λ��>;

��ָ����ͼ�ϵ�������Ҷ���ʾͬһ����Ƭ, �����ο� cutin

----------------------------------------

*end2;

ֻ�����ű���Ӱ��NPC�Ի����̵�

----------------------------------------

*battle_check(<GID>,<GID>,<��ϵ����>)

�ж�����GID֮���Ƿ������ṩ�ĵж�/�Ѻù�ϵ

ս����ϵ����:
	BCT_SELF		= 0x010000, ///< �Լ�, �������GIDΪ��ͬʱ, ������
	BCT_ENEMY		= 0x020000, ///< �ж�
	BCT_PARTY		= 0x040000, ///< ����
	BCT_GUILDALLY	= 0x080000, ///< �������ѹ�ϵ, ����ͬ����
	BCT_NEUTRAL		= 0x100000, ///< ����
	BCT_SAMEGUILD	= 0x200000, ///< ͬ����, �ǹ�������

	BCT_GUILD		= BCT_SAMEGUILD|BCT_GUILDALLY,	///< �����Ա������
	BCT_NOGUILD		= BCT_ALL&~BCT_GUILD,			///< �ǹ���ͬ��
	BCT_NOPARTY		= BCT_ALL&~BCT_PARTY,			///< �Ƕ���
	BCT_NOENEMY		= BCT_ALL&~BCT_ENEMY,			///< �ǵж�

����ֵ:
  ���� 0 �������κι�ϵ, ������ΪĿ��(�� ��Һ�NPC ħ���ħ��֮��), 
  ���� 1 ��ϵ����
  ���� -1 ��ϵ������

----------------------------------------

*instance_addmap(<"��ͼ����">{{,<�Ƿ���NPC>},<����ID>});

�ڸ��������������ͼ, �����в���ͬʱ��������ͬ���ĵ�ͼ, ����ɾ��������ͼ�����¼���

�Ƿ���NPC: (Ĭ�ϸ���)
	Ϊ 1 ʱ ���� 
	Ϊ 0 ʱ ������

����ֵ:
	�ɹ����� 1 ʧ�ܷ��� 0
	
----------------------------------------

*instance_delmap(<"��ͼ����">,<����ID>);

ɾ���������Ѵ��ڵĵ�ͼ

����ֵ:
	�ɹ����� 1 ʧ�ܷ��� 0

----------------------------------------

*itemlist <��Ʒ����>{,<��ɫID>};

����һ����Ʒѡ���, ����ѡ�е���ƷID, ʧ�ܷ��� 0 

----------------------------------------

*skilllist <��������>{,<��ɫID>};

����һ����Ʒѡ���, ����ѡ�еļ���ID, ʧ�ܷ��� 0

----------------------------------------

*getconstantstr <"����ǰ׺">,<����ֵ>;

ͨ����ֵ��ȡ�������ַ���, �ӳ���ǰ׺�������ӻ�ó����ַ�����׼ȷ��

��:
	dispbottom getconstantstr("b",2010); // ��� bUnbreakableHelm

����ֵ:
	�ɹ����س����ַ���, ʧ�ܷ��ؿհ��ַ���

----------------------------------------

*next_dropitem_special <��������>,<ֵ>;
*next_dropitem_special <��Ʒ������>,<����ʱ��>,<����⻷��ɫ>;

��һ�ε����ڵ��ϵ���Ʒ, �ᰴ�ձ����趨������Ҫ�����
����Һ�ħ�����ͬ����Ч, ���ֻ��� makeitem��makeitem2��makeitem3 ��Ч, ���ڴ�ָ���½�����ʹ��makeitem

��������:
	DROP_BOUND         ������
	DROP_EXPIRE        ����ʱ��, ��λ��
	DROP_DROPEFFECT    ����⻷��ɫ
	DROP_BINDCHAR      ����󶨽�ɫ, ֻ�иý�ɫ��ʾ�˵���
	DROP_BINDPARTY     ����󶨶���, ֻ�ж����Ա��ʾ�˵���
	
��Ʒ������:
	ʰȡ�󽫱����ƽ��׵�, ����������Ϊ DROP_BOUND ��ʹ��������Ʒ������.
	BOUND_ACCOUNT	- �˺Ű� 
	BOUND_GUILD 	- ����� 
    BOUND_PARTY		- ����� 
	BOUND_CHAR		- ��ɫ��
	
����⻷��ɫ:
	// -1 - Ĭ�Ϲ⻷
	//  0 - �޹�Ч
	//  1 - �ͻ��˶���Ĺ�Ч
	//  2 - ��ɫ���ε����Ч
	//  3 - ��ɫ���ε����Ч
	//  4 - ��ɫ���ε����Ч
	//  5 - ��ɫ���ε����Ч
	//  6 - ��ɫ���ε����Ч
	
����:
	next_dropitem_special(DROP_DROPEFFECT, 3);
	next_dropitem_special(DROP_BINDPARTY, getcharid(1));
	//next_dropitem_special(DROP_BINDCHAR, getcharid(0));
	makeitem 501,1,"prontera",155,118;
	
----------------------------------------

*unitdefratefixed <GID>,<����>{,<���ʷ�ĸ>{,<��С�˺�>{,<����˺�>}}};

ʹ��Ӧ�Ķ����õ��˺���Ϊ���ʺ���˺�, ��С�˺�������<��С�˺�>, ����˺�������<����˺�> 

��:
	monster "prontera",155,106,"12345",1002,1;
	unitdefratefixed $@mobid[0],1000,10000;

<���ʷ�ĸ> Ĭ�� 100

----------------------------------------

*settitleicon <GID>,<ͼ����ID>,<����>;

ʹĳ��GID��ʾͼ��ͱ���, �����ⵥλ����Ч
�������ʱ����������ʾͼ��, ָ��������ε�����������Ϣ
����������λʱ, ��������������ʾ���������, ���������ʾ����

---------------------------------------

*setinventoryinfo <����λ�����>,<Ҫ���õ�����>,<Ҫ���õ�����>{,<��ɫID>};
*setequipedinfo <װ��λ�ñ��>,<Ҫ���õ�����>,<Ҫ���õ�����>{,<��ɫID>};

�ı䱳���е���Ʒ/װ����Ӧ������, ��ָ��ָ������/װ���� <Ҫ���õ�����> �ı�Ϊ <Ҫ���õ�����>
ע��!! ������ö�������, ��������ʹ��ָ��, ������ܻ��������ʧ�ܵ�����
ע��!! ������ɺ󲻻������ı䱳���е�����, ���������ʹ�� setinventorydone��refreshinventory �� refreshequip �Ż���
ע��!! ʹ�� refreshinventory �� refreshequip ��ռ�ô����Ĵ���, ����������߱����ʹ�� setinventorydone �ȴ�������Ʒ�����ɺ�ͳһˢ�±���

Ҫ���õ�����:
	0 	- ��Ʒ���
	1 	- �ѵ�����
	2 	- װ���Ĵ���λ��(���Ϊ 0 ���ʾ��û����������, λ����ο� EQP_* ��ͷ�ĳ���)
	3 	- ����ֵ
	4 	- �Ƿ��Ѿ�����(1Ϊ�Ѽ���, 0Ϊδ����)
	5 	- ����(˵������, ��ʵ����������ж���Ʒ�Ƿ���, �����򷵻�1, û���򷵻� 0)
	6 	- ��һ�����۵Ŀ�Ƭ���
	7 	- �ڶ������۵Ŀ�Ƭ���
	8 	- ���������۵Ŀ�Ƭ���
	9 	- ���ĸ����۵Ŀ�Ƭ���
	10	- ����ʱ��(Unixʱ���, 0 ��ʾ��������)
	11	- ������
	12	- װ����Ψһ���(unique_id)
	13	- װ���Ļ�װ����λ��(equipSwitch)
	14	- װ���ĸ�ħ�ȼ�(enchantgrade)
	16  - �Ƿ�����ղ�.
	
������Ʒ�� ������Ϣ ��ʽ����:
	������ʽ: setinventoryinfo <����λ�����>,<Random Option���>,<id>,<value>,<param>{,<��ɫID>};
	������ʽ: setequipedinfo <װ��λ�ñ��>,<Random Option���>,<id>,<value>,<param>{,<��ɫID>};
	
---------------------------------------

*setinventorydone {<����λ�����>{,<��ɫID>}};
*setequipeddone {<װ��λ�ñ��>{,<��ɫID>}};

��� setinventoryinfo �� setequipedinfo �����ĵ��߱��

ע��!! ��ָ�����ˢ�±���, ��Ҫ���� refreshinventory �� refreshequip

---------------------------------------

*refreshinventory {<����λ�����>{,<��ɫID>}};
*refreshequip {<װ��λ�ñ��>{,<��ɫID>}};

ˢ�±����е�����, ������ṩ����, ��ˢ�����е�����.

������� setinventoryinfo �� setequipedinfo ˢ��ʧ�ܵ�����, ��ȥ�����������ˢ��һ�顣

---------------------------------------

*getskillinfo <����>,<����ID>{,<��������>};

��ȡ������Ϣ

����:
��ȡָ�������ڼ������ݿ��������õĸ�����Ϣ

��ѯ����Ϣ����:
	SKI_NAME
		Aegis ����, ��Ӧ skill_db.yml �е� Name �ֶ�
		
	SKI_DESCRIPTION
		��������, ��Ӧ skill_db.yml �е� Description �ֶ�
		
	SKI_SKILLTREE_MAXLEVEL
		ָ��ְҵ�ļ������иü��ܵ����ȼ� <��������> �д���Ҫ��ѯ��ְҵ����
		
	SKI_TYPE
		�˺�����, ��Ӧ skill_db.yml �е� Type �ֶ�
		����ǰ׺: BF_
		
	SKI_HIT
		��������, ��Ӧ skill_db.yml �е� Hit �ֶ�
		����ǰ׺: DMG_
		
	SKI_TARGETTYPE
		Ŀ������, ��Ӧ skill_db.yml �е� TargetType �ֶ�
		����ǰ׺: INF_(?)_SKILL
		
	SKI_ELEMENT
		����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Element �ֶ�
		����ǰ׺: ELE_
		
	SKI_DAMAGEFLAGS
		�Ƿ���ڶ�Ӧ���˺����,  <��������> ������Ҫ�����˺����, ��Ӧ skill_db.yml �е� DamageFlags �ֶ�
		����ǰ׺: NK_
		
	SKI_MAXLEVEL
		���ȼ�, ��Ӧ skill_db.yml �е� MaxLevel �ֶ�
		
	SKI_RANGE
		�ͷž���, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Range �ֶ�
		
	SKI_SPLASHAREA
		���䷶Χ, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� SplashArea �ֶ�
		
	SKI_HITCOUNT
		�������, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� HitCount �ֶ�
		
	SKI_CASTTIME
		�ɱ�ӽ��ʱ��, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� CastTime �ֶ�
		
	SKI_FIXEDCASTTIME
		�̶�ӽ��ʱ��, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� FixedCastTime �ֶ�

	SKI_AFTERCASTACTDELAY
		�����ӳ�, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� AfterCastActDelay �ֶ�
		
	SKI_AFTERCASTWALKDELAY
		��ֱʱ��, <��������> ���뼼�ܵȼ�, ��Ӧ  skill_db.yml �е� AfterCastWalkDelay �ֶ�
		
	SKI_DURATION1
		����ʱ��1, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Duration1 �ֶ�
		
	SKI_DURATION2
		����ʱ��2, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Duration2 �ֶ�
		
	SKI_CASTTIMEFLAGS
		ӽ��ʱ����, ��Ӧ skill_db.yml �е� CastTimeFlags �ֶ�
		����ǰ׺: SKILL_CAST_

	SKI_CASTDELAYFLAGS
		�ӳ�ʱ����, ��Ӧ skill_db.yml �е� CastDelayFlags �ֶ�
		����ǰ׺: SKILL_CAST_
		
	SKI_CASTDEFENSEREDUCTION
		ӽ��ʱ�������ͱ���, ��Ӧ skill_db.yml �е� CastDefenseReduction �ֶ�
		
	SKI_FLAGS
		��Ϣ���, <��������> ����Ҫ���ı������, ������ܴ��иñ�־�򷵻�1 ���򷵻�0
		����ǰ׺: INF2_
		
	SKI_CASTCANCEL
		�Ƿ�ᱻ���, ��Ӧ skill_db.yml �е� CastCancel �ֶ�
		
	SKI_ACTIVEINSTANCE
		ͬʱ������������, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� ActiveInstance �ֶ�
		
	SKI_KNOCKBACK
		���˾���, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Knockback �ֶ�
		
	SKI_COOLDOWN
		��ȴʱ��, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Cooldown �ֶ�
		
	SKI_NONEARNPC_TYPE
		��������Щ NPC ����ʹ��, ��Ӧ skill_db.yml �е� NoNearNPC �ڵ�� Type �ֶ�
		����ǰ׺: SKILL_NONEAR_
		
	SKI_NONEARNPC_ADDITIONALRANGE
		���ܿ����� NPC ����Ҫ��, ��Ӧ skill_db.yml �е� NoNearNPC �ڵ�� AdditionalRange �ֶ�
		
	SKI_COPYFLAGS_SKILL
		�ܷ񱻸���, ��Ӧ skill_db.yml �е� CopyFlags �ڵ�� Skill �ֶ�
		����ǰ׺: SKILL_COPY_
		
	SKI_COPYFLAGS_REMOVEREQUIREMENT
		���ƺ�����ͷ�����, ��Ӧ skill_db.yml �е� CopyFlags �ڵ�� RemoveRequirement �ֶ�
		����ǰ׺: SKILL_REQ_
		
	SKI_UNIT_ID
		���浥λID, ��Ӧ skill_db.yml �е� Unit �ڵ�� Id �ֶ�
		
	SKI_UNIT_ALTERNATEID
		���浥λ��ID, ��Ӧ skill_db.yml �е� Unit �ڵ�� AlternateId �ֶ�
		
	SKI_UNIT_LAYOUT
		���浥λ����, ��Ӧ skill_db.yml �е� Unit �ڵ�� Layout �ֶ�
		
	SKI_UNIT_RANGE
		���浥λ���þ���, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Unit �ڵ�� Range �ֶ�
		
	SKI_UNIT_INTERVAL
		���浥λ���ü��, ��Ӧ skill_db.yml �е� Unit �ڵ�� Interval �ֶ�
		
	SKI_UNIT_TARGET
		���浥λ����Ŀ��, ��Ӧ skill_db.yml �е� Unit �ڵ�� Target �ֶ�
		����ǰ׺: BCT_
		
	SKI_UNIT_FLAG
		���浥λ���ñ��, <��������> ����Ҫ���ı�־����, ������ܴ��иñ�־�򷵻�1 ���򷵻�0
		����ǰ׺: UF_
		
	SKI_REQUIRES_HPCOST
		HP ����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� HpCost �ֶ�
		
	SKI_REQUIRES_SPCOST
		SP ����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� SpCost �ֶ�
		
	SKI_REQUIRES_MAXHPTRIGGER
		HP �ٷֱ�����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� MaxHpTrigger �ֶ�
		
	SKI_REQUIRES_HPRATECOST
		HP �ٷֱ�����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� HpRateCost �ֶ�
		
	SKI_REQUIRES_SPRATECOST
		SP �ٷֱ�����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� SpRateCost �ֶ�
		
	SKI_REQUIRES_ZENYCOST
		Zeny ����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� ZenyCost �ֶ�
		
	SKI_REQUIRES_WEAPON
		��������, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� Weapon �ֶ�
		����ǰ׺: W_
		
	SKI_REQUIRES_AMMO
		��ҩ����, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� Ammo �ֶ�
		����ǰ׺: AMMO_
		
	SKI_REQUIRES_AMMOAMOUNT
		��ҩ��������, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� AmmoAmount �ֶ�
		
	SKI_REQUIRES_STATE
		ʩ�Ż�������, ��Ӧ skill_db.yml �е� Requires �ڵ�� State �ֶ�
		����ǰ׺: ST_
		
	SKI_REQUIRES_STATUS
		״̬�������Ƿ���ڴ���״̬, <��������> ����״̬ID, ��Ӧ skill_db.yml �е� Requires �ڵ�� Status �ֶ�
		
	SKI_REQUIRES_SPIRIT
		������������, <��������> ���뼼�ܵȼ�, ��Ӧ skill_db.yml �е� Requires �ڵ�� SpiritSphereCost �ֶ�
		
	SKI_REQUIRES_ITEMCOST
		��Ʒ����, ��Ӧ skill_db.yml �е� Requires �ڵ�� ItemCost �ֶ�
		���ر���:
			$@skill_requires_itemid[]	������߱��
			$@skill_requires_amount[]	��������ĵ�������
		������ֵ: ����ά��
			
	SKI_REQUIRES_EQUIPMENT
		װ���������Ƿ���ڴ���װ��, <��������> ����װ����ƷID, ��Ӧ skill_db.yml �е� Requires �ڵ�� Equipment �ֶ�
		
���ܱ��:
	������Ҫ��ѯ�ļ��ܱ�� (������ skill_db ��ÿ�����ܵ� Id �ֶ�)
	����: ��ʿ������ܵļ��ܱ���� 5

��������:
	������Ҫ��ѯ�ļ������� (������ skill_db ��ÿ�����ܵ� Name �ֶ�)
	����: ��ʿ������ܵ������� SM_BASH (�ַ�������)

���ܵȼ�:
	�ھ������������������������дҪ��ѯ�ļ��ܵȼ�
	���ֲ�ѯ������ <���ܵȼ�> ���ܻᱻ��������������Ϣ, ����: SKI_MAXLEVEL_IN_SKILLTREE

����ֵ:
	���� <��ѯ����Ϣ����> �Ĳ�ͬ, ����ֵ�ĺ�����в���
	���巵��ֵϸ���Ѿ���������ÿ����ͬ�� <��ѯ����Ϣ����> ˵���ж���
	
	�����ݵ� <��ѯ����Ϣ����>,<���ܱ��>,<"��������"> ��Ч, �򽫱��������� -1


ע��: ��������뼼�ܵȼ�, ���ռ������ȼ�������

---------------------------------------

*getequipinfo {<��ȡ����>};

 ��װ���� item_script ��ʹ�ÿ��Ի��װ���ڱ����е�IDX �� װ��ID

<��ȡ����>:

	- INV_ID   װ��ID
	- INV_IDX  װ���ڱ����е�IDX(Ĭ��)

---------------------------------------

*getcardinfo {<��ȡ����>};

 �ڿ�Ƭ�� item_script ��ʹ�ÿ��Ի�ÿ�Ƭ��װ�������е�IDX �� ��ƬID

<��ȡ����>:
	- INV_ID   ��ƬID
	- INV_IDX  ��Ƭ��װ�������е�IDX(Ĭ��)

---------------------------------------

*getrandomoptinfo(<��ȡ����>);

�ٷ�ָ��, ��鿴 doc\script_commands.txt

---------------------------------------

*mobaggroswitch <GID>,<����״̬>;

�򿪻�ر�ָ��ħ��ĳ��ϵͳ, ��ս������ mob_aggro_all_mob �ر�ʱ��Ч

<����״̬>:
	- 1 ����ħ��ĳ��ϵͳ
	- 0 �ر�ħ��ĳ��ϵͳ

---------------------------------------

*instance_id(<ģʽ>{,<��ɫID>});

��ȡ����ID, ��ͨ����ɫID��ȡ��ɫ�ĸ���ID, ��ģʽΪ IM_NONE ʱ, ���ж�����ģʽ

---------------------------------------

*broadcast_item(<���AID>,<��ƷID1>,<��ƷID2>,<��������>);

����һ����Ʒ�㲥

�������ͣ�
	- 0 �� 1 ���� msgstring.txt �е� 1629 ��
	- 2 ����  msgstring.txt �е� 1870 ��, ��ʱ <��ƷID2> ��Ч

----------------------------------------

*getmapinfo("<��ͼ����>",<����>{,<��ɫID>});

��ȡ��ͼ��ص���Ϣ, ����ͼ����Ϊ "this" ʱ��ʾ��ȡ����(ָ��)������ڵ�ͼ�ĵ�ͼ��Ϣ

����:
	- 1: ��ͼID
	- 2: ��ͼ����
	- 3: ��ͼ�ĸ���ID
	- 4: ��ͼ����
	- 5: ��ͼ����
	- 6: ��ͼħ��ˢ������ (��������, ħ��ID�������������� $@spawn_mobid, $@spawn_amount ��)

----------------------------------------

*getmobspawninfo(<ħ��ID>);

��ȡħ������Щ��ͼ����
	
���ִ�гɹ��Ļ�, �ḳ����������ħ�����ɵ���Ϣ:

	$@spawn_mapname$[]		��ͼ����
	$@spawn_amount[]		��������
	
ָ��ػ�ȡ���ĸ���, �������ĳ�Ա����

----------------------------------------

*getbossinfo({"<��ͼ��>"{,<ħ��ID>}});

��ȡʹ�� boss_monster ��ǩ�ٻ�������ħ�����Ϣ
����ͼ��Ϊ "all" ʱΪ���е�ͼ, "this" ʱΪ����������ڵ�ͼ
	
���ִ�гɹ��Ļ�, �ḳ����������ħ�����ɵ���Ϣ:

	$@boss_gid[]		ħ���gid(��ͨ�� getunitdata ��ȡ������Ϣ)
	$@boss_spawn[]		ħ����������(����, 0 ��ʾ������)
	
��ͨ�� setunitdata �� UMOB_RESPAWN_TICK ��������ħ������ʱ��.
	
ָ��ػ�ȡ���ĸ���, �������ĳ�Ա����

----------------------------------------

*getmapspawns "<��ͼ����>"{,<����>{,<��ɫ���>}};

��ȡָ����ͼ��ħ��ˢ�µ���Ϣ ����ͼ����Ϊ "this" ʱ��ʾ��ȡ����(ָ��)������ڵ�ͼ�ĵ�ͼ��Ϣ

��Ϣͨ���������ء�

����: ��ÿ�λ�ȡ�嵥�����д����ı�������ֵ, �������ûᵼ�·�������������, 
      �����ӷ�������, ��ͨ�� | ���� ���� �ӷ����� ���ض�������
	  
	- SPA_NONE       ����ȡ��Ϣ, ֻ���� $@spawn_count ˢ�µ�����
	- SPA_ID         ħ���� - $@spawn_mobid[]
	- SPA_NAME       ħ������ - $@spawn_name$[]
	- SPA_NUM        ˢ������ - $@spawn_num[]
	- SPA_ACTIVE     �������� - $@spawn_active[]
	- SPA_SIZE       ħ������ - $@spawn_size[]
	- SPA_ISBOSS     �Ƿ�ͨ�� boss_monster �ٻ� $@spawn_isboss[]
	- SPA_DELAY1     �̶�ˢ�¼�� - $@spawn_delay1[]
	- SPA_DELAY2     ����ˢ�¼�� - $@spawn_delay2[]
	- SPA_AI         AIģʽ - $@spawn_ai[]
	- SPA_LEVEL      ħ��ȼ� - $@spawn_level[]
	- SPA_EVENT      �����¼� - $@spawn_eventname$[]
	- SPA_MAPID      ���ڵ�ͼ��� - $@spawn_mapid[]
	- SPA_MAPNAME    ���ڵ�ͼ���� - $@spawn_mapname$[]
	- SPA_MAPX       ˢ������ x - $@spawn_map_x[]
	- SPA_MAPY       ˢ������ y - $@spawn_map_y[]
	- SPA_MAPXS      ˢ�·�Χ���� xs - $@spawn_map_xs[]
	- SPA_MAPYS      ˢ�·�Χ���� ys - $@spawn_map_ys[]
	- SPA_ALL        ��ȡ����(Ĭ��)
	
���� SPA_AI �е� AIģʽ:
��Ϊ -1 ��ʾĬ�� AI ģʽ, ͨ�����ܵķ���ֵ��:
	AI_NONE
	AI_ATTACK
	AI_SPHERE
	AI_FLORA
	AI_ZANZOU
	AI_LEGION
	AI_FAW
	AI_GUILD
	
��: ��ȡħ���š������̶�ˢ�¼��
	getmapspawns strcharinfo(3),SPA_ID|SPA_NUM|SPA_DELAY1;
	
	����ֵ�� $@spawn_count ����ħ��ˢ�ֵ�����.

����ֵ:
	�ɹ��򷵻��ҵ���ˢ�µ�����, ʧ���򷵻� -1

--------------------------------------------------------------

*getmobspawns <ħ����>{,<����>{,"<��ͼ����>"{,<��ɫ���>}}};

��ȡָ��ָ��ħ���ڲ�ͬ��ͼ��ˢ�µ���Ϣ ����ͼ����Ϊ "this" ʱ��ʾ��ȡ����(ָ��)������ڵ�ͼ�ĵ�ͼ��Ϣ

��Ϣͨ���������ء����ر�����鿴�ű�ָ�� getmapspawns 

����ֵ:
	�ɹ��򷵻��ҵ���ˢ�µ�����, ʧ���򷵻� -1

--------------------------------------------------------------

*checktrade({<��ɫID>});

�������Ƿ����ڽ���, �����ؽ��׶Է��� AID

----------------------------------------

*checkcashshop({<��ɫID>});

�������Ƿ�����ʹ�� cashshop �ֽ��̳�

----------------------------------------

*checkmailwriting({<��ɫID>});

�������Ƿ�����д�ʼ�

----------------------------------------

*checkrefineui({<��ɫID>});

�������Ƿ�����ʹ�þ���UI

----------------------------------------

*unitaura <GID>,<��ЧID>{,<���ʱ��>{,<����ʱ��>}};

Ϊָ��ʵ������һ���⻷��Ч, ����Ƕ���Ч��ÿ�����ʱ�䲥��һ����Ч

ʱ����: (Ĭ��: 0)
	����ǳ���һ��ʱ�����ʧ����Ч����Ҫ��д��Чÿ�β��ż��
	
����ʱ��: (Ĭ��: -1, ������Ч)
	Ϊ��Ч�Զ��Ƴ���ʱ��, ��ʱ�����Զ�ִ�� unitdelaura ɾ����Ч

----------------------------------------

*unitdelaura <GID>,<��ЧID>;

Ϊָ��ʵ���Ƴ�һ���⻷��Ч
�ڿͻ��˰汾���� 20181002 ��ֱ���Ƴ���Ч

----------------------------------------

*disableontouch "<NPC����>"{,<��ɫID>};
*enableontouch "<NPC����>"{,<��ɫID>};

������ر�NPC�� OnTouch ����, ����Խ�ɫʹ��
��ָ�� ���� disablenpc enablenpc hideonnpc hideoffnpc cloakonnpc cloakoffnpc ��Ĭ�ϴ�������

----------------------------------------

*setwall "<��ͼ��>",<x>,<y>,<����>,<�Ƕ�>,<�Ƿ���Դ�͸����>,"<ǽ����>"{,<�ٻ�ħ��ID>,"<�ٻ�ħ������>"};
*setwallline "<��ͼ��>",<x0>,<y0>,<x1>,<y1>,<�Ƿ���Դ�͸����>,"<ǽ����>"{,<�ٻ�ħ��ID>,"<�ٻ�ħ������>"};
*setwallcircle "<��ͼ��>",<x>,<y>,<�뾶>,<�Ƿ���Դ�͸����>,"<ǽ����>"{,<�ٻ�ħ��ID>,"<�ٻ�ħ������>"};

�ڵ�ͼ������һ��ǽ, ����ǽ��������ٻ����ܱ�������ħ����Ϊ���

ָ�� setwall Ϊԭ��ָ��
ָ�� setwallline ������ (x0,y0) �� (x1,y1) ��ֱ��, ����, ��ָ����� Bresenham �㷨
ָ�� setwallcircle ������ (x,y) ΪԲ��, ��<�뾶>��Բ, ��ָ����� Bresenham �㷨

�����ɸ���ʱ, ����Դ��ͼ�������ǽʱ, ǽ���Ա����Ƶ�������, �����е�ǽ����ͨ�� delwall ɾ��
��ָ����Ż�, �����ڸ���������ʹ��, ��ִ�� @reloadscript ǽ�ᱻ�ͷ�ͨ�� OnInit ���»�ǽ, �����е�ǽҲ�ᱻ����

----------------------------------------

*delwall "<ǽ����>"{,<����ID>};

ͨ��ǽ����ɾ��ǽ, ��ɾ�������е�ǽʱ, ������븱��ID

----------------------------------------

*checkwall "<ǽ����>"{,<����ID>};

��ѯǽ�Ƿ����, ����ѯ�����е�ǽʱ, ������븱��ID

----------------------------------------

*delwallmap "<��ͼ��>";

ɾ����ͼ�ϵ�����ǽ

----------------------------------------

*getlinexy <x0>,<y0>,<x1>,<y1>,<����x��������>,<����y��������>;

������� (x0,y0) �� (x1,y1) ֱ���ϵ�����, ������<����x��������>,<����y��������>��
----------------------------------------

*getcirclexy <x>,<y>,<�뾶>,<����x��������>,<����y��������>;

������� (x,y) ΪԲ��, ��<�뾶>Բ������, ������<����x��������>,<����y��������>��

----------------------------------------

*array_keys <����>,<��������>;

��ȡ����������ֵ��0(�ǿ��ַ���)�ļ�, ����������ָ����������, ��Ҫ��������ҵ�aid��cid��Ϊ��ֵ������(.@damage[getcharid(0)] += 100)

ʲô�Ǽ�? 
	�������[��] = ֵ; ���м����������иĵ�����

��: 
	.@test[5] = 1;
	.@test[3] = 2;
	.@test[1024] = 9918;
	.@test[789523] = 12345678;
	array_keys .@test,.@idx;
	for (.@i = 0; .@i < getarraysize(.@idx); .@i++)
		dispbottom "key: "+.@idx[.@i]+" value: "+.@test[.@idx[.@i]];
	// ���:
	// 	key: 5 value: 1;
	// 	key: 3 value: 2;
	// 	key: 1024 value: 9918;
	// 	key: 789523 value: 12345678;
	
����ֵ: 
	��ȡ����������

----------------------------------------

*getarrayindex <����>;

��ȡ��������е� key ֵ, һ�����ں��������л�ȡ���� getarg() ��Դ�����������е�����

ʲô�Ǽ�? 
	�������[��] = ֵ; ���м����������иĵ�����

����:
	getarrayindex(.@foo[42]); // 42
	
	getindex(.@foo[36]);
	function	script	getindex	{
		getarrayindex(getarg(0)); // 36
	}

----------------------------------------

*countnameditem(<��ƷID>, "<��ɫ��>")
*countnameditem(<��ƷID>, <��ɫID>)
*countnameditem("<��Ʒ��>", "<��ɫ��>")
*countnameditem("<��Ʒ��>", <��ɫID>)

��ȡ�����ж��ٸ�������Ʒ, ����ο� getnameditem. 

---------------------------------------

*getguildinfo(<��Ϣ����>{,<����ID>})
*getguildinfo(<��Ϣ����>{,"<��������>"})

��ȡָ�����͵Ĺ����������

<��Ϣ����>:
	GUILDINFO_NAME          - ��������
	GUILDINFO_ID            - ����ID
	GUILDINFO_LEVEL         - ����ȼ�
	GUILDINFO_EXP           - ���ᾭ��
	GUILDINFO_NEXT_EXP      - ������һ�������ľ���
	GUILDINFO_SKILL_POINTS  - ����ʣ�༼�ܵ���
	GUILDINFO_ONLINE        - ������������
	GUILDINFO_AV_LEVEL      - �����Աƽ���ȼ�
	GUILDINFO_MAX_MEMBERS   - ��������Ա��
	GUILDINFO_MASTER_NAME   - ����᳤����
	GUILDINFO_MASTER_CID    - ����᳤��ɫID

����:
	getguildinfo(GUILDINFO_MASTER_NAME, getcharid(2, "Haru"))

---------------------------------------

*gettimer(<����>{,<��ɫID>{,"<�¼�>"}})

������ addtimer() ���������ʱ�ӵ������Ϣ. ���δָ���¼���Ϊ�����¼�

<����>:
	TIMER_COUNT       - ����ж��ٸ� "<�¼�>" ��ص�ʱ��.
    TIMER_TICK_NEXT   - ��Ҵ�����һ�� "<�¼�>" ���ж��ٺ���.
    TIMER_TICK_LAST	  - ��Ҵ������һ�� "<�¼�>" ���ж��ٺ���.

---------------------------------------

*setnpcdistance(<����>)

ָ����Ҿ���뿿��NPC���ٸ�֮�ڲſ��Ե��, һ��ʹ���� OnInit �¼�������.

����:
	OnInit:
		setnpcdistance(1);

---------------------------------------

*getdatatype(<����>)

���ظ���<����>��ԭʼ����. ���ص���������������.

��������:
	DATATYPE_NIL
	DATATYPE_STR
	DATATYPE_INT
	DATATYPE_CONST
	DATATYPE_PARAM
	DATATYPE_VAR
	DATATYPE_LABEL

����:
	getdatatype() // DATATYPE_NIL
	getdatatype("foo") // DATATYPE_STR
	getdatatype(@foo$) // (DATATYPE_VAR | DATATYPE_STR)

---------------------------------------

*tostring(<����>)

�������Ĳ���ת��Ϊ�ַ�������.

����:
	tostring(DATATYPE_VAR) // "DATATYPE_VAR"
	tostring(.@foo) // ".@foo"
	
---------------------------------------

*chr(<����>)

����������Ӧ�� ASCII �ַ�.

����:
    chr(99); //returns "c"

---------------------------------------

*ord(<�ַ�>)

�����ַ���Ӧ�� ASCII ��ֵ.

����:
    ord("c"); //returns 99

---------------------------------------

*log10(<��ֵ>)

���ش�����ֵ log 10 �Ľ��.

����:
	.@i = log10(100); // 2

---------------------------------------

*swap(<����>,<����>)

��������������ֵ, ���߱���ͬʱΪ�������ַ�������.

����:
	.@var1 = 111;
	.@var2 = 222;
	swap(.@var1, .@var2);
	mes("var1 = "+ .@var1); // return 222
	mes("var2 = "+ .@var2); // return 111

---------------------------------------

*unitiswalking({<GID>})

ָ����һ����λ�Ƿ�������. ʡ�� GID ��Ϊ�������

����ֵ:
	1 Ϊ��������, 0 Ϊû������

---------------------------------------

*mercenary_delete({<��ɫID>,<�ҳϸ���>})

ɾ��ָ����ҵ�Ӷ��.

�ҳϸ���:
    0 - Ӷ���ҳ����� 1�������ں�ͬ���� (Ĭ��).
    1 - Ӷ���ҳϽ��� 1��������Ӷ������.
	2 - Ӷ���ҳϲ���.

---------------------------------------

*msgtable(<��ϢID>{,<��ɫ����>})

��ʾһ�� msgtable.txt �е��ַ���

��ɫ����:
	COLOR_DEFAULT       - Ĭ��
	COLOR_RED           - ��ɫ
	COLOR_WHITE         - ��ɫ
	COLOR_YELLOW        - ��ɫ
	COLOR_CYAN          - ��ɫ
	COLOR_LIGHT_GREEN   - ǳ��

---------------------------------------

*monster     "<��ͼ��>",<x>,<y>,"<��ʾ����>",<ħ��ID>,<����>{,"<����������ǩ>",<���ʹ�С>,<ħ��ai>};
*areamonster "<��ͼ��>",<x1>,<y1>,<x2>,<y2>,"<��ʾ����>",<ħ��ID>,<����>{,"<����������ǩ>",<���ʹ�С>,<ħ��ai>};
*bg_monster <ս������>,"<��ͼ��>",<x>,<y>,"<��ʾ����>",<ħ��ID>��"<����������ǩ>";
*tribe_monster <��Ӫ���>,"<��ͼ����>",<x>,<y>,"<ħ������>",<ħ��ID>,"<����������ǩ>";
*guardian "<��ͼ��>",<x>,<y>,"<��ʾ����>",ħ��ID>{,"<����������ǩ>"{,<guardian index>}};

��ͨ�� playerattached �ж��Ƿ������ɱ����ħ�

�¼����ر���:
	
	ע��: ���¼������������������ʱ���Ŷ�, ��������ҹ���ʱʹ��ȫ�ֱ�������ֵ�ᱻ������ɱ����, 
	����㿪���� disable_mobdead_queue ��������Ǵ��������ֱ��ʹ��ȫ�ֱ���
	
	��������ɱ��, �򷵻�:
		killedgid			��ɱ��ħ���GID
		killedrid			��ɱ��ħ���ħ����(MobID)
		killerrid			ɱ��ħ���ʵ��GID
	
	�����ħ��ɱ��, �򷵻�: 
		$killedgid			��ɱ��ħ���GID
		$killedrid			��ɱ��ħ���ħ����(MobID)
		$killerrid			ɱ��ħ���ʵ��GID

---------------------------------------

*dual_weapon <����>{,<��ɫID>};

�������˫������, ���������˫�ֺ�, ����ر����βŻ�ȡ�����˫��.

<����>: 
	1Ϊ�� 0Ϊ��

----------------------------------------

*inventory_mark <����>{,<����>};

��һ����Ʒ���ӱ��, ��ָ��������Ʒ�ű�����Ƭ�ű���������Խű���, ָ��ֻ���ڱ����Ʒ, ���߼��ж���Ч��
��ָ�����ڿ�Ƭʱ, ����ÿ�Ƭ��װ�����д��б���е�Ч��

����: 
	EquipLoc           ����װ������λ��, <����> Ϊ����λ��
	EquipBound         ����װ��������, <����> Ϊ������ (BOUND_NONE BOUND_ACCOUNT BOUND_GUILD BOUND_PARTY BOUND_CHAR)
	EquipInvalid       ��Чװ��ָ������, <����> ��Ч
	EquipIgnoreScript  �Ƴ�װ���ű�����, <����> ��Ч
	EquipIgnoreClass   �Ƴ�װ��ְҵ����, <����> ��Ч

----------------------------------------

*itempreview <����λ�����>;

ˢ�����ڴ��������Ʒ˵��
��ָ��ֻ���ڿͻ��˰汾���� 20170726 ֮��İ汾����ʹ�� 

----------------------------------------

*getskillsc(<����ID>);

��ȡ����ʹ�ú����Ҹ��ӵ�״̬ID, ������BOT��ص�״̬����

----------------------------------------

*pctalk <GID>,<����>,"<��Ϣ����>"{,<˽����ҽ�ɫID>};

����һ��������Ϣ��ָ��Ŀ���Ⱥ��

<����>
	PKL_PUBLIC  - ��������
	PKL_PARTY   - ���鷢��
	PKL_GUILD   - ���ᷢ��
	PKL_WHISPER - ˽�����(��ұ�������)

----------------------------------------

*pcjoinchat <GID>{,<��ɫID>};

����һ����ָ��GID����һ�NPC��ص�������

----------------------------------------

*unitblown <GID>,<����X>,<����Y>{,<�Ƿ���>};

�ƶ����嵽ָ��������, �ƶ����ʱû�к����Ĵ��Ͷ���, �ƶ������м��·��, ����ǽ���ƶ�ʧ��

�Ƿ���:
	�Ƿ�������ƶ���Ŀ����·��(Ĭ��: 2)
	1 - A*����Ƿ����ƶ����յ�
	2 - �򵥼��
	3 - ������
	
----------------------------------------

*unitmove <GID>,<����X>,<����Y>;

�ƶ����嵽ָ��������, �ƶ����ʱû�к����Ĵ��Ͷ���, �����κμ��, ���������ƶ����޷��ƶ�������
��ħ���ƶ����޷��ƶ��ĸ���ʱ, ���Ƚ�ֹ���ƶ�, �����ƶ��㹻����������˻ᱨ��

----------------------------------------

*refineui_result <����λ�����>,<��������>,<������ȼ�>;

ָ�������Զ��徫��UI, ���ž�������, ���޸���Ʒ����ֵ

��������:
	0 - �����ɹ�
	1 - ����ʧ��, װ����ʧ
	2 - ����ʧ��, ��������
	3 - ����ʧ��, ������������ף������
	
ע��: 
	1 - �� OnPCRefineUIFilter �¼�����Ϻ�ſ���ʹ�ø�ָ��
	2 - �����ɹ�����ʧ��, ���Ὣ��Ʒ�����ȼ�ֱ������Ϊ <������ȼ�>
	3 - �˾����������κε���, ��ʹ�� delitem ɾ����������

----------------------------------------

*getitemcombo(<��ƷID>,<����>,<��������>{,<��ɫID>});

������Ʒ���󶨵���װ����

ע��:
	��ָ������÷�������, ���ڴ��뷵������ʱ���ø�����

����ֵ:
	���������������Ʒ����
	
����:
	// ��������ƷIDΪ24090�󶨵�������װЧ��
	while(getitemcombo(24090, .@idx++, .@combo)){
		.@combo_str$ = "";
		for (.@i = 0; .@i < getarraysize(.@combo); .@i++)
			.@combo_str$ += ""+.@combo[.@i]+":";
		dispbottom .@combo_str$;
		runcomboscript .@combo;
		deletearray .@combo;
	}

----------------------------------------

*runcomboscript <��װ����>{,<��ɫID>};

������װ�������������װЧ��

����ֵ:
	���гɹ����� 1 ʧ�ܷ��� 0

����:
	setarray .@combo[0],24090,24091,24092;
	runcomboscript .@combo;
	
----------------------------------------

*clearselllist;

��ָ��Ϊ bartershop ��Ʒ�һ�֧��ָ��, ��������б�, ���ڶ�̬�޸� bartershop�б�ʹ��

��Ŀǰ�ض��ű��޷����ýű����ص��̵��б�, һ���������̵����ʱ����һ��, Ȼ�����µ��ý��ű�ָ��뷷���б�

----------------------------------------

*startsellitem <��ƷID>,<����>{,<�۸�>};

��ָ��Ϊ bartershop ��Ʒ�һ�֧��ָ��, Ϊ�һ��̵�����һ���ɶһ�����, �����һ��̵����ڱ༭״̬

����:
	������Ϊ -1 ʱΪ���޶һ������̵�
	
----------------------------------------

*sellitemcurrency <��ƷID>,<����>{,<�����ȼ�>};

��ָ��Ϊ bartershop ��Ʒ�һ�֧��ָ��, Ϊ�һ���Ʒ����һ���������, ֻ���ڶһ��̵괦�ڱ༭״̬ʱʹ��
	
----------------------------------------

*endsellitem;

��ָ��Ϊ bartershop ��Ʒ�һ�֧��ָ��, ��ɶһ���������, �����������ӵı༭״̬

----------------------------------------

*bartershop {<NPC ID>{,<��ɫID>}};

Ϊָ����ɫ����һ���һ��̵�UI

����:
	// ʹ�� ��ɫҩˮx2 ��ɫҩˮx4 ��ɫҩˮx8 �� 100000Z �һ�һ�Ų�����Ƭ 
	prontera,156,116,0	script	test	56,{
		bartershop;
		end;
	Oninit:
		clearselllist;
		startsellitem 4001,-1,100000;
		sellitemcurrency 501,2;
		sellitemcurrency 502,4;
		sellitemcurrency 503,8;
		endsellitem;
		startsellitem 1201,-1,100000;
		sellitemcurrency 501,1;
		sellitemcurrency 502,2;
		sellitemcurrency 503,3;
		endsellitem;
	}


��չ:	����NPC�һ��̵����ֱ��ͨ���̵�ģʽ��һ���һ��̵�
		���׶һ��̵�ֻ��ͨ��һ����Ʒ�һ���һ����Ʒ

����NPC�һ��̵�����: 50����ɫҩˮ�һ�һ�Ų�����Ƭ.....
	prontera,156,118,0	bartershop	���׶һ��̵�	65,4001:501:50,4002:502:50,4003:503:50

----------------------------------------

*query_sql_asyn("<SQL�ű�>"{,<����>{,<����>{,...}}});

�÷�ͬ query_sql ����sqlָ��ʱ���Ῠ������, ��������ѯ����ִ��, ����Ŷ����β�ѯ

----------------------------------------

*whodrops(<��ƷID>,<ħ������>,<��������>{,<��ɫID>});

ָ�����ڷ��ص���ָ����Ʒ��ħ��͸���, Ĭ��ֻ�ܷ���5��, �뷵�ظ���������ҳ�������޸�'�����Ʒ������������'
ħ������������������ڱ��淵�ص�����, ��������ɫID����ݽ�ɫID���еȼ�����

��:
	.@count = whodrops(507,.@mobid,.@chance);
	for(.@i = 0; .@i < .@count; .@i++)
		dispbottom ""+.@mobid[.@i]+": "+.@chance[.@i];

����ֵ:
	���ع��ж���������

----------------------------------------

*pet_return_egg {<��ɫID>};

������ظ��ɵ�״̬
	
----------------------------------------

*petbirthbyidx <���ﵰλ�ñ��>{,<��ɫID>};

ֱ�ӷ��������еĳ��ﵰ, ���س���� GID, �ɶԳ���ֱ�Ӳ���
	
----------------------------------------

*boss_monster "<��ͼ��>",<x����>,<y����>,"<ħ����>",<ħ��ID>,<��������>{,"<���������¼�>",<���ʹ�С>,<AI>};

����һ��ħ��, ʹ�����ͨ��BOSS�״￴��..
		
----------------------------------------

*unitaddevent <GID>,<�¼�����>,"<�¼�����>";

��GID��Ӧ��ʵ������һ���¼�, ������������¼����������ر���

�¼�����:
	EVE_DEAD         - ��ʵ�������󴥷�
		���ر���: $killedgid
		
	EVE_REMOVE       - ��ʵ�屻�Ƴ��󴥷�
		���ر���: $killedgid
	
	EVE_SKILLFILTER  - ��ʵ�忪ʼ�ͷż���ʱ����, �жϺ���ʹ��ʧ��
	EVE_SKILLEVENT   - ��ʵ������ͷż���ʱ����
		���ر���: $useskill_src �ͷż��ܶ����GID
				  $useskill_id ����ID
				  $useskill_lv ���ܵȼ�
				  $useskill_target Ŀ��GID
				  $useskill_x Ŀ������x ����ǵ��弼���򷵻�Ŀ���x����
				  $useskill_y Ŀ������x ����ǵ��弼���򷵻�Ŀ���y����
		
----------------------------------------

*unitdelevent <GID>,<�¼�����>;
*unitdelevent <GID>,"<�¼�����>"

�Ƴ���Ӧ�¼�

----------------------------------------

*announce_name "<�����>","<������Ϣ>"{,"<��ɫ����>"{,<����Ⱥ��>}};

����һ������ͨ��˫��������Ϳ��Խ���˽�ĵ���Ϣ. һ��������չ'������'���߻�㲥, ���㷢����Ϣ�����˽��.
��ͨ������Ⱥ���ָ�����͸���Ҷ�Ӧ�Ķ��顢���ᡢBG��.

��ɫ����:
	ΪRGB��ɫ���� Ĭ��Ϊ FFFF00 ��ɫ, ע����ɫ����Ϊ�ַ��� "FFFF00", "101010" ���ָ�ʽ.
	
����Ⱥ��:
	ALL_CLIENT     - ȫ���������(Ĭ��)
	ALL_SAMEMAP    - ���ڵ�ͼ�ϵ��������
	AREA           - ���ӷ�Χ�ڵ��������
	PARTY          - �����Ա
	PARTY_SAMEMAP  - ͬ��ͼ�����Ա
	PARTY_AREA     - ���ӷ�Χ�ڶ����Ա
	GUILD          - �����Ա
	GUILD_SAMEMAP  - ͬ��ͼ�����Ա
	GUILD_AREA     - ���ӷ�Χ�ڹ����Ա
	GUILD_NOBG     - ���ӷ�Χ�ڹ����Ա, �ų�ͬս��
	SELF           - �Լ�
	BG             - ս������
	BG_SAMEMAP     - ͬ��ͼս����Ա
	BG_AREA        - ���ӷ�Χս����Ա
	CLAN           - �����Ա
	
����:
	input .@megaphone$;
	announce_name strcharinfo(0),strcharinfo(0)+" ����/С����ź�: "+.@megaphone$;

----------------------------------------

*getunitdata <GID>,<�������>;
*getunitdata <GID>,<����>;
*setunitdata <GID>,<����>,<����>;

���/������Ӧ���͵Ĳ���. �ٷ�������鿴 script_commands.txt �е���Ӧָ��.

BetterRA ��������:
	UMOB_ID           ��ȡ/����ħ��ID
	UMOB_BASEEXP      ��ȡ/����ħ���������ֵ
	UMOB_JOBEXP       ��ȡ/����ħ��ְҵ����ֵ
	UMOB_MVPEXP       ��ȡ/����ħ��MVP����ֵ
	UMOB_RESPAWN_TICK ��ȡ/����ħ������ʱ��(����), �����øò���Ϊ 0 ʱ����ˢ��
	UMOB_DAMAGE_TAKEN ��ȡ/����ħ���ܵ��˺��ٷֱ�
	UMOB_BOSSTYPE     ��ȡħ��� BOSS ����, ����ֵ�ο� getmobbosstype ��ֵ�޷�������
	UMOB_RTNIMMUNE    ��ȡ/����ħ��Է����˺�����
	UHOM_RTNIMMUNE    ��ȡ/����������Է����˺�����
	UPET_RTNIMMUNE    ��ȡ/���ó���Է����˺�����
	UMER_RTNIMMUNE    ��ȡ/����������Է����˺�����
	UELE_RTNIMMUNE    ��ȡ/����Ԫ�ضԷ����˺�����

BetterRA �Ż�:
	������ʵ�������һ������ʱ, �����õڶ�������ֱ�Ӵ�������, ָ�ֱ�ӷ��ز�����Ӧ��ֵ
	����: .@maxhp = getunitdata(.GID,UMOB_MAXHP);
	
ע��:
	ͨ�� getunitdata ��ȡ��ֵʱ, ��ʹ�ó�����ȡ������ֵ
	��: getunitdata .GID,.@por_arr;
	    .@damage_token = .@por_arr[UMOB_DAMAGE_TAKEN];

----------------------------------------

*addstoragesize <����ֵ>{,<�ֿ�ID>{,<�˺�ID>}};

���Ӳֿ�����, ������ֵΪ����ʱ, ����ٲֿ�����, ���ֿ�ID��ʹ��ʱ��������Ĭ�ϲֿ�
�ֿ�Ĭ�������� conf/inter_server.yml �� Max ����, ����������ܳ�����ҳ����������'���ֿ�����' (MAX_STORAGE)
Ĭ�ϲֿ����δ�� conf/inter_server.yml ��δ����Ĭ������, Ĭ������������ҳ�����е� '���Ĭ�ϲֿ�����' (MIN_STORAGE)
Ĭ�ϲֿ�������Сֵ����С�� '���Ĭ�ϲֿ�����' (MIN_STORAGE) 
	
----------------------------------------

*unitskilltowide <GID>,<����ID>,<���ܵȼ�>,<��ɢ����>,<��������>,<������Χ>,<������ʱ>;
*unitskilltowide <GID>,"<��������>",<���ܵȼ�>,<��ɢ����>,<��������>,<������Χ>,<������ʱ>;
*unitskilltowide2 <GID>,<����ID>,<���ܵȼ�>,<��ɢ����>,<��������>,<������Χ>,<������ʱ>;
*unitskilltowide2 <GID>,"<��������>",<���ܵȼ�>,<��ɢ����>,<��������>,<������Χ>,<������ʱ>;

�ͷŴ��ģ��ħ������, ��ͨ���С��Χ���������������ɢ�Ӷ�ʵ�ִ�Χ���ܵ�Ŀ��
���ָ��ֻ���ͷŵ��漼��, �����и����ӿ���ֱ�۸���һ�¡�

��ɢ��ʽ(����ѡ��)
	&1 ��-������
	&2 ��-������
	&4 ����-��������
	&8 ����-��������
	
ʵ�ַ�ʽ
	unitskilltowide ��ͨ���ٻ�ħ���ͷż��ܺ�˲��ɾ��ʵ�ֵ�
	unitskilltowide2 ��ͨ�����Ӽ����ͷž���ӽ����, �����ͷ�ʵ�ֵ�
	
��:
	unitskilltowide getcharid(3),21,5,15,2,15,1000;
	sleep2 2000;
	unitskilltowide getcharid(3),21,5,15,2,15,0;
		
----------------------------------------

*unitskilltolinear <GID>,<����ID>,<���ܵȼ�>,<���췽��>,<��չ����>,<��չ����>,<��������>,<������Χ>,<������ʱ>;
*unitskilltolinear <GID>,"<��������>",<���ܵȼ�>,<���췽��>,<��չ����>,<��չ����>,<��������>,<������Χ>,<������ʱ>;
*unitskilltolinear2 <GID>,<����ID>,<���ܵȼ�>,<���췽��>,<��չ����>,<��չ����>,<��������>,<������Χ>,<������ʱ>;
*unitskilltolinear2 <GID>,"<��������>",<���ܵȼ�>,<���췽��>,<��չ����>,<��չ����>,<��������>,<������Χ>,<������ʱ>;

�ͷŴ��ģ��ħ������, ͨ�����С��Χ�����򵥸���������Ӷ�ʵ�ִ�Χ���ܵ�Ŀ��
���ָ��ֻ���ͷŵ��漼��, �����и����ӿ���ֱ�۸���һ�¡�

���췽��:
	DIR_NORTH �� 
	DIR_NORTHWEST ���� 
	DIR_WEST �� 
	DIR_SOUTHWEST ���� 
	DIR_SOUTH �� 
	DIR_SOUTHEAST ���� 
	DIR_EAST �� 
	DIR_NORTHEAST ����
	
��չ����:
	ÿһ�������ں����ϼ���ľ���
	
ʵ�ַ�ʽ
	unitskilltolinear ��ͨ���ٻ�ħ���ͷż��ܺ�˲��ɾ��ʵ�ֵ�
	unitskilltolinear2 ��ͨ�����Ӽ����ͷž���ӽ����, �����ͷ�ʵ�ֵ�

��:
	unitskilltolinear getcharid(3),21,5,DIR_NORTH,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_NORTHWEST,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_WEST,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_SOUTHWEST,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_SOUTH,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_SOUTHEAST,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_EAST,3,5,2,18,100;
	sleep2 1500;
	unitskilltolinear getcharid(3),21,5,DIR_NORTHEAST,3,5,2,18,100;
	sleep2 1500;

----------------------------------------

*unitskilltocircle <GID>,<����ID>,<���ܵȼ�>,<�������>,<��������>,<������Χ>,<������ʱ>;
*unitskilltocircle <GID>,"<��������>",<���ܵȼ�>,<�������>,<��������>,<������Χ>,<������ʱ>;
*unitskilltocircle2 <GID>,<����ID>,<���ܵȼ�>,<�������>,<��������>,<������Χ>,<������ʱ>;
*unitskilltocircle2 <GID>,"<��������>",<���ܵȼ�>,<�������>,<��������>,<������Χ>,<������ʱ>;

�ͷŴ��ģ��ħ������, ͨ�����С��Χ���ܰ���Բ�β����Ӷ�ʵ�ִ�Χ���ܵ�Ŀ��
���ָ��ֻ���ͷŵ��漼��, �����и����ӿ���ֱ�۸���һ�¡�

ʵ�ַ�ʽ
	unitskilltocircle ��ͨ���ٻ�ħ���ͷż��ܺ�˲��ɾ��ʵ�ֵ�
	unitskilltocircle2 ��ͨ�����Ӽ����ͷž���ӽ����, �����ͷ�ʵ�ֵ�

��:
	unitskilltocircle getcharid(3),21,5,3,3,18,500;

---------------------------------------

*unitskilltoarea <GID>,<����ID>,<���ܵȼ�>,<x0>,<y0>,<x1>,<y1>,<�ͷ��ӳ�>,<�ͷ�����>;

�ͷŴ��ģ��ħ������, ͨ�����С��Χ������ָ������������ͷż��ܴﵽ����ħ��Ч��

ʵ�ַ�ʽ
	unitskilltoarea ��ͨ���ٻ�ħ���ͷż��ܺ�˲��ɾ��ʵ�ֵ�
	unitskilltoarea2 ��ͨ�����Ӽ����ͷž���ӽ����, �����ͷ�ʵ�ֵ�

��:
	getmapxy(.@map$,.@x,.@y);
	unitskilltoarea getcharid(3),21,5,.@x-10,.@y-10,.@x+10,.@y+10,100,40;

---------------------------------------

*unitskilltoAOE <GID>,<����ID>,<���ܵȼ�>,<��Χ>{,<�������>};

ָ�����Χ�ĵ���ʹ����ͬ�ļ���, ���ָ��ֻ���ͷ�Ŀ����������
	
---------------------------------------

*instance_srcmapname("<��ͼ����>");

��ȡ������ͼ��Դ��ͼ��

��: instance_srcmapname(strcharinfo(3));

----------------------------------------

*getmapxy("<��ͼ����>",<X�������>,<Y�������>{,<����>,<GID>});

��������֧�� BL_ALL ��ͨ��GID��ȡ��������, BL_ALL ֧��������Ʒ���ͷ�������
֧Ԯͨ��GID��ȡħ�����͵����� 

----------------------------------------

*getunitdata <GID>,<����>;

����ֱ��ͨ������������Ӧ��ֵ, ����Ҫȡ������������, ���ִ��Ч��

����:
	.@GID = monster("this",0,0,"����",1002,1);
	.@mob_id = getunitdata(.@GID,UMOB_ID);
	dispbottom "GID:"+.@GID+" mob_id:"+.@mob_id;
	
---------------------------------------

*hideview <����>{,<��ɫID>};

����������ҵ���ʾͼ��

����:
	1 - ͷ��
	2 - ͷ��
	4 - ͷ��
	8 - ����
	
---------------------------------------

*decision_init "<����������>";

����һ��������, �ýڵ�Ϊ��ʼ�ڵ�, �ڵ����Ƶ��ھ���������.
������������֮ǰ������, ��ʹ�ô�ָ������֮ǰ�����ľ�����.

----------------------------------------

*decision_create_node "<�ڵ�����>","<�����ű�>","<�ӽڵ�����>","<�ӽڵ�󶨵Ľű����¼�>";

Ϊ��������Ӧ�Ľڵ�����һ���ӽڵ�, ������Ϊ decision_init �ľ�����
���ڵ��еĽű�ִ����ɺ�, ���������������Ӧ���ӽڵ�, ��ִ���ӽڵ�󶨵Ľű����¼�, ���ű�ִ����ɺ������һ���ӽڵ�

�����ĸ�����Ϊ�¼�ʱ, ����Ϊ�ѳɹ���������¼�

----------------------------------------

*decision_run "<����������>"{,"<�ӽڵ�����>"{,<�Ƿ��ظ�ִ��>{,<�����ӳ�>{,<��ɫID>}}}};

����һ��������, ���������Զ�������һ�ָ�����, ������Һ�ִ�е������ű���󶨽ű����¼������������

�������������������ʱ, ������ֹͣ����, ��δ��������������� decision_end �Ż����

�ӽڵ�����:
	�����Ӿ�������ĳ���ӽڵ㿪ʼ����, ��ָ���ӽڵ�

�Ƿ��ظ�ִ��:
	�����н������Ƿ���ת��<�ӽڵ�����>��Ӧ�ڵ����ִ��

�����ӳ�:
	ÿ��תһ�����߽ڵ��ӳٶ������ִ��, Ϊ��ֹ����, Ĭ��200����, ��С����100����
	
һ���򵥵Ĳ��Խű�:

prontera,155,80,4	script	����������	758,{
	@hpitem = 501;
	@spitem = 505;
	decision_run "�Զ���ҩ","�Զ���ҩ",1,100;
	end;
	
OnHealHP:
	dispbottom "1234";
	getitem @hpitem, 10;
	decision_back;
	end;
OnGetSPPotion1:
	dispbottom "�ж�����С�� 5, ��� 5 ��";
	getitem @spitem, 5;
	end;
OnGetSPPotion2:
	dispbottom "�ж�����С�� 10, ��� 5 ��";
	getitem @spitem, 5;
	end;
OnInit:
	decision_init "�Զ���ҩ";
	decision_create_node "�Զ���ҩ","countitem(@hpitem) < 1 ","�ж�Ѫҩʣ��","����������::OnHealHP";
	decision_create_node "�Զ���ҩ","countitem(@spitem) < 10","�ж���ҩʣ��","{ dispbottom \"no blue Potion\"; }";
	decision_create_node "�ж���ҩʣ��","countitem(@spitem) < 5 ","�������ǹ���","����������::OnGetSPPotion1";
	decision_create_node "�ж���ҩʣ��","countitem(@spitem) < 10","�������ǹ���","����������::OnGetSPPotion2";
	decision_create_node "�Զ���ҩ","(Hp * 100 / MaxHP) < 80","�жϼ�Ѫ","{ pc_useitem @hpitem; decision_sleep 1000; decision_back; }";
	decision_create_node "�Զ���ҩ","(SP * 100 / MaxSP) < 50","�жϼ���","{ pc_useitem @spitem; decision_back; }";
}

----------------------------------------

*decision_goto "<�ڵ�����>";

��ת����ǰ�������ڵ������ڵ�

----------------------------------------

*decision_back;

���ظ����߽ڵ�

----------------------------------------

*decision_sleep <������>;

��ָͣ��ʱ��, ����ͣ����ͣ����������, sleep sleep2 ��ָ��ʹ�ú������������ͣ

----------------------------------------

*decision_end;

��������������

----------------------------------------

*pc_useitem <��ƷID>{,<��ɫID>};

ʹ������һ�ָ�����ʹ����Ʒ

----------------------------------------

*pc_hasstate <״̬����>{,<��ɫID>};

�ж�����Ƿ����ƶ�/�չ�/�����״̬

״̬����:
	STATE_MOVEING    �����ƶ�
	STATE_ATTACKING  ������ͨ����
	STATE_CASTING    ��������
	
��ʾ:
	��ʹ�� unitstopattack �� unitstopwalk ֹͣ��ͨ����������
	
����ֵ:
	���ش�������, �������򷵻� 0

----------------------------------------

*pc_canstate <״̬����>{,<����һ>{,<��ɫID>}};

�ж�����Ƿ���ƶ�/��ʹ�ü���/���չ�/��ʹ����Ʒ��

״̬����:
	STATE_CANMOVE    �ɷ��ƶ�
	STATE_CANSKILL   �ɷ��ͷż��� (����һ ��Ҫ���뼼��ID)
	STATE_CANATTACK  �ɷ���ͨ����
	STATE_CANUSEITEM �ɷ�ʹ����Ʒ (����һ ��Ҫ������ƷID)
	
����ֵ:
	���ؿ�ʹ��״̬����, �������򷵻� 0

----------------------------------------

*getrunningevent();

��ȡ�������е��¼�����, ���ű����е��¼�����ʱ, ��ʹ�ô�ָ���ȡ�¼�����, ���� function �е���
	
����ֵ:
	�����¼�����
	
----------------------------------------

*strnpcinfo(<����>,{<NPC GID>});

��ԭ��ָ�����������ͨ�� GID ��ȡNPC������
������CopyNpc��Ŀ��donpcevent (�ر���л: Ҷ����)

----------------------------------------

*captcha <"�����">{,<���Դ���>{,<��ʱʱ��(����)>}};
*captcha <�˺�ID>{,<���Դ���>{,<��ʱʱ��(����)>}};

��ָ����ҽ�����֤����֤, �ᵯ����֤��ͼƬ��������֤�������֤.
��֤�����������ӷ�ʽ:
1.rAthena  ���ӷ���ʹ�� db/captcha_db.yml
2.BetterRA ����ֱ�ӽ�bmp�ļ����� db/captcha/�ļ���, �����������Ķ� db/captcha/readme.md

----------------------------------------

*setbossmapicon <ħ���GID>{,<��ʾʱ��(����)>{,<��ɫID>}};

����ħ���GID����һ��BOSSͼ����ʾ��С��ͼ��, ���ԶԷ� boss_master �ٻ���ħ�����ͼ����ʾ
ָ��Խű�������ɫ��ָ����ɫ��Ч, Ĭ����ʾʱ��Ϊ 60 ��.
ע��: �˷���ʹ��ʱ���ڿͻ�����ʾ��ʾ���, ��ͨ����� msgstringtable.txt �˱�ͼ��ֻ����ʾһ�� (�ر���л:  �L)

----------------------------------------

*refreshskilllist {<��ɫID>};

ˢ����ҵļ����б�

----------------------------------------
*setmaxamount <����>{,<�˺�ID>};

�������ÿ����ƷЯ�����������, �ɳ��� 30000, ��������Ʒ������һ����λ��ʾ

---------------------------------------

*zmes1("<�ַ���>")

���������Ļ��Ϊ��ʾһ��NPC�ײ��Ի���
����mesָ�����ʽ��ͬ, ���ڵ��� Zero �ͻ���UI.

����ʹ�ð汾���� 20210721 �� Zero �ͻ���.

---------------------------------------

*zmes2("<�ַ���>")

���������Ļ��Ϊ��ʾһ��NPC���ĶԻ���
����mesָ�����ʽ��ͬ, ���ڵ��� Zero �ͻ���UI.

����ʹ�ð汾���� 20210721 �� Zero �ͻ���.

---------------------------------------

*zselect("<ѡ��>"{, "<ѡ��>", ...})

���� select ָ�����ʽ��ͬ, ���ڵ��� Zero �ͻ���UI.
����ʹ�ð汾���� 20210721 �� Zero �ͻ���.

---------------------------------------

*zprompt("<ѡ��>"{, "<ѡ��>", ...})

���� prompt ָ�����ʽ��ͬ, ���ڵ��� Zero �ͻ���UI.
����ʹ�ð汾���� 20210721 �� Zero �ͻ���.

---------------------------------------

*zmenu("<ѡ��>", <��ǩ>{, "<ѡ��>", <��ǩ>, ...})

���� menu ָ�����ʽ��ͬ, ���ڵ��� Zero �ͻ���UI.
����ʹ�ð汾���� 20210721 �� Zero �ͻ���.

---------------------------------------

*getequipswitchidx(<װ��λ�ñ��>{,{��ɫID}});

��ȡ��ҵĿ����л��б���װ���ڱ����е�λ�ñ��, ��ͨ�� getinventoryinfo ��ȡ��ϸ��Ϣ

----------------------------------------

*getmobbosstype(<ħ��ID>);

ͨ��ħ��ID��ȡħ��� BOSS ����

����ֵ:
	BOSSTYPE_NONE: ��ͨħ��
	BOSSTYPE_MINIBOSS: mini BOSS
	BOSSTYPE_MVP: MVP ħ��

----------------------------------------

*setmobpercentlock(<ħ��GID>,<�ٷֱ���>{,<�¼�����>});

���հٷֱ�����ħ��Ѫ��, ��ħ��Ѫ���޷��������ðٷֱ�������, ����ðٷֱȺ󴥷��¼�, ���¼�ֻ����һ��, �����������뽫�ٷֱ��������趨Ϊ 0

�����¼����ز���:
	$hplockgid ħ���GID, �ɶ�����Ѫ��ħ��������
	
----------------------------------------

*createtemporarypet <����ID>{,<����ȼ�>{,<����øж�>{,<��ɫID>}}},

����һ����ʱ����, �����س����GID, ��ָ��������ﵰҲ�����ٻ���������, ��������� pet_db.yml �ж���.
����ҽ�����ָ�������̬�������Ƴ�ʱ���� OnPetTempRemoveEvent �¼�.
���������¼���ʹ�� unitremove @pet_gid,0; �Ƴ�����, �����������ʱ����ᱻǿ���Ƴ�.
��ӵ����ʱ����ʱ, �޷��ٷ�����������.

----------------------------------------

*mobstickwith <ħ��GID>,<����>;

����ħ���Ƿ���ڳ�����Ұ��Χ���ƶ���ħ�����������, ��ָ��� summon ���� clone ���ٻ�ħ����Ч
ע��: ����ֻ���� monster.conf �е� slave_stick_with_master Ϊ no ��ʱ��Ż���Ч

----------------------------------------

*fileopen("<�ļ�·��>"{,"<��ģʽ>"});

��ָ���һ���ļ�����������ļ����ļ����, �ļ�ʹ����Ϻ�ʹ�� fileclose �ر��ļ�.

��ģʽ:
	"r"		��һ�����ڶ�ȡ���ļ������ļ�������ڡ�
	"w"		����һ������д��Ŀ��ļ�������ļ��������Ѵ��ڵ��ļ���ͬ�����ɾ�������ļ������ݣ��ļ�����Ϊһ���µĿ��ļ���
	"a"		׷�ӵ�һ���ļ���д�������ļ�ĩβ׷�����ݡ�����ļ������ڣ��򴴽��ļ���
	"r+"	��һ�����ڸ��µ��ļ����ɶ�ȡҲ��д�롣���ļ�������ڡ�
	"w+"	����һ�����ڶ�д�Ŀ��ļ���
	"a+"	��һ�����ڶ�ȡ��׷�ӵ��ļ���

----------------------------------------

*filegets(<�ļ����>);

���벢�����ļ��е�һ���ı�, �ļ����ͨ�� fileopen ���.

����:
	.@fp = fileopen("npc/re/scripts_main.conf","r");
	while((.@line$ = filegets(.@fp)) != "eof"){
		debugmes .@line$;
	}
	fileclose(.@fp);

----------------------------------------

*fileread(<�ļ����>);

���������ļ����ҷ����ļ�����, �ļ����ͨ�� fileopen ���.

����:
	.@fp = fileopen("npc/re/scripts_main.conf","r");
	debugmes fileread(.@fp);
	fileclose(.@fp);
	
----------------------------------------

*filewrite(<�ļ����>,"<��д���ı�>");

���ı�д�뵽�ļ���, �ļ����ͨ�� fileopen ���.
	
----------------------------------------

*fileputs(<�ļ����>,"<��д���ı�>");

��һ���ı�д�뵽�ļ���, ���Զ����뻻�з�, �ļ����ͨ�� fileopen ���.
		
----------------------------------------

*fileclose <�ļ����>;

�ر��Ѿ��򿪵��ļ�, �ļ����ͨ�� fileopen ���.
			
----------------------------------------

*getfilepath {<�Ƿ��ȡ����·��>};

��ȡ��ǰ���е� NPC ���� function ��·��.
			
----------------------------------------

*container_loadyaml("<�ļ�·��>");

����һ�� Yaml�ļ�, ������ �������, ��ͨ������� ����������в���, ʹ����ɺ�ͨ�� container_close �رվ��, ���� �������� ��һֱ�������ڴ���.

����:
	.@handle = container_loadyaml("db/re/item_db_equip.yml");
			
----------------------------------------

*container_loadjson("<�ļ�·��>");

����һ�� Json�ļ�, ������ �������, ��ͨ������� ����������в���, ʹ����ɺ�ͨ�� container_close �رվ��, ���� �������� ��һֱ�������ڴ���.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	
----------------------------------------

*container_parse("<�����ı�>");

����һ�� �����ı�(֧�� Json Yaml), ������ �������, ��ͨ������� ����������в���.
ʹ����ɺ�ͨ�� container_close �رվ��, ���� �������� ��һֱ�������ڴ���.
����봴��һ���µ���������ʹ�� container_parse("{}");

����:
	.@handle = container_parse("{StrTest: �����ַ�������,IntTest: 1234567890,Data: {StrArrayTest: {0: s123,1: s234,2: s345},IntArrayTest: {0: 456,1: 567,2: 678},ObjectReturn: [{screen_x: 1920,screen_y: 1080}, {screen_x: 640,screen_y: 480}]},���ļ�: ����ֵ}");
	
----------------------------------------

*container_merge <�������>,"<�ļ�·��>";

����һ���ļ��ϲ���һ���Ѿ��򿪵�������

����:
	.@handle = container_loadyaml("db/re/item_db_equip.yml");
	container_merge(.@handle, "db/re/item_db_etc.yml");
	container_merge(.@handle, "db/re/item_db_usable.yml");
	container_merge(.@handle, "db/import/item_db.yml");
	container_createindex(.@handle,"Body","Id");
	container_createindex(.@handle,"Body","AegisName");
	debugmes container_getstr(.@handle, "Id(501).AegisName");
	debugmes container_getstr(.@handle, "Id(505).Script");
	debugmes container_getstr(.@handle, "Id(717).Buy");
	debugmes container_getstr(.@handle, "Id(1105).AegisName");
	debugmes container_getstr(.@handle, "AegisName(Falchion_).Id");
	// container_close(.@handle); //����������ÿ��Բ��ͷŵ�
	
----------------------------------------

*container_createindex <�������>,"<�ڵ�·��>","<��>";

Ϊһ�������������ͽṹ����һ������, ʹ���������Կ��ٶ�λ����Ҫ���ҵĽڵ�, ����ʹ��ʱ·���ڵ�ͨ��"��(ֵ)"�ķ�������

����:
prontera,155,107,4	script	����	4_M_KID1,{
	debugmes container_getstr($item_db, "Id(501).AegisName");
	debugmes container_getstr($item_db, "Id(505).Script");
	debugmes container_getstr($item_db, "Id(717).Buy");
	debugmes container_getstr($item_db, "Id(1105).AegisName");
	debugmes container_getstr($item_db, "AegisName(Falchion_).Id");
	end;
OnInit:
	// ��Ϊ�ض�֮ǰ����رվ���ͷ�������Ȼ�ɵ��������Ż��������
	// ��������ʱ����($@)����Ϊ�ض��ͷŵ�����ʹ�ó�פ����($)
	container_close $item_db;
	
	$item_db = container_loadyaml("db/re/item_db_equip.yml");
	container_merge($item_db, "db/re/item_db_etc.yml");
	container_merge($item_db, "db/re/item_db_usable.yml");
	container_merge($item_db, "db/import/item_db.yml");
	
	// ���������Ǻ��뼶����, ֻ�м����ļ��Ƚ���
	container_createindex($item_db,"Body","Id");
	container_createindex($item_db,"Body","AegisName");
}

----------------------------------------

*container_getstr(<�������>,"<�ڵ�·��>");

��ȡ��Ӧ�����ڵ��ֵ, ���Զ�ȡ�κ����͵Ľڵ����ݻ�ת�����ı�����, ������������.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	debugmes ""+container_getstr(.@handle, "StrTest"); // ��� "�����ַ�������"
	debugmes ""+container_getstr(.@handle, "Data.StrArrayTest[0][1]"); // ��� "123";
	debugmes ""+container_getstr(.@handle, "Data.ObjectReturn"); // ��� [{"screen_x":1920,"screen_y":1080},{"screen_x":640,"screen_y":480}]
	container_close(.@handle);
	
----------------------------------------

*container_getnum(<�������>,"<�ڵ�·��>");

��ȡ��Ӧ�����ڵ��ֵ, ֻ�ܷ�����������, ����ᱨ��.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	debugmes ""+container_getnum(.@handle, "IntTest"); // ��� "1234567890"
	debugmes ""+container_getnum(.@handle, "Data.ObjectReturn[0].screen_x"); // ��� "1920"
	debugmes ""+container_getnum(.@handle, "Data.ObjectReturn[1].screen_y"); // ��� "480"
	container_close(.@handle);

----------------------------------------

*container_getarray(<�������>,"<�ڵ�·��>",<�洢����ı���>{,<��ɫID>});

��ȡ��Ӧ�����ڵ��е�����, ���Է�������������ַ�������.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	container_getarray(.@handle, "Data.StrArrayTest", .@strtest$);
	container_getarray(.@handle, "Data.IntArrayTest", .@inttest);
	
	for (.@i = 0; .@i < getarraysize(.@strtest$); .@i++)
		debugmes ""+.@strtest$[.@i];
	
	for (.@i = 0; .@i < getarraysize(.@inttest); .@i++)
		debugmes ""+.@inttest[.@i];
	
	container_close(.@handle);

ע��: ���ʹ����ұ�������Ҫ�����ɫID�����ǽ�ɫ�����ű�
	
----------------------------------------

*container_setstr <�������>,"<�ڵ�·��>","<�ı�ֵ>";

д���Ӧ�����ڵ��ַ���ֵ, ֻ�������ַ�������, ����ᱨ��.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	container_setstr(.@handle, "OtherWrite.Str", "�����ı�д��");
	container_setstr(.@handle, "OtherWrite.5[3].10[1]", "����������ṹд��");
	container_save(.@handle, "example2.json"); // �ļ��������ڸ�Ŀ¼��
	container_close(.@handle);
	
----------------------------------------

*container_setnum <�������>,"<�ڵ�·��>",<����ֵ>;

д���Ӧ�����ڵ������ֵ, ֻ��������������, ����ᱨ��.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	container_setnum(.@handle, "OtherWrite.Int", 123456);
	container_save(.@handle, "example2.json"); // �ļ��������ڸ�Ŀ¼��
	container_close(.@handle);

----------------------------------------

*container_setarray(<�������>,"<�ڵ�·��>",<�������>{,<��ɫID>});

д���Ӧ�����ڵ���Ϊ����, ������������������ַ�������.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	setarray .@strtest$,"����","�ı�","����","д��";
	container_setarray(.@handle, "OtherWrite.StrArray", .@strtest$);
	.@inttest[10] = 111222;
	.@inttest[20] = 222333;
	.@inttest[30] = 333444;
	.@inttest[40] = 444555;
	container_setarray(.@handle, "OtherWrite.IntArray", .@inttest);
	container_save(.@handle, "example2.json"); // �ļ��������ڸ�Ŀ¼��
	container_close(.@handle);

ע��: ���ʹ����ұ�������Ҫ�����ɫID�����ǽ�ɫ�����ű�

----------------------------------------

*container_setobject(<�������>,"<�ڵ�·��>","<�����ı�>");

д���Ӧ�����ڵ���Ϊ����, �������ı���ʽ����.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	container_setobject(.@handle, "OtherWrite.StrObject", "{key1: value1, key2: value2}");
	container_save(.@handle, "example2.json"); // �ļ��������ڸ�Ŀ¼��
	container_close(.@handle);

----------------------------------------

*container_begin(<�������>{,<�ڵ�·��>});

����һ������������, ��ʹ��ָ��ʼ��Ԫ��.

����:
	.@handle = container_loadjson("doc/sample/example.json");
	for(container_begin(.@handle, "Data.ObjectReturn[0]"); container_end() == false; container_next()){
		debugmes "key: "+container_key()+" -> value: "+container_value();
	}
	container_close(.@handle);

----------------------------------------

*container_next();

���������� �ƶ�����һ��Ԫ��.

----------------------------------------

*container_end();

�ж� ���������� �Ƿ������һ��Ԫ��.

----------------------------------------

*container_key();

���ص�ǰ ���������� ��ָ��Ԫ�صļ�(key)

----------------------------------------

*container_value({"<�ڵ�·��>"});

���ص�ǰ ���������� ��ָ��Ԫ�ص�ֵ(value), ���ֵΪ�����ͻ������Ϳ���ͨ���ڵ�·������ȡ�����������

��������:
	- �������� ���� "Object"
	- �������� ���� "Array"
	- �������� ��������ֵ, ��ֵ��ʹ��atoiת��һ��
	- ������� �����ַ���

----------------------------------------

*container_saveyaml <�������>,"<�ļ�·��>"{,"<�ڵ�·��>"};

��������Yaml�ı�����ʽ������ļ���, ������Խڵ�·�������������������.
���·��Ϊmap-server.exe ���ڵ��ļ���, ����ͨ�� getfilepath ��ȡ NPC �� Function �����ļ���.

----------------------------------------

*container_savejson <�������>,"<�ļ�·��>"{,"<�ڵ�·��>"};

��������Json�ı�����ʽ������ļ���, ������Խڵ�·�������������������.
���·��Ϊmap-server.exe ���ڵ��ļ���, ����ͨ�� getfilepath ��ȡ NPC �� Function �����ļ���.

----------------------------------------

*container_close <�������>;

�ر� �������� ���ͷ��ڴ�, ����Ǿ������õ��ļ����Կ��ǳ�ʱ��洢���ڴ���.

����ֵ:
	�ɹ�����1 ʧ�ܷ���0

----------------------------------------

*rfifo_int <��ȡλ��>,<�ֽ���>;

�� OnPCSocketRecvFilter �¼����յ����ʱ, �����ñ�ָ���ȡ�����շ�����ж�Ӧλ�õ���������.

<�ֽ���>
	1 - ��ȡ�ֽ�������
	2 - ��ȡ����������
	4 - ��ȡ����������
	8 - ��ȡ����������
	
ָ��ػ�ȡ������������

----------------------------------------

*rfifo_str <��ȡλ��>{,<��ȡ����>};

�� OnPCSocketRecvFilter �¼����յ����ʱ, �����ñ�ָ���ȡ�����շ�����е��ı�����.

ָ��ػ�ȡ�����ı�����

----------------------------------------

*wfifo_int <д��λ��>,<д������>,<�ֽ���>;

�� OnPCSocketRecvFilter �¼����յ����ʱ, �����ñ�ָ���д�����ͷ��������������
ʹ�ø�ָ��� �����ͷ���� �����¼��������͸��ͻ���, ��ͨ�� fifo_debug ȡ������.

<�ֽ���>
	1 - ��ȡ�ֽ�������
	2 - ��ȡ����������
	4 - ��ȡ����������
	8 - ��ȡ����������

----------------------------------------

*wfifo_str <д��λ��>,<д���ı�>{,<д�볤��>};

�� OnPCSocketRecvFilter �¼����յ����ʱ, �����ñ�ָ���д�����ͷ�������ı�����
ʹ�ø�ָ��� �����ͷ���� �����¼��������͸��ͻ���, ��ͨ�� fifo_debug ȡ������.
��� <д�볤��> ���� <д���ı�> ����, �������ַ�.

----------------------------------------

*fifo_debug <����>;

�� �����ͷ���� �� �����շ���� ��ӡ������̨, ���ǽ�ֹ�¼��������� �����ͷ���� ���ͻ���.

<����>
	&1 - ��ӡ���շ��
	&2 - ��ӡ���ͷ��
	&4 - ȡ���� wfifo_int wfifo_str ����ָ�������ķ�����͸��ͻ���

----------------------------------------
--         ���¹���Ϊ���ѹ���         --
-- �շѹ��ܿ��ڹ���ֱ�����ز��Զ˲��� --
----------------------------------------

*roulette_bonus <��ƷID>{,<��ɫID>};

�������˴�ת�̵� bonus ��Ʒ����ָ��ֻ�д�ת�̵�ʱ����Ч��
bonus ��Ʒ����Ϊ��ǰҡ���е���Ʒʱ�Ż���ʾ��
������� OnPCStartRouletteFilter �¼����ض���ת�̹���

---------------------------------------

*roulette_iteminfo <��ǩ>,<��>,<��>{,<��ɫID>};

������˴�ת������Ʒ��Ϣ������������������
������� OnPCStartRouletteFilter �¼�, �ض���ת�̹���

<��ǩ>: 
	1 : ��ƷID
	2 : �����Ʒ������
	3 : flag ��Ӧ���ݿ�ת�������е�flag

---------------------------------------

*roulette_open {<��>{,<��>{,<bonus��Ʒ>{,<��ɫID>}}}};

�����˴�ת��, ���Ҷ�λ����Ӧλ�ã������Ϊ-1ʱ���´�ҡ���лᶨλ�� (��+1)��������bonus��Ʒ����������������
bonus ��Ʒ����Ϊ��ǰҡ���е���Ʒʱ�Ż���ʾ��
������� OnPCStartRouletteFilter �¼����ض���ת�̹���

---------------------------------------

*roulette_generate <���>,<��>,<��>,<bonus��Ʒ>{,<��ɫID>};

ת�̿�ʼת��, ͣ��ָ����λ��, ����ʾ��ǰҡ����bonus��Ʒ����������������
bonus ��Ʒ����Ϊ��ǰҡ���е���Ʒʱ�Ż���ʾ��
������� OnPCStartRouletteFilter �¼����ض���ת�̹���

<���>:
	0 : �ɹ� �´�ҡ���лᶨλ��(��+1)
	1 : ��ʾʧ��, ����ҡ��
	2 : ��ʾû���㹻��Ӳ��, ����ҡ��
	3 : ʧ�� �´�ҡ���ᶨλ����һ��


SC_IGNORE_RETURN	()

	说明: 无视反射伤害
	val1: 1 为无视物理反射
		  2 为无视魔法反射
		  3 为无视物理和魔法反射

SC_BLOCKING_ALIVE	()

	说明: 不能被复活, 复活时会提示倒计时, 如果tick为-1时则会显示 BetterRa_map_msg.conf 中 2401 ~ 2402 内容 (无法被驱散、强制驱逐、魔法效果解除等所解除)
	val1: 1 为不能使用复活之证复活
		  2 不能被技能复活
		  3 为不能使用复活之证和不能被技能复活 
	
SC_BLOCKING_WEAPON	()

	说明: 不能穿戴或卸下武器 (无法被驱散、强制驱逐、魔法效果解除等所解除)
	val1:
	
SC_BLOCKING_ARMOR	()

	说明: 不能穿戴或卸下防具 (无法被驱散、强制驱逐、魔法效果解除等所解除)
	val1:
	
SC_BLOCKING_SHADOWGEAR	()

	说明: 不能穿戴或卸下影装 (无法被驱散、强制驱逐、魔法效果解除等所解除)
	val1:
	
SC_ATK_ATTR_FIX ()

	说明: 攻击属性伤害修正 (无法被驱散、强制驱逐、魔法效果解除等所解除)
	val1: 1 攻击改变属性为 val2, 对 val2 属性造成伤害修正为 val3%
		  2 攻击改变属性为 val2, 对 val2 属性造成伤害在官方修正基础上 +val3%
		  3 攻击改变属性为 val2, 对 val2 属性最终伤害为 val3
		  4 只能打到 val2 属性, 对 val2 属性造成伤害修正为 val3%
		  5 只能打到 val2 属性, 对 val2 属性造成伤害在官方修正基础上 +val3%
		  6 只能打到 val2 属性, 对 val2 属性最终伤害为 val3
	val2: 修正的属性
		  官方属性 ELE_NEUTRAL ... ELE_UNDEAD
		  也支持自定义属性 比如填写99 可以通过 SC_DEF_ATTR_FIX 将另一个实体属性改为 99 来进行属性修正
	val3: 根据val1的值 有不同的作用
	
SC_DEF_ATTR_FIX ()

	说明: 防御属性伤害修正 (无法被驱散、强制驱逐、魔法效果解除等所解除)
	val1: 1 防御改变属性为 val2, 被 val2 属性造成伤害修正为 val3%
		  2 防御改变属性为 val2, 被 val2 属性造成伤害在官方修正基础上 +val3%
		  3 防御改变属性为 val2, 被 val2 属性最终伤害为 val3
		  4 只能被 val2 属性打到, 被 val2 属性造成伤害修正为 val3%
		  5 只能被 val2 属性打到, 被 val2 属性造成伤害在官方修正基础上 +val3%
		  6 只能被 val2 属性打到, 被 val2 属性最终伤害为 val3
	val2: 修正的属性 官方属性 ELE_NEUTRAL ... ELE_UNDEAD
		  也支持自定义属性 比如填写99 可以通过 SC_ATK_ATTR_FIX 配合实现属性修正
	val3: 根据val1的值 有不同的作用
	val4: 属性等级(val1 为 1 2 3 时生效)
	//===== rAthena Documentation ================================
//= Captcha Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20220920
//===== Description: =========================================
//= Explanation of the captcha_db.yml file and structure.
//============================================================

---------------------------------------

Id: Unique ID.

---------------------------------------

Filename: Name of the BMP image file (with location).
		  The path of the file can be different for each captcha image, but it's best practice to keep them in the same directory.

Example:
    Filename: db/import/captcha/rathena.bmp

---------------------------------------

Answer: Correct answer for the captcha (case-sensitive).

---------------------------------------

Bonus: NPC script that is ran when a captcha is successfully answered. Accepts all forms of script constants, variables, as well as the
	   unique player variable @captcha_retries. This variable can be used within the Bonus script to get the remaining retries a player
	   has. Coupled with the script command 'getbattleflag()' this could be used to assign different bonuses based on success rate.

Example:
    # Give level 10 Blessing for 20 minutes with no failures, else give for 30 seconds.
    Bonus: >
      if (@captcha_retries == getbattleflag("macro_detection_retry")) {
        # Player solved it on first try
        specialeffect2 EF_BLESSING;
        sc_start SC_BLESSING,1200000,10;
      } else {
        # Player needed more than one try
        specialeffect2 EF_BLESSING;
        sc_start SC_BLESSING,30000,10;
      }
//===== rAthena Documentation ================================
//= eAthena Job System
//===== By: ==================================================
//= Skotlex
//===== Last Updated: ========================================
//= 20130209
//===== Description: =========================================
//= A reference description of eA's inner job system (for use
//= in scripts through the eaclass and roclass script commands).
//============================================================

Preface:
-------------------------------------------------------------------------------

	Most scripters are aware of the class values used in RO and their constants
	specified in src/map/script_constants.hpp. Each class has a number associated
	to it for referencing, so when someone's class is 9 that means they are a
	wizard. However, this list of job numbers has no real order behind it, and
	no logic behind it's assignation.

	You can add 3999 to a job to get their rebirth ID, but if you try to do the
	same to get the Baby class ID, that fails on the super Baby class. Also,
	there's no way to calculate, from a given first class, which classes would
	be their "evolution". That is, given the Archer's ID, you cannot just add
	a value that will return you "Hunter", and will still work if applied to
	the other classes. It didn't help much when they added Taekwon Boy, a first
	class, with an ID of 4046, and much later they added Ninja/Gunslinger with
	the IDs 25/24. How do you identify a first class on all this mess without
	recurring to very ugly range checks?

The eA Job System:
-------------------------------------------------------------------------------

	Since the code also required to do this kind of checks for various skills
	(the Soul Linker Spirit buffs specifically come to mind), an alternate job
	ID system was developed, which attempts to make more sense and make it
	easier to check where a particular job stands in relation to the rest.

	The scheme consists in that every job can be broken down by 3 criteria:

- Base Job: This determines to which class-tree a job belongs. All jobs can be
  traced back to their root. The base job of all classes has to be one of the
  following:

	EAJ_NOVICE		0x0
	EAJ_SWORDMAN	0x1
	EAJ_MAGE		0x2
	EAJ_ARCHER		0x3
	EAJ_ACOLYTE		0x4
	EAJ_MERCHANT	0x5
	EAJ_THIEF		0x6
	EAJ_TAEKWON		0x7
	EAJ_GUNSLINGER	0x9
	EAJ_NINJA		0x0A
	EAJ_GANGSI		0x0D
	EAJ_SUMMONER	0x10

- Branch: All classes can be classified as "1st Class", "2-1 Class" or
  "2-2 Class":

	EAJL_2_1	0x100
	EAJL_2_2	0x200
	EAJL_2		0x300

- The third category is type. Classes can either be normal, rebirth/advanced,
  adopted, or third class.

	EAJL_UPPER	0x1000
	EAJL_BABY	0x2000
	EAJL_THIRD	0x4000

So using these three categories, any job class can be constructed from the
others. Let's take a swordman, for example.

The first step is basic swordman, with nothing else:

	EAJ_SWORDMAN

If a swordman is adopted...

	EAJ_SWORDMAN|EAJL_BABY -> EAJ_BABY_SWORDMAN

The next step is to either become a 2-1 or a 2-2 job:

	EAJ_SWORDMAN|EAJL_2_1 -> EAJ_KNIGHT
	EAJ_SWORDMAN|EAJL_2_2 -> EAJ_CRUSADER

Getting out the rebirth versions of a swordman:

	EAJ_SWORDMAN|EAJL_UPPER 			-> EAJ_SWORDMAN_HIGH
	EAJ_SWORDMAN|EAJL_2_1|EAJL_UPPER	-> EAJ_LORD_KNIGHT
	EAJ_SWORDMAN|EAJL_2_2|EAJL_UPPER	-> EAJ_PALADIN

Or getting the third job versions:

	EAJ_SWORDMAN|EAJL_2_1|EAJL_THIRD	-> EAJ_RUNE_KNIGHT
	EAJ_SWORDMAN|EAJL_2_2|EAJL_THIRD	-> EAJ_ROYAL_GUARD

Why are we using the bitwise OR operand ('|') rather than just adding? Because
the OR is wreck-proof:

	EAJ_SWORDMAN_HIGH|EAJL_UPPER -> EAJ_SWORDMAN_HIGH

If we had used addition, we would have gotten a completely different result.

The EAJL (eA Job Level) constants
-------------------------------------------------------------------------------

	There are a few constants which can be used to filter out and make job
	comparisons easier. The comparisons involve eA job IDs, not classic job
	IDs, using the eaclass() command explained in the next section.

	set @eac, eaclass();

EAJL_2_1:
	Checks if the class is a 2-1 class:
	if (@eac&EAJL_2_1)
		mes "Using the classic 2-1 job, huh?";

EAJL_2_2:
	Checks if the class is a 2-2 class:
	if (@eac&EAJL_2_2)
		mes "Oh, a 2-2 job!";

EAJL_2:
	Checks if the class is a 2nd Class. If the check fails, you can be sure
	the character is a first class.
	if (!(@eac&EAJL_2))
		mes "Will you wait until Job 50 to change?";

EAJL_UPPER:
	Check if a class is Rebirth/Advanced:
	if(@eac&EAJL_UPPER)
		mes "It must have taken you a LONG time...";

EAJL_BABY:
	Check if a class is an adopted class.
	if (@eac&EAJL_BABY)
		mes "Don't you hate being weak?";

EAJL_THIRD:
	Checks if a class is a third job.
	if(@eac&EAJL_THIRD)
		mes "Wow, you've really grown!";

EAJ_UPPERMASK:
	The upper mask can be used to "strip" the upper/baby characteristics of a
	class, used when you want to know if someone is a certain class regardless
	of rebirth/adopted status. For example, the following code would go through
	for Monks, Champions and Baby Monks:
	if ((@eac&EAJ_UPPERMASK) == EAJ_MONK)
		mes "Aren't knuckles such a cool weapon?";

	Note that if instead of EAJ_MONK you used EAJ_CHAMPION or EAJ_BABY_MONK,
	the check would had never passed, since the upper/baby state has been
	removed from the original job when checking.

EAJ_BASEMASK:
	This mask strips also the 2nd class attributes. It can be used to check
	against the basic job of a character. For example, the following code would
	go through for Merchants (+Baby Merchant and High Merchant), Blacksmiths
	(+Baby blacksmiths and Whitesmith) and Alchemist (+Baby Alchemist and
	+Creator):
	if ((@eac&EAJ_BASEMASK) == EAJ_MERCHANT)
		mes "Why I can't have discount like you guys do?";

	Note that, like before, if you try to check versus any of the other
	classes  (High merchant, blacksmith, etc) instead of basic merchant, the
	check will  always fail for the same reasons previously explained.

EAJ_THIRDMASK:
	This mask strips 3rd class attributes.  It will give the "normal" class of
	a third job, regardless of rebirth/adopted status.  When used on non-third
	class characters, it will return the second job, or, if that also doesn't
	exist, the first.
	if ((@eac&EAJ_THIRDMASK) == EAJ_WARLOCK_T)
		mes "You've gone through rebirth, I see.";

The script commands eaclass, roclass:
-------------------------------------------------------------------------------

	These script commands are what you can use in scripts to convert between
	the RO classic job id, and eA's job system. The following script code
	demonstrates how to use these script commands to guess what your next job
	will be:

	set @eac, eaclass();
	if (@eac&EAJL_2)
	{	//2nd class
		//If upper or baby, you can't rebirth
		if (@eac&(EAJL_UPPER|EAJL_BABY)) {
			mes "You can't go anywhere, can you?";
			close;
		}
		//Note that if we remove the EAJL_BABY check up there, the following
		//check will also fail, because there's no such thing as Rebirth-Baby
		//classes.
		set @newclass, roclass(@eac|EAJL_UPPER);
		if (@newclass == -1) {
			//Don't you hate this of SG and SL?
			mes "Haha, your class doesn't has a rebirth version yet!";
			close;
		}
		mes "Still dreaming of the day you become a "+jobname(@newclass)+"?";
		close;
	}
	set @class1, roclass(@eac|EAJL_2_1);
	set @class2, roclass(@eac|EAJL_2_2);
	if (@class1 == -1) {
		mes "Looks like you are stuck forever on that class.";
		close;
	}
	if (@class2 == -1) {
		//Not quite true, currently the only 1st class that doesn't has two
		//choices is Novice -> Supernovice (see s.novice section below)
		mes "Looks like you have no choice but to be a "+jobname(@class1)+".";
		close;
	}
	mes "Have you decided yet if you want to be a "+jobname(@class1)+" or a "+jobname(@class2)+"?";
	close;


Oddities of the System:
-------------------------------------------------------------------------------
About Bards and Dancers:
	These two classes are considered the same in eA's job system, since they
	both are the 2-2 job of archers. The only way to tell them apart is by
	using the gender of the character we are referring to. The script command
	roclass() will automatically use the gender of the attached player (or
	'male' if there's no such player), but you can also explicitly pass the
	gender to the script command when there's no player attached.

About Novices and Super Novices:
	These are treated a bit differently from you'd expect. Because.. for
	instance, a novice is not supposed to be a 1st class, but it is considered
	as one on this tree system:

	EAJ_NOVICE                    -> Novice
	EAJ_NOVICE|EAJL_2_1           -> EAJ_SUPER_NOVICE
	EAJ_NOVICE|EAJL_UPPER         -> EAJ_NOVICE_HIGH
	EAJ_NOVICE|EAJL_BABY          -> EAJ_BABY
	EAJ_NOVICE|EAJL_BABY|EAJL_2_1 -> EAJ_SUPER_BABY

	So as you can see, on this job system, the Super Novice is treated as the
	2-1 job of a Novice, and the Novice job it's at the same level of the other
	1st jobs. Even though that may seem like a hindrance, it makes it very easy
	to add a check to discard Novice types from a quest:

	if ((eaclass()&EAJ_BASEMASK) == EAJ_NOVICE)
		//Novice class detected.
//===== rAthena Documentation ================================
//= Client Effects List
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20171011
//===== Description: =========================================
//= A list of client-side effects sorted by ID.
//============================================================

The following is a compiled list of visual and sound effects which the client
can produce when receiving a packet with id 0x1f3 (01f3 <ID>.l <type>.l).
Each list entry contains a number and a short description of the effect.
You can produce these effects ingame by doing "@effect <number>".
It's also possible to attach effects to item/npc scripts by using 'misceffect'.

Number	Description
------	-----------
0.	Regular Hit
1.	Bash
2.	Melee Skill Hit
3.	Melee Skill Hit
4.	Melee Skill Hit
5.	Melee Skill Hit
6.	Being Warped
7.	Item Heal effect
8.	Yellow Ripple Effect
9.	Different Type of Heal
10.	Mammonite
11.	Endure
12.	Yellow cast aura
13.	Blue Box
14.	Blue restoring effect
15.	Soul Strike
16.	Hide
17.	Magnum Break
18.	Steal
19.	(Invalid)
20.	Envenom/Poison
21.	Detoxify
22.	Sight
23.	Stone Curse
24.	Fire Ball
25.	Fire Wall
26.	A sound (a swipe?)
27.	Frost Diver (Traveling to Target)
28.	Frost Diver (Hitting)
29.	Lightning Bolt
30.	Thunder Storm
31.	Weird bubbles launching from feet
32.	Small clustered explosions
33.	Ruwach
34.	Old Map Exit Animation (unused)
35.	Old Warp Portal (unused)
36.	Old Warp Portal (unused)
37.	AGI Up
38.	AGI Down
39.	Aqua Benedicta
40.	Signum Crucis
41.	Angelus
42.	Blessing
43.	Dex + Agi Up
44.	Little Fog Smoke.
45.	Faint Little Ball Things.
46.	Sand Wind
47.	Torch
48.	Small Piece of Glass
49.	Firebolt/Wall Hits
50.	Spinning Fire Thing
51.	Ice Elemental Hit
52.	Wind Elemental Hit
53.	Puff of Purpulish Smoke?
54.	Cast Initiation Aura (Water Element)
55.	Cast Initiation Aura (Fire Element)
56.	Cast Initiation Aura (Wind Element)
57.	Cast Initiation Aura (Earth Element)
58.	Cast Initiation Aura (Holy Element)
59.	Cast Initiation Aura (Poison Element)
60.	Cast target circle
61.	Old Warp Portal (NPC Warp, unused)
62.	Sight Trasher
63.	Moonlight Sphere
64.	Something Like Puruple/Yellow Light Bullet
65.	Something Like Absorb of Power
66.	Cure
67.	Provoke
68.	MVP Banner
69.	Skid Trap
70.	Brandish Spear
71.	Spiral White balls
72.	Bigger Spiral White balls
73.	Blue/White Small Aura
74.	Ice Wall
75.	Gloria
76.	Magnificat
77.	Resurrection
78.	Status Recovery
79.	Earth Spike
80.	Spear Boomerang
81.	Skill hit
82.	Turn Undead
83.	Sanctuary
84.	Impositio Manus
85.	Lex Aeterna
86.	Aspersio
87.	Lex Divina
88.	Suffragium
89.	Storm Gust
90.	Lord of Vermilion
91.	B. S. Sacramenti
92.	Meteor Storm
93.	Jupitel Thunder (Ball)
94.	Jupitel Thunder (Hit)
95.	Quagmire
96.	Fire Pillar
97.	Fire Pillar/Land Mine hit
98.	Adrenaline Rush
99.	Flasher Trap
100.	Yellow ball fountain
101.	Weapon Repair
102.	Hammerfall
103.	Weapon Perfection
104.	Maximize Power
105.	(nothing)
106.	Blast Mine Trap
107.	Claymore Trap
108.	Freezing Trap
109.	Bailaban Blue bubble Map Effect
110.	Trap Used by Giearth
111.	Spring Trap
112.	Kyrie Eleison
113.	Magnus Exorcismus
114.	Old Magnus Exorcismus Map Unit (unused)
115.	Blitz Beat
116.	Fling Watersphere
117.	Waterball
118.	Fling Firesphere
119.	Detect
120.	Cloaking
121.	Sonic Blow (Part 1/2)
122.	Multi hit effect
123.	Grimtooth Cast
124.	Venom Dust
125.	Enchant Poison
126.	Poison React
127.	Small Posion React
128.	Over Thrust
129.	Venom Splasher Explosion
130.	Two-Hand Quicken
131.	Auto-Counter Hit
132.	Grimtooth Hit
133.	Ice Effect (Used by NPCs)
134.	Ice Effect (Used by NPCs)
135.	Ice Effect (Used by NPCs)
136.	Slow Poison
137.	Old Sanctuary Map Unit (unused)
138.	Fire pillar
139.	Sandman Trap
140.	Ressurection Aura
141.	Pneuma
142.	Heaven's Drive
143.	Sonic Blow (Part 2/2)
144.	Brandish Spear Pre-Hit Effect
145.	Shockwave Trap
146.	Shockwave Trap Hit
147.	Pierce Hit
148.	Pierce Cast Animation
149.	Bowling Bash
150.	Pierce Cast Animation
151.	Spear Boomerang Cast
152.	Turn Undead
153.	Increase Concentration
154.	Refine Success
155.	Refine Fail
156.	jobchange.str not found error
157.	levelup.str not found error
158.	Job Level Up
159.	PvP circle
160.	PvP Party Circle
161.	(Nothing)
162.	Snow
163.	White Sakura Leaves
164.	(Nothing)
165.	Comodo Fireworks Ball
166.	Energy Coat (Visual Effect)
167.	(Nothing)
168.	(Nothing)
169.	Energy Coat Animation
170.	Cart Revolution
171.	Venom Dust Map Unit
172.	Change Element (Dark)
173.	Change Element (Fire)
174.	Change Element (Water)
175.	Change Element (Wind)
176.	Change Element (Fire)
177.	Change Element (Earth)
178.	Change Element (Holy)
179.	Change Element (Poison)
180.	Darkness Attack
181.	Mental Breaker
182.	Magical Hit
183.	Self Destruction
184.	(Nothing)
185.	(Nothing)
186.	Combo Attack 1
187.	Combo Attack 2
188.	Combo Attack 3
189.	Combo Attack 4
190.	Combo Attack 5
191.	Guided Attack
192.	Poison Attack
193.	Silence Attack
194.	Stun Attack
195.	Petrify Attack
196.	Curse Attack
197.	Sleep Attack
198.	(Nothing)
199.	Small Popping Bubble Map Effect
200.	Normal level 99 Aura (Middle)
201.	Normal level 99 Aura (Bottom)
202.	Lv 99 Aura Bubble
203.	Fury (Visual Effect)
204.	Red Herb/Potion
205.	Orange Potion
206.	Yellow Herb/Potion
207.	White Herb/Potion
208.	Blue Herb/Potion
209.	Green Herb/Potion
210.	Yellow Circle Healing Effect
211.	Blue Circle Healing Effect
212.	Dark Breath
213.	Defender
214.	Keeping
215.	Summon Slave
216.	Blood Drain
217.	Energy Drain
218.	Concentration Potion
219.	Awakening Potion
220.	Berserk Potion
221.	Intense light beam
222.	Defender (Crusader)
223.	Holy Cast Aura
224.	Wind (Map effect)
225.	Volcano casting effect
226.	Grand Cross Effect
227.	Snatch
228.	(Nothing)
229.	(Nothing)
230.	(Nothing)
231.	Map Light Pillar Animation 1
232.	Sacrifice (Visual Effect)
233.	Fog
234.	Spell Breaker
235.	Dispell
236.	Deluge Cast Aura
237.	Violent Gale Cast Aura
238.	Magnetic Earth Cast Aura
239.	Volcano (Visual Effect)
240.	Deluge (Visual Effect)
241.	Violent Gale (Visual Effect)
242.	Magnetic Earth (Visual Effect)
243.	(Invalid)
244.	Magic Rod
245.	Holy Cross
246.	Shield Charge
247.	Map Light Pillar Animation 2
248.	Resistant Souls
249.	Shield Boomerang
250.	Spear Quicken
251.	Devotion
252.	Reflect Shield
253.	Absorb Spirit Spheres
254.	Mental Strength (Visual Effect)
255.	Elemental Endow (Fire)
256.	Elemental Endow (Water)
257.	Elemental Endow (Wind)
258.	Elemental Endow (Earth)
259.	Map Light Pillar Animation 3
260.	Map Light Pillar Animation 4
261.	Fury Cast Animation 
262.	Raging Quadruple Blow
263.	Raging Quadruple Blow 2
264.	(Nothing)
265.	Throw Spirit Sphere
266.	Raging Quadruple Blow 3
267.	Occult Impaction
268.	Steal Coin
269.	Divest Weapon
270.	Divest Shield
271.	Divest Armor
272.	Divest Helm
273.	Raging Quadruple Blow 4
274.	Steal Coin Animation
275.	Back Stab Animation
276.	Raging Thrust
277.	Dissoance Map Unit
278.	Lullaby Map Unit
279.	Mr Kim a Rich Man Map Unit
280.	Eternal Chaos Map Unit
281.	A Drum on the Battlefield Map Unit
282.	The Ring Of Nibelungen Map Unit
283.	Loki's Veil Map Unit
284.	Into the Abyss Map Unit
285.	Invunerable Siegfriend Map Unit
286.	A Wistle Map Unit
287.	Assassin Cross of Sunset Map Unit
288.	A Poem of Bragi Map Unit
289.	The Apple Of Idun Map Unit
290.	Ugly Dance Map Unit
291.	Humming Map Unit
292.	Please don't Forget Me Map Unit
293.	Fortune's Kiss Map Unit
294.	Service For You Map Unit
295.	Frost Joke
296.	Scream
297.	Fire Works (Visual Effect)
298.	Acid Terror Animnation
299.	(Nothing)
300.	Chemical Protection
301.	Fire Works (Sound Effect)
302.	Bomb
303.	(Unused)
304.	Teleportation Animation
305.	Pharmacy Success
306.	Pharmacy Failed
307.	Forest Light 1
308.	Throw Stone
309.	First Aid
310.	Sprinkle Sand
311.	Crazy Uproar
312.	Heal Effect
313.	Heal Effect 2
314.	Old Map Exit effect (Unused)
315.	Safety Wall
316.	Warp Portal Animation 1
317.	Warp Portal Animation 2
318.	Magnus Exorcisimus Map Unit
319.	Sanctuary Map Unit
320.	Offensive Heal
321.	Warp NPC
322.	Forest Light 2
323.	Forest Light 3
324.	Forest Light 4
325.	Heal Effect 4
326.	Chase Walk Left Foot
327.	Chse Walk Right Foot
328.	Monk Asura Strike
329.	Triple Strike
330.	Combo Finish
331.	Natural HP Regeneration
332.	Natural SP Regeneration
333.	Autumn Leaves
334.	Blind
335.	Poison
336.	Kyrie Eleison/Parrying Shield
337.	Class Change
338.	Super Novice/Taekwon Level Up Angel
339.	Spiral Pierce
340.	(Nothing)
341.	Wedding Warp Portal
342.	Wedding Skill
343.	Another Merry Skill
344.	Character map entry effect
345.	Wings (Animated)
346.	Like Moonlight But Blue
347.	Wedding Ceremony
348.	Like 1000 Blade trepassing
349.	Waterfall (Horizonatal)
350.	Waterfall (Vertical)
351.	Small Waterfall (Horizonatal)
352.	Small Waterfall (Vertical)
353.	Dark Waterfall (Horizonatal)
354.	Dark Waterfall (Vertical)
355.	Dark Small Waterfall (Horizonatal)
356.	Dark Small Waterfall (Vertical)
357.	(Nothing)
358.	Niflheim Ghost
359.	Niflheim Bat Slow
360.	Niflheim Bat Fast
361.	Soul Destroyer
362.	Trancendant Level 99 Aura 1
363.	Valentine Day Heart With Wings
364.	Valentine Day Heart
365.	Gloria Domini
366.	Martyr's Reckoning
367.	Aura Blade
368.	Berserk
369.	Concentration
370.	Gospel Map Unit
371.	Level Up
372.	Death
373.	House Smoke
374.	Basilica
375.	Assumptio (Visual Effect)
376.	Palm Strike
377.	Matyr's Reckoning 2
378.	Soul Drain (1st Part)
379.	Soul Drain (2nd Part)
380.	Magic Crasher
381.	Blue Starburst (Unknown use)
382.	(Nothing)
383.	Health Conversion
384.	Soul Change (Sound Effect)
385.	Soul Change (Visual Effect)
386.	True Sight
387.	Falcon Assault
388.	Focused Arrow Strike (Sound Effect)
389.	Wind Walk
390.	Shattering Strike
391.	Cart Boost
392.	Reject Sword
393.	Arrow Vulcan
394.	Sheltering Bliss
395.	Marionette Control (Sound Effect)
396.	Marionette Control (Visual Effect)
397.	Trancended 99 Aura (Middle)
398.	Trancended 99 Aura (Bottom)
399.	Head Crush
400.	Joint Beat
401.	Napalm Vulcan Sound
402.	Dangerous Soul Collect
403.	Mind Breaker
404.	Fiber Lock
405.	Wall Of Fog
406.	Soul Burn
407.	Soul Change
408.	Mom, Dad, I love you! (Baby Skill)
409.	Meteor Assault
410.	Rainbow
411.	Leap
412.	Like Throw Spirit Sphere
413.	Axe Kick
414.	Round Kick
415.	Counter Kick
416.	(Nothing)
417.	Flash
418.	Warmth Lightning
419.	Kaite (Visual Effect)
420.	Eswoo (Small) (Visual Effect)
421.	Eswoo (Alt. Small) (Visual Effect)
422.	Eswoo (Normal) (Visual Effect)
423.	Eswoo (Alt. Normal) (Visual Effect)
424.	Spirit Link (Visual Effect)
425.	Esma Hit (Visual Effect)
426.	Sprint Collision (Visual Effect)
427.	(Nothing)
428.	(Nothing)
429.	Taekwon Kick Hit 1
430.	Taekwon Kick Hit 2
431.	Taekwon Kick Hit 3
432.	Solar, Lunar and Stellar Perception (Visual Effect)
433.	Solar, Lunar and Stellar Opposition (Visual Effect)
434.	Taekwon Kick Hit 4
435.	Whirlwind Kick
436.	White Barrier (Unused)
437.	White barrier 2 (Unused)
438.	Kaite Reflect Animation
439.	Flying Side Kick
440.	Assumptio (Animation)
441.	Comfort Skills Cast Aura
442.	Foot Prints caused by Sprint.
443.	(Nothing)
444.	Sprint Stop Animation
445.	High Jump (Jump)
446.	High Jump (Return Down)
447.	Running Left Foot
448.	Running Right Foot
449.	KA-Spell (1st Part)
450.	Darkcross
451.	Dark Strike
452.	Something Like Jupitel Thunder
453.	Paralized
454.	Like Blind
455.	Another Warmth Lightning
456.	Power Up
457.	Flying Side Kick (2nd Part)
458.	Running/Sprint (running into a wall)
459.	Brown tornado that spins sprite (unused)
460.	Green tornado (unused)
461.	Blue tornado (unused)
462.	Kaupe Dodge Effect
463.	Kaupe Dodge Effect
464.	White tornado (unused)
465.	Purple tornado (unused)
466.	Another Round Kick
467.	Warm/Mild Wind (Earth)
468.	Warm/Mild Wind (Wind)
469.	Warm/Mild Wind (Water)
470.	Warm/Mild Wind (Fire)
471.	Warm/Mild Wind (Undead)
472.	Warm/Mild Wind (Shadow)
473.	Warm/Mild Wind (Holy)
474.	(Nothing)
475.	Demon of The Sun Moon And Stars (Level 1)
476.	Demon of The Sun Moon And Stars (Level 2)
477.	Demon of The Sun Moon And Stars (Level 3)
478.	Demon of The Sun Moon And Stars (Level 4)
479.	Demon of The Sun Moon And Stars (Level 5)
480.	Demon of The Sun Moon And Stars (Level 6)
481.	Demon of The Sun Moon And Stars (Level 7)
482.	Demon of The Sun Moon And Stars (Level 8)
483.	Demon of The Sun Moon And Stars (Level 9)
484.	Demon of The Sun Moon And Stars (Level 10)
485.	Mental Strength Lightning but White
486.	Mental Strength Lightning
487.	Demon of The Sun Moon And Stars Ground Effect
488.	Comfort Skills
489.	(Nothing)
490.	(Nothing)
491.	Element Potions
492.	Cooking Foods
493.	Enchant Deadly Poison
494.	Throwing Tomahawk
495.	Full Strip Sound
496.	Preserve
497.	Twilight Alchemy 1
498.	Twilight Alchemy 2
499.	Twilight Alchemy 3
500.	Player Become Blue with Blue Aura
501.	Chase Walk Animation
502.	Player Become Yellow with Yellow Aura
503.	Soul Link Word
504.	(Nothing)
505.	Memorize
506.	(Nothing)
507.	Authoritative Badge
508.	Fire Cracker
509.	Valentine Day Hearth (Wings)
510.	Champion Asura Strike
511.	(Nothing)
512.	Chain Crush Combo
513.	Area Cast
514.	Really Big Circle
515.	Einbroch Fog
516.	Airship Cloud
517.	(Nothing)
518.	Cart Termination
519.	Speed Down Potion
520.	Shield Bumerang
521.	Player Become Red with Red Aura
522.	Gravitation Field
523.	Tarot Card of Fate (The Fool)
524.	Tarot Card of Fate (The Magician)
525.	Tarot Card of Fate (The High Priestess)
526.	Tarot Card of Fate (The Chariot)
527.	Tarot Card of Fate (Strength)
528.	Tarot Card of Fate (The Lovers)
529.	Tarot Card of Fate (The Wheel of Fortune)
530.	Tarot Card of Fate (The Hanged Man)
531.	Tarot Card of Fate (Death)
532.	Tarot Card of Fate (Temperance)
533.	Tarot Card of Fate (The Devil)
534.	Tarot Card of Fate (The Tower)
535.	Tarot Card of Fate (The Star)
536.	Tarot Card of Fate (The Sun)
537.	Acid Demonstration
538.	Player Become Green with Green Aura
539.	Throw Random Bottle
540.	Instant Small->Normal
541.	(Nothing)
542.	KA-Spell (1st Part)
543.	Kahii
544.	Warmth Red Sprite
545.	Sound And... PUFF Client Crash :P
546.	Kaupe
547.	Estin
548.	Instant Red Sprite
549.	Instant Blue Sprite
550.	Another Effect like Running Hit
551.	Effect Like Estun but with Circle
552.	(Nothing)
553.	Esma
554.	Large White Cloud
555.	Estun
556.	(Nothing)
557.	Juperos Energy Waterfall (Horizontal)
558.	Juperos Energy Waterfall (Vertical)
559.	Juperos Energy Waterfall Fast (Horizontal)
560.	Juperos Energy Waterfall Fast (Vertical)
561.	Juperos Warp
562.	Juperos Warp
563.	Earthquake Effect (Juperos Elevator)
564.	Wedding Cast
565.	Filir Moonlight Lvl 1
566.	Filir Moonlight Lvl 2
567.	Filir Moonlight Lvl 3
568.	Another Job Level Up
569.	Amistr Bulwark
570.	Amistr Castling
571.	Amistr Bloodlust
572.	Warmth Soul
573.	Twilight Alchemy 1
574.	Twilight Alchemy 2
575.	Twilight Alchemy 3
576.	Box Effect (Thunder)
577.	Box Effect (Cloud)
578.	Box Effect (Curse)
579.	Box Effect (Sleep)
580.	Box Effect (Rain)
581.	Box Effect (Sunlight)
582.	Another Super Novice/Taekwon Angel
583.	Warmth Hit
584.	Full Buster
585.	5 Medium Size Explosion
586.	Somatology Lab Mobs Aura
587.	Big Purple Flame
588.	Little Red Flame
589.	Eswoo
590.	Running Stop
591.	(Nothing)
592.	Thanatos Tower Bloody Clouds
593.	Food Effect (STR)
594.	Food Effect (INT)
595.	Food Effect (VIT)
596.	Food Effect (AGI)
597.	Food Effect (DEX)
598.	Food Effect (LUK)
599.	Cast Time Sound and Flashing Animation on Player
600.	Throw Venom Knife
601.	Sight Blaster
602.	Close Confine (Grab Effect)
603.	Spinning fire ball (like 50, but smaller)
604.	Close Confine (Ground Effect)
605.	(Nothing)
606.	Pang Voice (Visual Effect)
607.	Wink of Charm (Visual Effect)
608.	Cooking Success
609.	Cooking Failed
610.	Success
611.	Failed
612.	Korean Words and /no1 Emoticon
613.	Throw Shuriken
614.	Throw Kunai
615.	Throw Fumma Shuriken
616.	Throw Money
617.	Illusionary Shadow
618.	Crimson Fire Bolossom
619.	Lightning Spear Of Ice
620.	Water Escape Technique
621.	Wind Blade
622.	Lightning Crash
623.	Piercing Shot
624.	Kamaitachi
625.	Madness Canceller
626.	Adjustment
627.	Disarm (Sound Effect)
628.	Dust
629.	(Nothing)
630.	Shadow Slash
631.	Reverse Tatami Map Unit
632.	Mist Slash
633.	Final Strike
634.	Crimson Fire Formation
635.	Dragon Fire Formation
636.	Falling Ice Pillar
637.	Desperado
638.	Ground Drift Grenade
639.	Ground Drift Grenade
640.	Ground Drift Grenade
641.	Ground Drift Grenade
642.	Ground Drift Grenade
643.	Rapid Shower
644.	Magic Bullet
645.	Spread Attack
646.	Tracking (Shown While Casting)
647.	Tracking
648.	Triple Action
649.	Bull's Eye
650.	Ice Cave Level 4 Circle
651.	Ice Cave Level 4 Big Circle
652.	Like Regeneration Number but Red with a Sound
653.	Like Regeneration Number but Red
654.	Like Regeneration Number but Purple
655.	Mobs Skill (Change Undead Element)
656.	Last animation before Change Undead Element finish
657.	(Nothing)
658.	(Nothing)
659.	(Nothing)
660.	(Nothing)
661.	(Nothing)
662.	(Nothing)
663.	(Nothing)
664.	(Nothing)
665.	Little Blue Ball Falling From the Sky
666.	Earthquake
667.	(Nothing)
668.	Dragonfear
669.	Wide Bleeding
670.	Dragon fear (Visual Effect)
671.	The Japan Earth Symbol (like 'Seven Wind Lv1', but on the ground)
672.	The Japan Wind Symbol (like 'Seven Wind Lv2', but on the ground)
673.	Map turns Blue (like Soul Link)
674.	Evil Land Cell
675.	Like Parrying/Kyrie Eleison barrier but Yellow with small Cross in every barrier piece
676.	Slow Casting
677.	Critical Wounds/Bleeding Attack
678.	White 99 Aura Bubbles
679.	Green Aura (Middle)
680.	Green Aura (Bottom)
681.	Dimensional Gorge Map Effect
682.	I Love You Banner
683.	Happy White Day Banner
684.	Happy Valentine Day Banner
685.	Happy Birthday Banner
686.	Merry Christmas Banner
687.	Cast Circle-Like effect 1
688.	Cast Circle-Like effect 2
689.	Endless Tower Map Effect
690.	Burning Flame (Red)
691.	Burning Flame (Green)
692.	Unknown Aura Bubbles (Small ghosts)
693.	Translucent yellow circle
694.	Translucent green circle
695.	Rotating green light
696.	The same of 690 and 691 but Blue/Purple
697.	(Nothing)
698.	(Nothing)
699.	Fall of powder from the sky and raise of some leaf
700.	Big Colored Green Sphere.
701.	Huge Blue Sphere
702.	Little Colored Violet Sphere
703.	Light Infiltration with fall of pownder
704.	Client Error (mobile_ef02.str)
705.	Client Error (mobile_ef01.str)
706.	Client Error (mobile_ef03.str)
707.	Client Crash :P
708.	Storm Gust (same as 89)
709.	A Firework that split in 4 mini fireworks
710.	A Sphere like Effect 701 but Green, and a bit more larger
711.	A big violet wall
712.	A Little Flame Sphere
713.	A lot of Very Small and Yellow Sphere
714.	(Nothing)
715.	Little blue Basilica
716.	Same as 715
717.	Christmas Carol (copy of Angelus)
718.	Judex (Visual Effect)
719.	Renovatio (light beam)
720.	Yellow version of Soul Breaker
721.	Adoramus (lightning bolt)
722.	Ignition Break (big explosion)
723.	Hundred Spear (sound effect)
724.	Green version of Detecting
725.	Oratorio (like Detecting)
726.	Frost Misty (blue vapor and bubbles)
727.	Crimson Rock
728.	Small fire (part of Hell Inferno)
729.	Marsh of Abyss (like Close Confine)
730.	Small, cartoony explosion (part of Soul Expansion)
731.	Dragon Howling (blinking, expanding circle)
732.	Spike from the ground
733.	Fluffy Ball flying by
734.	Chain Lightning
735.	(Nothing)
736.	(Nothing)
737.	(Nothing)
738.	(Nothing)
739.	Old Magenta Trap
740.	Old Cobald Trap
741.	Old Maize Trap
742.	Old Verdure Trap
743.	White Ranger Trap
744.	Camouflage
745.	Aimed Bolt (crosshairs)
746.	Arrow Storm
747.	Falling white feathers
748.	Falling blue feathers
749.	Millennium Shield
750.	Detonator (blue sparkles)
751.	Releasing summoned warlock spheres
752.	Like Energy Coat, but not as dark
753.	Clearance
754.	Green warp portal (root of Epiclesis)
755.	Oratio (spinning blue symbol)
756.	Enchant Blade (like Berserk Potion)
757.	Third Class Aura (Middle)
758.	Rolling Cutter - Spin Count 1
759.	Rolling Cutter - Spin Count 2
760.	Rolling Cutter - Spin Count 3
761.	Rolling Cutter - Spin Count 4
762.	Rolling Cutter - Spin Count 5
763.	Rolling Cutter - Spin Count 6
764.	Rolling Cutter - Spin Count 7
765.	Rolling Cutter - Spin Count 8
766.	Rolling Cutter - Spin Count 9
767.	Rolling Cutter - Spin Count 10
768.	Blinking
769.	Cross Ripper Slasher (flying knives)
770.	Strip sound
771.	Poison sound
772.	Poison particles
773.	Expanding purple aura (part of Phantom Menace)
774.	Axe Boomerang
775.	Spinning character sprite
776.	Like Desperado sound effect
777.	Faded light from the ground [S]
778.	Expanding white aura (like Clearance)
779.	Faded light from the ground [S]
780.	Expanding red aura (from Infrared Scan)
781.	Magnetic Field (purple chains)
782.	All-around shield [S]
783.	Yellow shaft of light
784.	White shaft of light
785.	Upward flying wrenches
786.	Symbol with bleeping sound [S]
787.	Flare Launcher (line of fire)
788.	Venom Impress (green skull)
789.	Freezing Status Effect (two ancillas)
790.	Burning Status Effect (flame symbol)
791.	Two ice shots
792.	Upward streaming white particles
793.	Same, but more brief
794.	Infrared Scan (red lasers)
795.	Power Swing (axe crash)
796.	Spinning blue triangles
797.	Stapo
798.	Red triangles (like Intimidate)
799.	Stasis (expanding blue mist) [S]
800.	Hell Inferno (red lights)
801.	Jack Frost unit (ice spikes)
802.	White Imprison
803.	Recognized Spell
804.	Tetra Vortex [S]
805.	Tetra Vortex cast animation (blinking colors)
806.	Flying by as fast as a rocket
807.	Kidnapping sound
808.	Like Recognized Spell, but one symbol
809.	Shadowy filter [S]
810.	Damp thud sound [S]
811.	Body Painting
812.	Black expanding aura
813.	Masquerade - Enervation
814.	Masquerade - Groomy
815.	Masquerade - Ignorance
816.	Masquerade - Laziness
817.	Masquerade - Unlucky
818.	Masquerade - Weakness
819.	(Nothing)
820.	Strip Accessory
821.	Waterfall
822.	Dimension Door (spinning blue aura)
823.	in-the-manhole effect
824.	Some filter
825.	Dimension Door (aura + blue light)
826.	Expanding black casting anim.
827.	Chaos Panic (spinning brown aura)
828.	Maelstrom (spinning pink aura)
829.	Bloody Lust (spinning red aura)
830.	Blue aura (Arch Bishop cast animation)
831.	Blue cone [S]
832.	Sonic Wave
833.	(Nothing)
834.	Light shooting away circlish
835.	Fastness yellow-reddish
836.	Fastness yellow-pinkish
837.	Casting [S]
838.	Watery aura
839.	[Client Error]
840.	Red cone
841.	Green cone
842.	Yellow cone
843.	White cone
844.	Purple cone
845.	light-bluish turquoise cone
846.	(Nothing)
847.	Gloomy Day (white/red light rays)
848.	Gloomy Day (white/blue light rays)
849.	(Nothing)
850.	(Nothing)
851.	Green mushy-foggy stuff (dull)
852.	Green mushy-foggy stuff (bright)
853.	Bright green flower area
854.	Blue beam of light with notes
855.	(Nothing)
856.	Reverberation (red eighth notes)
857.	Severe Rainstorm (falling red and blue beams)
858.	Deep Sleep Lullaby (two red beams and music notes)
859.	Holograph of text (blue)
860.	Distorted note (blue)
861.	Green aura (from Circle of Life's Melody)
862.	Randomize Spell (holograph of text)
863.	Dominion Impulse (two spears of light)
864.	Gloomy Day (colorful lines)
865.	Blue aura (from Song of Mana)
866.	Dance with a Warg (Wargs)
867.	Yellow aura (from Dance with a Warg)
868.	Song of Mana (Violies)
869.	Strip sound [S]
870.	Ghostly Succubuses of fire
871.	Red aura (from Lerad's Dew)
872.	Lerad's Dew (Minerals)
873.	Stargate-wormhole stuff (bright purple)
874.	Melody of Sink (Ktullanuxes)
875.	Stargate-wormhole stuff (bright turquoise)
876.	Warcry of Beyond (Garms)
877.	Stargate-wormhole stuff (white)
878.	Unlimited Humming Voice (Miyabi Ningyos)
879.	Siren's Voice (heart-like)
880.	Bluish castish cone
881.	Blue aura
882.	Whirl of fireflies (red)
883.	Epiclesis (transparent green tree)
884.	Green beam
885.	Blue light beams
886.	Blue castish cone
887.	Wavy sparks
888.	Earth Shaker (same as 432)
889.	Fast light beams
890.	Rotation
891.	Magic shots [S]
892.	Fastness with hitting sound[S]
893.	Blue-white light passing by
894.	(Nothing)
895.	Big wheel of flat light beams
896.	Still sun shaped lightning aura
897.	Animated sun shaped lightning aura
898.	Animated, curvy sun shaped lightning aura
899.	White/red light shots from below
900.	Animated, slow curvy sun shaped lightning aura
901.	Explosion
902.	Floating bedtable texture
903.	Castish flamey cone
904.	Yellow/pink lights passing by
905.	Expanding circle
906.	Shield Press (falling shield)
907.	Chainy, metalish sound [S]
908.	Prestige (sphere of yellow particles)
909.	Banding (sphere of red particles)
910.	Inspiration (sphere of blue particles)
911.	Green castish animation [S]
912.	Wall of Thorns unit (green fog cloud)
913.	Magic projectiles
914.	(Nothing)
915.	Crazy Weed
916.	Demonic Fire
917.	More angry, demonic flames
918.	Fire Insignia (demonic flames)
919.	Hell's Plant (green snapping plant)
920.	Fire Walk unit
921.	Vacuum Extreme (whirlwind)
922.	Psychic Wave
923.	Poison Buster
924.	Poisoning animation
925.	Some filter
926.	Electric Walk unit
927.	Earth Grave (speary roots)
928.	Ice cloud projectiles
929.	Warmer (field of flames)
930.	Varetyr Spear (falling spear)
931.	(Nothing)
932.	Firefly
933.	[Client Crash]
934.	White, castishly expanding cone
935.	Green magic projectile
936.	Red, castishly expanding cone
937.	Yellow, castishly expanding cone
938.	Dark-red, castishly expanding cone
939.	Blue, conish aura
940.	Snow flake
941.	Explosion of red, demonic fire
942.	Expanding, white dome
943.	Green, fluffy projectile
944.	Falling gems
945.	(Nothing)
946.	Floating lights
947.	Blue lightning sphere
948.	Two blue lightning spheres
949.	Flat, spinning diamond
950.	Circling, planetlike spheres
951.	Three lightning spheres
952.	Flat, spinning gem and two lightning spheres
953.	Spinning, planetlike spheres
954.	Two lightblue glowing spheres
955.	Three spinning flame spheres
956.	Flame
957.	Spinning planetlike sphere
958.	Two flames
959.	Purple flame
960.	Small yellow explosion
961.	Cartoony whirlwind
962.	Rising fire
963.	Dark filter (like Stone Curse)
964.	Same as 920
965.	Small white explosion
966.	Bone crack
967.	Another little explosion
//===== rAthena Documentation ================================
//= rAthena Item Bonuses List
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20151029
//===== Description: =========================================
//= List of script instructions used in item bonuses.
//============================================================

Constants
---------
This list contains all available constants referenced in the 'bonus' commands.

* Status effect (eff)
	Eff_Bleeding, Eff_Blind, Eff_Burning, Eff_Confusion, Eff_Crystalize, Eff_Curse, Eff_DPoison,
	Eff_Fear, Eff_Freeze, Eff_Poison, Eff_Silence, Eff_Sleep, Eff_Stone, Eff_Stun, Eff_Freezing,
	Eff_Heat, Eff_Deepsleep

* Element (e)
	Ele_Dark, Ele_Earth, Ele_Fire, Ele_Ghost, Ele_Holy, Ele_Neutral, Ele_Poison,
	Ele_Undead, Ele_Water, Ele_Wind, Ele_All

* Race (r)
	RC_Angel, RC_Brute, RC_DemiHuman, RC_Demon, RC_Dragon, RC_Fish, RC_Formless,
	RC_Insect, RC_Plant, RC_Player_Human (RC_Player deprecated), RC_Player_Doram, RC_Undead, RC_All

* Monster Race (mr)
	RC2_Goblin, RC2_Kobold, RC2_Orc, RC2_Golem, RC2_Guardian, RC2_Ninja, RC2_GVG, RC2_Battlefield,
	RC2_Treasure, RC2_BioLab, RC2_Manuk, RC2_Splendide, RC2_Scaraba, RC2_OGH_ATK_DEF, RC2_OGH_Hidden,
	RC2_Bio5_Swordman_Thief, RC2_Bio5_Acolyte_Merchant, RC2_Bio5_Mage_Archer, RC2_Bio5_MVP,
	RC2_Clocktower, RC2_Thanatos, RC2_Faceworm, RC2_Hearthunter, RC2_Rockridge, RC2_Werner_Lab,
	RC2_Temple_Demon, RC2_Illusion_Vampire, RC2_Malangdo, RC2_EP172ALPHA, RC2_EP172BETA, RC2_EP172BATH

* Class (c)
	Class_Normal, Class_Boss, Class_Guardian, Class_All

* Size (s)
	Size_Small, Size_Medium, Size_Large, Size_All

* Trigger criteria (bf)
	BF_SHORT	= Trigger on melee attacks
	BF_LONG		= Trigger on ranged attacks
	(Default: BF_SHORT+BF_LONG)
   
	BF_WEAPON	= Trigger on weapon skills 
	BF_MAGIC	= Trigger on magic skills 
	BF_MISC		= Trigger on misc skills
	(Default: BF_WEAPON)
   
	BF_NORMAL	= Trigger on normal attacks
	BF_SKILL	= Trigger on skills
	(Default: BF_SKILL if type is BF_MISC or BF_MAGIC, BF_NORMAL if type is BF_WEAPON)

* Trigger criteria (atf)
	Effect target: (Default: Attacked target)
	ATF_SELF	= Trigger effect on self
	ATF_TARGET	= Trigger effect on target
	
	Attack range criteria: (Default: All attacks)
	ATF_SHORT	= Trigger on melee attacks
	ATF_LONG	= Trigger on ranged attacks
	
	Skill/attack type criteria: (Default: Physical/weapon)
	ATF_SKILL	= Trigger on magic/misc skills
	ATF_WEAPON	= Trigger on weapon skill / physical attacks
	ATF_MAGIC	= Trigger on magic skills
	ATF_MISC	= Trigger on misc skills

* Other values:
	Skill (sk): see 'db/(pre-)re/skill_db.yml' (NOTE: Both skill IDs and names, in quotes, are supported.)
	Monster id (mid): see 'db/(pre-)re/mob_db.yml'
	Item id (iid): see 'db/item_db.yml'
	Item group (ig): see 'db/(pre-)re/item_group_db.yml' and the constants in 'src/map/script_constants.hpp', prefixed with IG_*
	Weapon type (w): see 'doc/item_db.txt' -> SubType


Bonuses
-------
The format of bonuses listed in this file is as follows:
	1. Basic Bonuses
	2. Extended Bonuses
	3. Group-specific Bonuses
	4. Status-related Bonuses
	5. AutoSpell Bonuses
	6. Misc Bonuses

====================
| 1. Basic Bonuses |
====================

Base stats
----------
bonus bStr,n;      			STR + n
bonus bAgi,n;      			AGI + n
bonus bVit,n;      			VIT + n
bonus bInt,n;      			INT + n
bonus bDex,n;      			DEX + n
bonus bLuk,n;      			LUK + n
bonus bAllStats,n; 			STR + n, AGI + n, VIT + n, INT + n, DEX + n, LUK + n
bonus bAgiVit,n;   			AGI + n, VIT + n
bonus bAgiDexStr,n;			STR + n, AGI + n, DEX + n

Trait Stats
-----------
bonus bPow,n;      			POW + n
bonus bSta,n;      			STA + n
bonus bWis,n;      			WIS + n
bonus bSpl,n;      			SPL + n
bonus bCon,n;      			CON + n
bonus bCrt,n;      			CRT + n
bonus bAllTraitStats,n; 		POW + n, STA + n, WIS + n, SPL + n, CON + n, CRT + n

HP/SP/AP
-----
bonus bMaxHP,n;    			MaxHP + n
bonus bMaxHPrate,n;			MaxHP + n% 
bonus bMaxSP,n;    			MaxSP + n
bonus bMaxSPrate,n;			MaxSP + n%
bonus bMaxAP,n;    			MaxAP + n
bonus bMaxAPrate,n;			MaxAP + n%

Atk/Def
-------
bonus bBaseAtk,n;  			Basic attack power + n
bonus bAtk,n;      			ATK + n (unofficial)
bonus bAtk2,n;     			ATK2 + n
bonus bAtkRate,n;  			ATK + n% that won't interfere with Damage modifier and SC_EDP (renewal mode only)
bonus bWeaponAtkRate,n; 	Weapon ATK + n%
bonus bMatk,n;     			Magical attack power + n
bonus bMatkRate,n; 			Magical attack power + n%
bonus bWeaponMatkRate,n;	Weapon Magical ATK + n% (renewal mode only)
bonus bDef,n;      			Equipment DEF + n
bonus bDefRate,n;  			Equipment DEF + n%
bonus bDef2,n;     			VIT based DEF + n
bonus bDef2Rate,n; 			VIT based DEF + n%
bonus bMdef,n;     			Equipment MDEF + n
bonus bMdefRate,n; 			Equipment MDEF + n%
bonus bMdef2,n;    			INT based MDEF + n
bonus bMdef2Rate,n;			INT based MDEF + n%

Additional stats
----------------
bonus bHit,n;         			Hit + n
bonus bHitRate,n;     			Hit + n%
bonus bCritical,n;    			Critical + n
bonus bCriticalLong,n;			Critical + n for normal long ranged attack (won't be shown in status window)
bonus2 bCriticalAddRace,r,n;	Critical + n against enemies of race r
bonus bCriticalRate,n;			Critical + n%
bonus bFlee,n;        			Flee + n
bonus bFleeRate,n;    			Flee + n%
bonus bFlee2,n;       			Perfect Dodge + n
bonus bFlee2Rate,n;   			Perfect Dodge + n%
bonus bPerfectHitRate,n;		On-target impact attack probability n% (only the highest among all is applied)
bonus bPerfectHitAddRate,n;		On-target impact attack probability + n%
bonus bSpeedRate,n;   			Movement speed + n% (only the highest among all is applied, won't be stacked with SC_SPEEDUP0, SC_SPEEDUP1)
bonus bSpeedAddRate,n;			Movement speed + n%
bonus bAspd,n;        			Attack speed + n
bonus bAspdRate,n;    			Attack speed + n%
bonus bAtkRange,n;    			Attack range + n
bonus bAddMaxWeight,n;			MaxWeight + n (in units of 0.1)
bonus bPAtk,n;         			PAtk + n
bonus bPAtkRate,n;     			PAtk + n%
bonus bSMatk,n;         		SMatk + n
bonus bSMatkRate,n;     		SMatk + n%
bonus bRes,n;         			Res + n
bonus bResRate,n;     			Res + n%
bonus bMRes,n;         			MRes + n
bonus bMResRate,n;     			MRes + n%
bonus bHPlus,n;         		HPlus + n
bonus bHPlusRate,n;     		HPlus + n%
bonus bCRate,n;         		CRate + n
bonus bCRateRate,n;     		CRate + n%

=======================
| 2. Extended Bonuses |
=======================

HP/SP
-----
bonus bHPrecovRate,n;   		Natural HP recovery ratio + n%
bonus bSPrecovRate,n;   		Natural SP recovery ratio + n%
bonus2 bHPRegenRate,n,t;		Gain n HP every t milliseconds
bonus2 bHPLossRate,n,t; 		Lose n HP every t milliseconds
bonus2 bSPRegenRate,n,t;		Gain n SP every t milliseconds
bonus2 bSPLossRate,n,t; 		Lose n SP every t milliseconds
bonus2 bRegenPercentHP,n,t;		Gain n% of max HP every t milliseconds
bonus2 bRegenPercentSP,n,t;		Gain n% of max SP every t milliseconds
bonus bNoRegen,x;       		Stops HP or SP regeneration (x: 1=HP, 2=SP)

bonus bUseSPrate,n;         		SP consumption + n%
bonus2 bSkillUseSP,sk,n;    		Decreases SP consumption of skill sk by n
bonus2 bSkillUseSPrate,sk,n;		Decreases SP consumption of skill sk by n%

Atk/Def
-------
bonus2 bSkillAtk,sk,n;    		Increases damage of skill sk by n%
bonus bShortAtkRate,n;			Increases damage of short ranged attacks by n%
bonus bLongAtkRate,n;     		Increases damage of long ranged attacks by n%
bonus bCritAtkRate,n;     		Increases critical damage by +n%
bonus bCritDefRate,n;			Decreases critical damage received by n%
bonus bCriticalDef,n;     		Decreases the chance of being hit by critical hits by n%
bonus2 bWeaponAtk,w,n;    		Adds n ATK when weapon of type w is equipped
bonus2 bWeaponDamageRate,w,n;	Adds n% damage to normal attacks when weapon of type w is equipped

bonus bNearAtkDef,n; 			Adds n% damage reduction against melee physical attacks
bonus bLongAtkDef,n; 			Adds n% damage reduction against ranged physical attacks
bonus bMagicAtkDef,n;			Adds n% damage reduction against magical attacks
bonus bMiscAtkDef,n; 			Adds n% damage reduction against MISC attacks (traps, falcon, ...)

bonus bNoWeaponDamage,n;		Adds n% reduction to received physical damage
bonus bNoMagicDamage,n; 		Adds n% reduction to received magical effect (attack, healing, support spells are all blocked)
bonus bNoMiscDamage,n;  		Adds n% reduction to received misc damage

Healing
-------
bonus bHealPower,n;						Increases heal amount of all heal skills by n%
bonus bHealPower2,n;					Increases heal amount if you are healed by any skills by n%
bonus2 bSkillHeal,sk,n;					Increases heal amount of skill sk by n%
bonus2 bSkillHeal2,sk,n;				Increases heal amount if you are healed by skill sk by n%
bonus bAddItemHealRate,n;				Increases HP recovered by n% for healing items
bonus2 bAddItemHealRate,iid,n;			Increases HP recovered by n% for item iid
bonus2 bAddItemGroupHealRate,ig,n;		Increases HP recovered by n% for items of item group ig
bonus bAddItemSPHealRate,n;				Increases SP recovered by n% for healing items
bonus2 bAddItemSPHealRate,iid,n;		Increases SP recovered by n% for item iid
bonus2 bAddItemGroupSPHealRate,ig,n;	Increases SP recovered by n% for items of item group ig

Cast time/delay
---------------
bonus bCastrate,n;             		Skill cast time rate + n%. (If RENEWAL_CAST is defined, this bonus is equal to bVariableCastrate)
bonus2 bCastrate,sk,n;         		Adjust casting time of skill sk by n%.(If RENEWAL_CAST is defined, this bonus is equal to bVariableCastrate)

bonus bFixedCastrate,n;        		Increases fixed cast time of all skills by n% (has effect in RENEWAL_CAST only)
bonus2 bFixedCastrate,sk,n;    		Increases fixed cast time of skill sk by n% (has effect in RENEWAL_CAST only)
bonus bVariableCastrate,n;     		Increases variable cast time of all skills by n%. (If RENEWAL_CAST is NOT defined, this bonus is equal to bCastrate)
bonus2 bVariableCastrate,sk,n; 		Increases variable cast time of skill sk by n% (If RENEWAL_CAST is NOT defined, this bonus is equal to bCastrate)

bonus bFixedCast,t;            		Increases fixed cast time of all skills by t milliseconds (has effect in RENEWAL_CAST only)
bonus2 bSkillFixedCast,sk,t;   		Increases fixed cast time of skill sk by t milliseconds (has effect in RENEWAL_CAST only)
bonus bVariableCast,t;         		Increases variable cast time of all skills by t milliseconds
bonus2 bSkillVariableCast,sk,t;		Increases variable cast time of skill sk by t milliseconds

bonus bNoCastCancel; 			Prevents casting from being interrupted when hit (does not work in GvG)
bonus bNoCastCancel2;			Prevents casting from being interrupted when hit (works even in GvG)

bonus bDelayrate,n;        		Increases skill delay by n%
bonus2 bSkillDelay,sk,t;		Increases delay of skill sk by t milliseconds
bonus2 bSkillCooldown,sk,t;		Increases cooldown of skill sk by t milliseconds

=============================
| 3. Group-specific Bonuses |
=============================

Damage modifiers
----------------
bonus2 bAddEle,e,x;       		+x% physical damage against element e
bonus3 bAddEle,e,x,bf;    		+x% physical damage against element e with trigger criteria bf
bonus2 bMagicAddEle,e,x;  		+x% magical damage against element e
bonus2 bSubEle,e,x;       		+x% damage reduction against attack element e
bonus3 bSubEle,e,x,bf;    		+x% damage reduction against attack element e with trigger criteria bf
bonus2 bSubDefEle,e,x;    		+x% physical damage reduction from enemy with defense element e
bonus2 bMagicSubDefEle,e,x;		+x% magic damage reduction from enemy with defense element e

bonus2 bAddRace,r,x;      		+x% physical damage against race r
bonus2 bMagicAddRace,r,x; 		+x% magical damage against race r
bonus2 bSubRace,r,x;      		+x% damage reduction against race r
bonus3 bSubRace,r,x,bf;    		+x% damage reduction against race r with trigger criteria bf 

bonus2 bAddClass,c,x;     		+x% physical damage against class c
bonus2 bMagicAddClass,c,x;		+x% magical damage against class c
bonus2 bSubClass,c,x;     		+x% damage reduction against class c

bonus2 bAddSize,s,x;      		+x% physical damage against size s
bonus2 bMagicAddSize,s,x; 		+x% magical damage against size s
bonus2 bSubSize,s,x;      		+x% damage reduction against size s
bonus2 bWeaponSubSize,s,x;		+x% physical damage reduction against size s
bonus2 bMagicSubSize,s,x;		+x% magic damage reduction against size s
bonus bNoSizeFix;       		Ignores the size modifier when calculating damage

bonus2 bAddDamageClass,mid,x;     	+x% physical damage against monster mid
bonus2 bAddMagicDamageClass,mid,x;	+x% magical damage against monster mid
                                  	NOTE: Against players, mid is the player's job id.
									LIMIT: Only 10 of these bonuses can be set. Those which exceed 10 are ignored.

bonus2 bAddDefMonster,mid,x;      	+x% physical damage reduction against monster mid
bonus2 bAddMDefMonster,mid,x;     	+x% magical damage reduction against monster mid
                                  	NOTE: Against players, mid is the player's job id.

bonus2 bAddRace2,mr,x;			+x% damage against monster race mr
bonus2 bSubRace2,mr,x;			+x% damage reduction against monster race mr
bonus2 bMagicAddRace2,mr,x;		+x% magic damage against monster race mr

bonus2 bSubSkill,sk,n;  		Reduces n% damage received from skill sk

bonus bAbsorbDmgMaxHP,n;		If the damage received is more than n% of Max HP, the damage received is [TotalDamage] - [n% of MaxHP] (Doesn't stack, will use the highest value) (Legacy rAthena behavior)
bonus bAbsorbDmgMaxHP2,n;		If the damage received is more than n% of Max HP, the damage received is reduced to n% of MaxHP (Doesn't stack, will use the highest value) (Official behavior)

Atk/Def
-------
bonus bAtkEle,e;          		Gives the player's attacks element e
bonus bDefEle,e;          		Gives the player's defense element e

bonus2 bMagicAtkEle,e,x;  		Increases damage of e element magic by x%

bonus bDefRatioAtkRace,r; 		Deals more damage to enemies of race r with higher defense
bonus bDefRatioAtkEle,e;  		Deals more damage to enemies of element e with higher defense
bonus bDefRatioAtkClass,c;		Deals more damage to enemies of class c with higher defense

bonus4 bSetDefRace,r,n,t,y; 	Set DEF to y of an enemy of race r at n% for t milliseconds with normal attack
bonus4 bSetMDefRace,r,n,t,y;	Set MDEF to y of an enemy of race r at n% for t milliseconds with normal attack

Ignore Def
----------
bonus bIgnoreDefEle,e;  		Disregard DEF against enemies of element e
bonus bIgnoreDefRace,r; 		Disregard DEF against enemies of race r
bonus bIgnoreDefClass,c;		Disregard DEF against enemies of class c
bonus bIgnoreMDefRace,r;		Disregard MDEF against enemies of race r
bonus2 bIgnoreDefRaceRate,r,n; 	Disregard n% of the target's DEF if the target belongs to race r
bonus2 bIgnoreMdefRaceRate,r,n; 	Disregard n% of the target's MDEF if the target belongs to race r
bonus2 bIgnoreMdefRace2Rate,mr,n; 	Disregard n% of the target's MDEF if the target belongs to monster race mr
bonus bIgnoreMDefEle,e; 		Disregard MDEF against enemies of element e
bonus2 bIgnoreDefClassRate,c,n;	Disregard n% of the target's DEF if the target belongs to class c
bonus2 bIgnoreMdefClassRate,c,n;	Disregard n% of the target's MDEF if the target belongs to class c

Ignore Res
----------
bonus2 bIgnoreResRaceRate,r,n;		Disregard n% of the target's Res if the target belongs to race r
bonus2 bIgnoreMResRaceRate,r,n; 	Disregard n% of the target's MRes if the target belongs to race r

Experience
----------
bonus2 bExpAddRace,r,x; 		Increase exp gained by x% against enemies of race r
bonus2 bExpAddClass,c,x;		Increase exp gained by x% against enemies of class c

=============================
| 4. Status-related Bonuses |
=============================

bonus2 bAddEff,eff,n;       		Adds a n/100% chance to cause status eff on the target when attacking
bonus2 bAddEff2,eff,n;      		Adds a n/100% chance to cause status eff on self when attacking
bonus2 bAddEffWhenHit,eff,n;		Adds a n/100% chance to cause status eff on the enemy when being hit by physical damage
bonus2 bResEff,eff,n;       		Adds a n/100% tolerance to status eff

bonus3 bAddEff,eff,n,atf;       		Adds a n/100% chance to cause status eff on the target when attacking
bonus4 bAddEff,eff,n,atf,t;     		Adds a n/100% chance to cause status eff for t milliseconds on the target when attacking
bonus3 bAddEffWhenHit,eff,n,atf;		Adds a n/100% chance to cause status eff on the target when being hit by physical damage
bonus4 bAddEffWhenHit,eff,n,atf,t;	Adds a n/100% chance to cause status eff for t milliseconds on the target when being hit by physical damage
                              		atf is the trigger criteria:
                              		 Effect target: (Default: Attacked target)
                              		  ATF_SELF   = trigger effect on self
                              		  ATF_TARGET = trigger effect on target
                              		 Attack range criteria: (Default: All attacks)
                              		  ATF_SHORT  = trigger on melee attacks
                              		  ATF_LONG   = trigger on ranged attacks
                              		 Skill/attack type criteria: (Default: Physical/weapon)
                             		  ATF_SKILL  = trigger on magic/misc skills
                              		  ATF_WEAPON = trigger on weapon skill / physical attacks
                              		  ATF_MAGIC  = trigger on magic skills
                              		  ATF_MISC   = trigger on misc skills

bonus3 bAddEffOnSkill,sk,eff,n;   	Adds a n/100% chance to cause status eff on enemy when using skill sk
bonus4 bAddEffOnSkill,sk,eff,n,atf;	Adds a n/100% chance to cause status eff on the target when using skill sk
bonus5 bAddEffOnSkill,sk,eff,n,atf,t;	Adds a n/100% chance to cause status eff for t milliseconds on the target when using skill sk
                                 	atf is the trigger criteria:
                                 	  ATF_SELF   = trigger effect on self
                                 	  ATF_TARGET = trigger effect on target

bonus2 bComaClass,c,n;      		Adds a n/100% chance to cause Coma when attacking a target of class c (regardless the type of attack)
bonus2 bComaRace,r,n;       		Adds a n/100% chance to cause Coma when attacking a target of race r (regardless the type of attack)

bonus2 bWeaponComaEle,e,n;  		Adds a n/100% chance to cause Coma when attacking a target of element e with a normal attack
bonus2 bWeaponComaClass,c,n;		Adds a n/100% chance to cause Coma when attacking a target of class c with a normal attack
bonus2 bWeaponComaRace,r,n; 		Adds a n/100% chance to cause Coma when attacking a target of race r with a normal attack

========================
| 5. AutoSpell Bonuses |
========================
NOTES:
  - For all AutoSpell bonuses, target does not have be within the spell's range to go off.
  -- Enable conf/battle/battle.conf::autospell_check_range to force a range check.
  - By default, AutoSpell skills are casted on target unless it is a self or support skill (inf = 4/16).

bonus3 bAutoSpell,sk,y,n;       	Adds a n/10% chance to cast skill sk of level y when attacking
bonus3 bAutoSpellWhenHit,sk,y,n;	Adds a n/10% chance to cast skill sk of level y when being hit by a direct attack

bonus4 bAutoSpell,sk,y,n,i;          	Adds a n/10% chance to cast skill sk of level y when attacking
bonus5 bAutoSpell,sk,y,n,bf,i;       	Adds a n/10% chance to cast skill sk of level y when attacking with trigger criteria bf
bonus4 bAutoSpellWhenHit,sk,y,n,i;   	Adds a n/10% chance to cast skill sk of level y when being hit by a direct attack
bonus5 bAutoSpellWhenHit,sk,y,n,bf,i;	Adds a n/10% chance to cast skill sk of level y when being hit by a direct attack with trigger criteria bf
                                        i provides additional options (bitfield):
                                          &0 = cast on self
                                          &1 = cast on enemy
                                          &2 = use random skill level in [1..y]
                                          &3 = 1+2 (random level on enemy)

bonus4 bAutoSpellOnSkill,sk,x,y,n;  	Adds a n/10% chance to autospell skill x at level y when using skill sk
bonus5 bAutoSpellOnSkill,sk,x,y,n,i;	Adds a n/10% chance to autospell skill x at level y when using skill sk
                                    	i provides additional options (bitfield):
                                    	  &1 = forces the skill to be casted on self, rather than on the target of skill sk
                                    	  &2 = random skill level in [1..y] is chosen

===================
| 6. Misc Bonuses |
===================

HP/SP drain
-----------
bonus bHPDrainValue,n;        		Heals +n HP with a normal attack
bonus2 bHPDrainValueRace,r,n; 		Heals +n HP when attacking a monster of race r with normal attack
bonus2 bHpDrainValueClass,c,n;		Heals +n HP when attacking a monster of class c with normal attack

bonus bSPDrainValue,n;        		Heals +n SP with a normal attack
bonus2 bSPDrainValueRace,r,n; 		Heals +n SP when attacking a monster of race r with normal attack
bonus2 bSpDrainValueClass,c,n;		Heals +n SP when attacking a monster of class c with normal attack

bonus2 bHPDrainRate,x,n;		Adds a x/10% chance to drain n% HP from inflicted damage when attacking
bonus2 bSPDrainRate,x,n;		Adds a x/10% chance to drain n% SP from inflicted damage when attacking

HP/SP vanish
------------
bonus2 bHPVanishRate,x,n;		Add a x/10% chance of decreasing enemy's HP amount by n% with a normal attack
bonus3 bHPVanishRaceRate,r,x,n;		Add a x/10% chance of decreasing enemy's HP amount by n% when attacking, depends on enemy race r
bonus3 bHPVanishRate,x,n,bf;	Add a x/10% chance of decreasing enemy's HP amount by n% when attacking with trigger criteria bf

bonus2 bSPVanishRate,x,n;		Add a x/10% chance of decreasing enemy's SP amount by n% with a normal attack
bonus3 bSPVanishRaceRate,r,x,n;		Add a x/10% chance of decreasing enemy's SP amount by n% when attacking, depends on enemy race r
bonus3 bSPVanishRate,x,n,bf;	Add a x/10% chance of decreasing enemy's SP amount by n% when attacking with trigger criteria bf

bonus3 bStateNoRecoverRace,r,x,t;	Set a no recovery state of an enemy of race r at x/100% for t milliseconds with normal attack.

HP/SP gain
------------
bonus bHPGainValue,n;     		Heals +n HP when killing an enemy with a melee-physical attack
bonus bSPGainValue,n;     		Heals +n SP when killing an enemy with a melee-physical attack
bonus2 bSPGainRace,r,n;   		Heals +n SP when killing an enemy of race r with a melee-physical attack
bonus bLongHPGainValue,n;     		Heals +n HP when killing an enemy with a range-physical attack
bonus bLongSPGainValue,n;     		Heals +n SP when killing an enemy with a range-physical attack
bonus bMagicHPGainValue,n;		Heals +n HP when killing an enemy with a magical attack
bonus bMagicSPGainValue,n;		Heals +n SP when killing an enemy with a magical attack

Damage return
-------------
bonus bShortWeaponDamageReturn,n;	Reflects n% of received melee damage back to the enemy that caused it
bonus bLongWeaponDamageReturn,n; 	Reflects n% of received ranged damage back to the enemy that caused it
bonus bMagicDamageReturn,n;      	Adds a n% chance to reflect targetted magic spells back to the enemy that caused it
bonus bReduceDamageReturn,n;		Reduces reflected damage (melee/ranged/magic) by n%

Strip/Break equipment
---------------------
bonus bUnstripableWeapon;		Weapon cannot be taken off via Strip skills
bonus bUnstripableArmor; 		Armor cannot be taken off via Strip skills
bonus bUnstripableHelm;  		Helm cannot be taken off via Strip skills
bonus bUnstripableShield;		Shield cannot be taken off via Strip skills
bonus bUnstripable;      		All equipment cannot be taken off via strip skills

bonus bUnbreakableGarment;		Garment cannot be damaged/broken by any means
bonus bUnbreakableWeapon; 		Weapon cannot be damaged/broken by any means
bonus bUnbreakableArmor;  		Armor cannot be damaged/broken by any means
bonus bUnbreakableHelm;   		Helm cannot be damaged/broken by any means
bonus bUnbreakableShield; 		Shield cannot be damaged/broken by any means
bonus bUnbreakableShoes;  		Shoes cannot be damaged/broken by any means
bonus bUnbreakable,n;       		Reduces the break chance of all equipped equipment by n%

bonus bBreakWeaponRate,n;		Adds a n/100% chance to break enemy's weapon while attacking (stacks with other break chances)
bonus bBreakArmorRate,n; 		Adds a n/100% chance to break enemy's armor while attacking (stacks with other break chances)

Monster drops
-------------
bonus2 bDropAddRace,r,x;	Adds x% to player's drop rate when killing a monster with race r.
bonus2 bDropAddClass,c,x;	Adds x% to player's drop rate when killing a monster with class c.

bonus3 bAddMonsterIdDropItem,iid,mid,n;	Adds a n/100% chance of dropping item iid when killing monster mid

bonus2 bAddMonsterDropItem,iid,n;    	Adds a n/100% chance for item iid to be dropped when killing a monster
bonus3 bAddMonsterDropItem,iid,r,n;  	Adds a n/100% chance for item iid to be dropped when killing a monster of race r
bonus3 bAddClassDropItem,iid,c,n;   	Adds a n/100% chance for item iid to be dropped when killing a monster of class c
bonus2 bAddMonsterDropItemGroup,ig,n;	Adds a n/100% chance to get an item of group type ig when killing a monster
bonus3 bAddMonsterDropItemGroup,ig,r,n;	Adds a n/100% chance to get an item of group type ig when killing a monster of race r
bonus3 bAddClassDropItemGroup,ig,c,n;	Adds a n/100% chance to get an item of group type ig when killing a monster of class c
                                     	NOTE: If 'x' is negative value, then it's a part of formula:
                                     	      chance = -n*(killed_mob_level/10)+1
                                     	LIMIT: Only 10 of these bonuses can be set. Those which exceed 10 are ignored.

bonus2 bGetZenyNum,x,n;   		Adds a n% chance of gaining 1~x zeny when killing a monster (only the highest among all is applied)
bonus2 bAddGetZenyNum,x,n;		Adds a n% chance of gaining 1~x zeny when killing a monster
                          		NOTE: If n < 0, the max zeny to gain is -x*monster level.

Misc effects
------------
bonus bDoubleRate,n;      		Double Attack probability n% (works with all weapons | only the highest among all is applied)
bonus bDoubleAddRate,n;   		Double Attack probability + n% (works with all weapons)
bonus bSplashRange,n;     		Splash attack radius + n (only the highest among all is applied)
bonus bSplashAddRange,n;  		Splash attack radius + n
                          		NOTE: n=1 makes a 3*3 cells area, n=2 a 5*5 area, etc.
bonus2 bAddSkillBlow,sk,n;		Knock back the target by n cells when using skill sk
bonus bNoKnockback;     		Character is no longer knocked back by enemy skills with such effect
bonus bNoGemStone;      		Skills requiring Gemstones do not require them
                          		NOTE: Hocus Pocus still requires 1 Yellow Gemstone, Ganbantein requirements not reduced
bonus bIntravision;     		Always see Hiding and Cloaking players/mobs
bonus bPerfectHide;     		Hidden/cloaked character is no longer detected by monsters with 'detector' mode
bonus bRestartFullRecover;	When reviving, HP and SP are fully healed
bonus bClassChange,n;     		Gives a n/100% chance to change the attacked monster's class with normal attack
bonus bAddStealRate,n;    		Increases success rate of Steal skill by n/100%
bonus bNoMadoFuel;			Nullify Magic Gear Fuel requirement for skills.
bonus bNoWalkDelay;				Give infinite Endure.
//===== rAthena Documentation ================================
//= Item Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20220402
//===== Description: =========================================
//= Explanation of the item_db.yml file and structure.
//============================================================

---------------------------------------

Id: Item ID.

---------------------------------------

AegisName: Server name to reference the item in scripts and lookups, should use no spaces.

---------------------------------------

Name: Name in English for displaying as output for atcommands and script commands.

---------------------------------------

Type: Item's type.

Healing      - Healing item.
Usable       - Usable item.
Etc          - Etc item.
Armor        - Armor/Garment/Boots/Headgear/Accessory item.
Weapon       - Weapon item.
Card         - Card item.
PetEgg       - Pet egg item.
PetArmor     - Pet equipment item.
Ammo         - Ammo (Arrows/Bullets/etc) item.
DelayConsume - Usable with delayed consumption (intended for 'itemskill').
               Items using the 'itemskill' script command are consumed after selecting a target. Any other command will NOT consume the item.
ShadowGear   - Shadow Equipment item.
Cash         - Another delayed consume that requires user confirmation before using the item.
Amulet       - Amulet(����) item, it must set 'enable_amulet' to 'yes' from 'conf/battle/BetterRA.conf'

---------------------------------------

SubType: Indicates the weapon-class of the item.

For weapons, the types are:
Fist
Dagger
1hSword
2hSword
1hSpear
2hSpear
1hAxe
2hAxe
Mace
Staff
Bow
Knuckle
Musical
Whip
Book
Katar
Revolver
Rifle
Gatling
Shotgun
Grenade
Huuma
2hStaff

For ammo, the types are:
Arrow
Dagger
Bullet
Shell
Grenade
Shuriken
Kunai
CannonBall
ThrowWeapon

For cards, the types are:
Normal (default)
Enchant

---------------------------------------

Buy: Default buying price. When not specified, becomes double the sell price.

---------------------------------------

Sell: Default selling price. When not specified, becomes half the buy price.

---------------------------------------

Weight: Item's weight. Each 10 is 1 weight.

---------------------------------------

Attack: Weapon's attack.

---------------------------------------

MagicAttack: Weapon's magic attack. (Renewal only)

---------------------------------------

Defense: Armor's defense.

---------------------------------------

Range: Weapon's attack range.

---------------------------------------

Slots: Amount of slots the item possesses.

---------------------------------------

Jobs: Equippable jobs.

All          - Applies to all jobs listed below.
Acolyte
Alchemist
Archer
Assassin
BardDancer   - Applies to Bard and Dancer.
Blacksmith
Crusader
Gunslinger
Hunter
KagerouOboro - Applies to Kagerou and Oboro.
Knight
Mage
Merchant
Monk
Ninja
Novice
Priest
Rebellion
Rogue
Sage
SoulLinker
StarGladiator
Summoner
SuperNovice
Swordman
Taekwon
Thief
Wizard

---------------------------------------

Classes: Equippable upper-types.

All         - Applies to all classes.
Normal      - Normal classes (no Baby/Transcendent/Third classes).
Upper       - Transcedent classes (no Transcedent-Third classes).
Baby        - Baby classes (no Third-Baby classes).
Third       - Third classes (no Transcedent-Third or Third-Baby classes).
Third_Upper - Transcedent-Third classes.
Third_Baby  - Third-Baby classes.
Fourth      - Fourth classes.
All_Upper   - All Transcedent classes
All_Baby    - All baby classes
All_Third   - Applies to all Third classes.

---------------------------------------

Gender: Gender restriction.

Female
Male
Both

---------------------------------------

Locations: Equipment's placement.

Head_Top               - Upper Headgear
Head_Mid               - Middle Headgear
Head_Low               - Lower Headgear
Armor                  - Armor
Right_Hand             - Weapon
Left_Hand              - Shield
Garment                - Garment/Robe
Shoes                  - Shoes
Right_Accessory        - Accessory Right
Left_Accessory         - Accessory Left
Costume_Head_Top       - Costume Top Headgear
Costume_Head_Mid       - Costume Mid Headgear
Costume_Head_Low       - Costume Low Headgear
Costume_Garment        - Costume Garment/Robe
Ammo                   - Ammo
Shadow_Armor           - Shadow Armor
Shadow_Weapon          - Shadow Weapon
Shadow_Shield          - Shadow Shield
Shadow_Shoes           - Shadow Shoes
Shadow_Right_Accessory - Shadow Accessory Right (Earring)
Shadow_Left_Accessory  - Shadow Accessory Left (Pendant)

Both_Hand              - Right_Hand + Left_Hand
Both_Accessory         - Right_Accessory + Left_Accessory

---------------------------------------

WeaponLevel: Weapon level. Used for refinement.

---------------------------------------

EquipLevelMin: Base level required to be able to equip.

---------------------------------------

EquipLevelMax: Only able to equip if base level is lower than this.

---------------------------------------

Refineable: Defines if the item can be refined.

---------------------------------------

Gradable: Defines if the item can be graded.

---------------------------------------

View: For normal items, defines a replacement view-sprite for the item.

---------------------------------------

AliasName: Use the AegisName of another item which will be sent to the client instead of this item.
           This makes items visually appear as another without having to change the client data.

---------------------------------------

Flags: Different types of flags for an item.

BuyingStore  - If the item is available to Buying Stores.
DeadBranch   - If the item is a Dead Branch type.
Container    - If the item is part of a Container.
UniqueId     - If the item is a unique stack.
BindOnEquip  - If the item is bound to the character upon equipping.
DropAnnounce - If the item has a special announcement to self on drop.
NoConsume    - If the item is consumed on use.
DropEffect   - If the item has a special effect on the ground when dropped by a monster.

---------------------------------------

Delay: Item use delay.
  Duration - Duration of delay in seconds.
  Status   - Status Change used to keep track of the delay.

---------------------------------------

Stack: Item stack amount.
  Amount       - Maximum amount that can be stacked.
  Inventory    - If the stack is applied to player's inventory.
  Cart         - If the stack is applied to the player's cart.
  Storage      - If the stack is applied to the player's storage.
  GuildStorage - If the stack is applied to the player's guild storage.

---------------------------------------

NoUse: Conditions when the item is unusable.
  Override - Group level to override these conditions.
  Sitting  - If the item can not be used while sitting.

---------------------------------------

Trade: Trade restrictions.
  Override       - Group level to override these conditions.
  NoDrop         - If the item can not be dropped.
  NoTrade        - If the item can not be traded.
  TradePartner   - If the item can not be traded to the player's partner.
  NoSell         - If the item can not be sold.
  NoCart         - If the item can not be put in a cart.
  NoStorage      - If the item can not be put in a storage.
  NoGuildStorage - If the item can not be put in a guild storage.
  NoMail         - If the item can not be put in a mail.
  NoAuction      - If the item can not be put in an auction.

---------------------------------------

Script: Script to execute when the item is used/equipped.

---------------------------------------

EquipScript: Script to execute when the item is equipped.
             Warning, not all item bonuses will work here as expected.

---------------------------------------

UnEquipScript: Script to execute when the item is unequipped or when a rental item expires.
               Warning, not all item bonuses will work here as expected.
//===== rAthena Documentation ================================
//= Item Database
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20210624
//===== Description: =========================================
//= Explanation of the item_group.yml file and structure.
//============================================================

Items within an item group can be retrieved through the 'groupranditem',
'getrandgroupitem', and 'getgroupitem' script commands.
The table below explains which fields are accessed in each.

+===============+=================+====================+================+
| Field         | 'groupranditem' | 'getrandgroupitem' | 'getgroupitem' |
+===============+=================+====================+================+
| GroupID       |       YES       |        YES         |      YES       |
+===============+=================+====================+================+
| Item          |       YES       |        YES         |      YES       |
+===============+=================+====================+================+
| Rate          |       YES       |        YES         |      YES       |
+===============+=================+====================+================+
| Amount        |       no        |     OPTIONAL       |      YES       |
+===============+=================+====================+================+
| SubGroup      |    OPTIONAL     |     OPTIONAL       |      YES       |
+===============+=================+====================+================+
| Announced     |       no        |        no          |      YES       |
+===============+=================+====================+================+
| Duration      |       no        |        no          |      YES       |
+===============+=================+====================+================+
| UniqueId      |       no        |        no          |      YES       |
+===============+=================+====================+================+
| Bound         |       no        |        no          |      YES       |
+===============+=================+====================+================+
| Named         |       no        |        no          |      YES       |
+===============+=================+====================+================+

---------------------------------------

GroupID: See the "Item Group ID" section in 'src/map/itemdb.hpp' and the "item groups" section in 'src/map/script_constants.hpp'.
         Supports IG_* constants. 'IG_' is appended to the name when the file is read.

---------------------------------------

Item: Available item that will be obtained from this item group.
        Requires the AegisName of the item.

---------------------------------------

Rate: Probability to get the item. Not a percentage value!

Examples:
  - Group: MyItemGroup
    Contain:
      - SubGroup: 1
        List:
          - Item: Knife
            Rate: 5
          - Item: Dagger
            Rate: 1

	- Knife has chance 5/6 (83.3%) to be obtained
	- Dagger has chance 1/6 (16.7%) to be obtained

---------------------------------------

Amount: Amount of item that will be obtained.

---------------------------------------

SubGroup: Setting this to '0' makes the item always obtainable ("must" item).
		  SubGroup value will allocate where the item will be stored at random group.

	Item Group:
      - Group: MyItemGroup
        Contain:
          - SubGroup: 0
            List:
              - Item: Knife       # "must" item(s)
              - Item: Dagger      # "must" item(s)
          - SubGroup: 1
            List:
              - Item: Stiletto    # random at SubGroup 1
                Rate: 5
              - Item: Stiletto_   # random at SubGroup 1
                Rate: 2
          - SubGroup: 2
            List:
              - Item: Stiletto    # random at SubGroup 2
                Rate: 5
              - Item: Dagger_     # random at SubGroup 2
                Rate: 4

	Usages:
	getgroupitem(<group_id>)
	------------
	-> 'getgroupitem(IG_MyItemGroup);'
		- Player always gets 1x Knife and 1x Dagger
		- Player has chance to get 1x Stiletto by chance 5/7 from SubGroup 1
		- Player has chance to get 1x Stiletto_ by chance 2/7 from SubGroup 1
		- Player has chance to get 1x Stiletto by chance 5/9 from SubGroup 2
		- Player has chance to get 1x Dagger_ by chance 4/9 from SubGroup 2

	getrandgroupitem(<group_id>{,<quantity>{,<sub_group>}})
	------------
	-> 'getrandgroupitem(IG_MyItemGroup);'
		- Random SubGroup: 1, Amount: [Based on list]
		- Equals to: getrandgroupitem(IG_MyItemGroup,0) and getrandgroupitem(IG_MyItemGroup,0,1)
		- Player has chance to get 1x Stiletto by chance 5/7 from SubGroup 1
		- Player has chance to get 1x Stiletto_ by chance 2/7 from SubGroup 1
		- 'must' and 'SubGroup 2' are ignored

	-> 'getrandgroupitem(IG_MyItemGroup,1);'
		- Random SubGroup: 1, Amount: 2, ignore 'amount' on the list
		- Equals to: getrandgroupitem(IG_MyItemGroup,1,1)
		- Player has chance to get 2x Stiletto by chance 5/7 from SubGroup 1
		- Player has chance to get 2x Stiletto_ by chance 2/7 from SubGroup 1
		- 'must' and 'SubGroup 2' are ignored

	-> 'getrandgroupitem(IG_MyItemGroup,3, 0);'
		- Random SubGroup: 'must', Amount: 2, ignore 'amount' on the list
		- Player has chance to get 3x Knife by chance 1/2 from 'must' SubGroup
		- Player has chance to get 3x Dagger by chance 1/2 from 'must' SubGroup
		- 'SubGroup 1' and 'SubGroup 2' are ignored

	groupranditem(<group id>{,<sub_group>})
	------------
	This command only returns an Item ID from random SubGroup. Combine with 'getitem'
	to retrieve the items.
	-> 'groupranditem(IG_MyItemGroup);'
		- Random SubGroup: 1
		- Returns Item ID of Stiletto by chance 5/7 from SubGroup 1
		- Returns Item ID of Stiletto_ by chance 2/7 from SubGroup 1
		- 'must' and 'SubGroup 2' are ignored
	-> 'groupranditem(IG_MyItemGroup,0);'
		- Random SubGroup: 0
		- Returns Item ID of Knife by chance 5/7 from 'must' SubGroup
		- Returns Item ID of Dagger by chance 2/7 from 'must' SubGroup
		- 'SubGroup 1' and 'SubGroup 2' are ignored

---------------------------------------

Announced: If player obtained this item, it will be broadcast to the server.
           "[Player] has won [Item] from 'Box'"

---------------------------------------

Duration: Makes the item a rental item, which will be expire in the given amount
          of minutes. Not intended for use with stackable items.

---------------------------------------

UniqueId: Makes the given item(s) with Unique ID. Item will be stacked ONLY each group
      when it obtained. Cannot be stacked with same item, even it's stackable item.
	  Example, there is Box (just call it Apple_Box) that contains 3x Apples with
	  UniqueId = 1. When Apples appear it will stack for each 3 even another 3x Apples
	  are appeared by same box. So it will be filled in inventory as:
	        3x Apples | 3x Apples | so on... | nx Apples (normal)

---------------------------------------

Bound: Binds the obtained item.
       See 'getitembound' in 'doc/script_commands.txt' for valid bound types.

---------------------------------------

Named: Inscribes the item with the obtainer's name.

---------------------------------------
//===== rAthena Documentation ================================
//= Mapflag List
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20130830
//===== Description: =========================================
//= List of available mapflags and their functions.
//============================================================

This file describes the functions of mapflags, which determine the behavior of a
map in various situations. For instructions on setting a mapflag, refer to the
documentation in '/doc/script_commands.txt'.

To search for a mapflag, write "*" before its name.
The format of this file is as follows:
	1. Restrictions
	2. Battle-related
	3. Map Effects
	4. Miscellaneous

===================
| 1. Restrictions |
===================
---------------------------------------

*noreturn

Disables usage of map-warping items on a map:
 - Butterfly Wing (ID 602)
 - Yellow/Green/Red/Blue Butterfly Wing (IDs 14582-14585)
 - Siege Teleport Scroll (ID 14591)
 - Dungeon Teleport Scroll 1/2/3 (IDs 14527, 14581, 12352)

The 'warpparty' and 'warpguild' script commands are also blocked for destinations outside the
player's current map.

---------------------------------------

*noteleport

Disables all means of teleportation within a map:
 - Items Fly Wing (ID 601) and Giant Fly Wing (ID 12212) are disabled.
 - Skills AL_TELEPORT, TK_HIGHJUMP, and SC_DIMENSIONDOOR are disabled.
 - Skills RG_INTIMIDATE, NPC_EXPULSION, and CG_TAROTCARD will not teleport their intended targets.
 - Script commands using "Random" as the destination will fail.
 - Script command 'warpwaitingpc' will fail with "SavePoint" as the destination.
 - Script command 'unitwarp' will fail for players.
 - Atcommand @jump is disabled.

---------------------------------------

*nowarp

Disables warping from a map:
 - Script commands 'warpparty' and 'warpguild' will not warp players on 'nowarp' maps.
 - Atcommands @warp, @go, @load, and @jump are disabled.
 - Atcommands @partyrecall, @guildrecall, and @recallall will not warp players on 'nowarp' maps.
 - Skill GD_EMERGENCYCALL will not warp players on 'nowarp' maps.
 - Unit UNT_CALLFAMILY will not warp players on 'nowarp' maps.

---------------------------------------

*nowarpto

Disables warping to a map:
 - Atcommands @warp, @go, @load, and @jump are disabled to the 'nowarpto' map.
 - Atcommands @partyrecall, @guildrecall, and @recallall are disabled.
 - Command /memo is disabled.
 - Skill GD_EMERGENCYCALL is disabled if flag 16 of 'emergency_call' is set in
   '/conf/battle/skill.conf'. This will not work for 'gvg_castle' maps.

---------------------------------------

*nogo

Disables usage of command @go on a map.

---------------------------------------

*nosave	<map name>

Disables auto-saving on a map. Players who log off on the map will be warped to <map name> when
they next log in. "SavePoint", without quotes, is also valid for this field.

---------------------------------------

*nomemo

Disables the /memo command to save a warp point on a map, and also disables usage of marriage
skills WE_CALLPARTNER, WE_CALLPARENT, and WE_CALLBABY.

---------------------------------------

*noitemconsumption

Disables usage of items on a map.

---------------------------------------

*notrade

Disables trading on a map.

---------------------------------------

*nodrop

Disables dropping items on a map.

Note that items may still be dropped if a player's inventory is full and 'item_flooritem_check'
is disabled in '/conf/battle/items.conf'.

---------------------------------------

*noloot
*nomobloot
*nomvploot

Disables normal monsters and MVPs from dropping items on a map. Looted items will always drop.
'noloot' is the same as 'nomobloot' and 'nomvploot' combined.
		
---------------------------------------

*noexp
*nobaseexp
*nojobexp

Disables gaining base and job experience from monsters, including MVP bonuses, on a map.
'noexp' is the same as 'nobaseexp' and 'nojobexp' combined.

---------------------------------------

*nopenalty
*noexppenalty
*nozenypenalty

Disables the loss of experience and Zeny upon death on a map.
'nopenalty' is the same as 'noexppenalty' and 'nozenypenalty' combined.

Notes:
'noexppenalty' also affects pets, and skills PR_REDEMPTIO and LG_INSPIRATION will not deduct EXP.
'nozenypenalty' only applies if 'zeny_penalty' is enabled in '/conf/battle/exp.conf'.

---------------------------------------

*nochat

Disables chatroom creation on a map.

---------------------------------------

*novending

Disables shop creation on a map from the MC_VENDING skill.

---------------------------------------

*nobuyingstore

Disables shop creation on a map from the ALL_BUYING_STORE skill.

---------------------------------------

*nousecart

Disables cart usage on a map.

---------------------------------------

*noskill

Disables skill usage on a map.

---------------------------------------

*restricted	<zone>

Disables certain items and skills on a map through a specified zone number. The zone databases are
located in 'db/(pre-)re/item_noequip.txt' and 'db/(pre-)re/skill_nocast_db.txt', both of which
contain explanations and examples of how this mapflag is used.

Restricted Zones:
1 - Aldebaran Turbo Track
2 - Jail
3 - Izlude Battle Arena
4 - WoE:SE Maps
5 - Sealed Shrine
6 - Instances: Endless Tower, Orc's Memory, Nidhoggr's Instance
7 - Towns
8 - WOE:TE Dungeons

---------------------------------------

*monster_noteleport

Prevents monsters from teleporting on a map, including through the skill RG_INTIMIDATE.

---------------------------------------

*nobranch

Disables usage of monster-spawning items on a map:
 - Dead Branch (ID 604)
 - Bloody Branch (ID 12103)
 - Poring Box (ID 12109)
 - Red Pouch (ID 12024)

Items listed above can be modified under db/(pre-)re/item_flag.txt

Note that when 'mob_warp' is enabled in '/conf/battle/monster.conf' and flag 4 is set, this will
also prevent mobs from being warped onto the map (except slave mobs).

---------------------------------------

*noicewall

Disables skill WZ_ICEWALL on a map.

---------------------------------------

*nosunmoonstarmiracle

Disables Star Gladiator's "Solar, Lunar, and Stellar Miracle" from occurring on a map.

---------------------------------------

*forcemineffect

Forces simpler skill effects, just like the command /mineffect.

---------------------------------------

*nolockon

Disables attacking another player without holding shift or using /ns on a map.

---------------------------------------

*nocommand	<group level>

Disables everyone to use command on a map. If group level is specified, only disables
player who has group level below it.

---------------------------------------


*nomapchannelautojoin

Stops players from automatically joining the #map channel on a map.

This only applies if map channels are enabled and 'map_local_channel_autojoin' is true
in '/conf/channels.conf'.

---------------------------------------

*notomb

Disables MVP tombs from appearing on a map.

---------------------------------------

*nocostume

Disables costume sprites on a map.

This only disables the sprites and not the effect of the items.
If a player logs out on a nocostume map the costume sprites will also not be shown in the
character server.

---------------------------------------

*norenewaldroppenalty

Disable renewal drop rate penalty due to level difference on a map.

---------------------------------------

*norenewalexppenalty

Disable renewal experience penalty due to level difference on a map.

---------------------------------------

*nopetcapture

Disable the ability to capture pets on a map.

---------------------------------------

=====================
| 2. Battle-related |
=====================
---------------------------------------

*pvp
*pvp_noparty
*pvp_noguild
*pvp_nocalcrank

Enables Player vs. Player mode on a map and applies the corresponding damage adjustments.
'pvp_noparty' will ignore party alliances.
'pvp_noguild' will ignore guild alliances.
'pvp_nocalcrank' will disable calculation of PvP rankings.

---------------------------------------

*pvp_nightmaredrop	<id>,<type>,<rate>

Causes players to drop items upon death. This is not grouped with the other PvP mapflags
because it does not necessarily require PvP mode to be set.

<id> determines what will drop. It can be either a specific item ID or "random".
<type> specifies where items are dropped from. It can be "inventory", "equip", or "all".
<rate> is the chance that an item will drop (10000 = 100%).

---------------------------------------

*gvg
*gvg_noparty
*gvg_castle
*gvg_dungeon
*gvg_te
*gvg_te_castle

Enables Guild vs. Guild mode on a map and applies the corresponding damage adjustments.
'gvg_noparty' will ignore party alliances.
'gvg_castle' marks a guild castle. GvG mode will be active only during the War of Emperium.
'gvg_dungeon' marks a guild dungeon. Players will be warped out after two deaths.
'gvg_te' and 'gvg_te_castle' marks a WOE:TE area and special restrictions are applied.

---------------------------------------

*battleground	{<type>}

Enables Battlegrounds on a map and applies the corresponding damage adjustments.
If <type> is 2, a scoreboard will be shown. The default is 1 (nothing).

---------------------------------------

*partylock
*guildlock

Prevents alteration of parties and guilds on a map. This includes creating, leaving,
inviting, expelling, breaking, and changing leaders.

Notes:
'partylock' will still allow party options to be changed.
'guildlock' will also block changes to guild alliances.

---------------------------------------

*skill_damage	{<skill_name>,<caster>,<SKILLDMG_PC>,{<SKILLDMG_MOB>,{<SKILLDMG_BOSS>,{<SKILLDMG_OTHER>}}}}

Enables skill damage adjustment on a map. All adjustments in 'db/skill_damage_db.txt'
for 'Map' type 16 will be applied.

This mapflag can also be used to adjust the damage of one skill by a percentage:
 - skill_name:
	Name of the skill in 'db/(pre-)re/skill_db.yml' (ex. SM_BASH).
	To adjust all skill damage, write "all" (without quotes).
 - caster: the groups for which the adjustment takes effect. (bitmask)
	BL_PC = Player
	BL_MOB = Monster
	BL_PET = Pet
	BL_HOM = Homunculus
	BL_MER = Mercenary
	BL_ELEM = Elemental
 - damage: percent adjustment rate (between -100 and 100000).
	SKILLDMG_PC = against player
	SKILLDMG_MOB = against normal monster
	SKILLDMG_BOSS = against boss monster
	SKILLDMG_OTHER = against other (homunculus, mercenary, pet, elemental)

---------------------------------------

*skill_duration	skill_name,percentage

Sets skill (trap-type) time limit to n% of original duration.

// Example:
// Makes HT_ANKLESNARE's lifetime in the castle 4x longer than other maps.
prtg_cas01	mapflag	skill_duration	HT_ANKLESNARE,400

---------------------------------------

==================
| 3. Map Effects |
==================
---------------------------------------

*clouds
*clouds2
*fireworks
*fog
*leaves
*sakura
*snow

Displays a weather effect on a map.

---------------------------------------

*nightenabled

Displays night mode effects on a map. This is used on most outdoor maps.

---------------------------------------

====================
| 4. Miscellaneous |
====================
---------------------------------------

*town

Marks a map as a town. This allows players to access their mail and disables kill stealing.

---------------------------------------

*reset

Allows usage of item Neuralizer (ID 12213).

---------------------------------------

*bexp	<rate>
*jexp	<rate>

Changes the base and job experience rates on a map. Supports negative values to reduce EXP
rates as well.
<rate> is given as a percentage (i.e. 100 = 1x EXP). This takes into account the modifiers
'base_exp_rate' and 'job_exp_rate' in '/conf/battle/exp.conf'.

---------------------------------------

*loadevent

Triggers the label "OnPCLoadMapEvent" when players enter a map (this also includes
teleporting within the map). More details can be found in '/doc/script_commands.txt'.

---------------------------------------

*allowks

Allows kill stealing on a map (rendering the @noks command useless).

---------------------------------------

*autotrade

Allows the @autotrade command on a map.

This only applies if 'at_mapflag' is enabled in '/conf/battle/misc.conf'. Otherwise, the
atcommand is enabled on all maps by default.

---------------------------------------

*hidemobhpbar

Hides monster's HP bar on a map.
Ignores config value of 'monster_hp_bars_info'.

---------------------------------------
//===== rAthena Documentation ================================
//= rAthena Map Cache Builder and Format Documentation
//===== By: ==================================================
//= DracoRPG
//===== Last Updated: ========================================
//= 20070724
//===== Description: =========================================
//= A complete manual for rAthena's map cache generator as 
//= well as a reference on the map cache format used.
//============================================================

Preface:
-------------------------------------------------------------------------------

Since SVN revision ~10000, the map-server no longer knows how to read GRFs directly. It reads maps from a
"map cache" file that contains all and only the useful data about the maps. A map cache containing every official
kRO Sakray map currently supported by rAthena is provided as a default.
If you have custom maps or want to minimize the size of your map cache because your server does not load all of them
(multi-map-server or light test server), you can use the map cache builder to generate a new one fitting your needs.

Map cache builder manual:
-------------------------------------------------------------------------------

The source code for the map cache builder is located in src/tool/. It can be built using "make tools" if you use the Makefile
or using the "mapcache" project under Visual Studio. Named "mapcache", the executable will be in your rAthena main folder.
The map cache builder needs 3 file paths : one is a list of GRFs and/or data directory containing the maps, the second
is the list of maps to add to the map cache, and the last one is the path of the map cache to generate. Default values for
those paths are "tools/mapcache/grf_files.txt", "db/map_index.txt" and "db/(pre-)re/map_cache.dat".

As of r16867, the mapcache can be located in db/pre-re/ and db/re/. This is due to renewal and pre-renewal modes having
slightly different maps. When building your cache, you should ensure you're pointing the tool to the correct location.

The list of GRFs and/or data directory must follow the format and indication of the default file: as many "grf:" entries as
you wish and optionally only one "data_dir:" entry with trailing backslash included. // comments are supported as usual.
In fact, any file with one map name per line can be used as a map list, that's why the map index list is used as a default:
we are sure it contains every map supported by the server. Anything after the map name is ignored, // comments are supported
and if the first word on the line is "map:" then the second word is used as the map name instead: that allows using
maps_athena.conf as your map list, which is handy if you want to generate a minimal map cache for each of your multiple
map-servers.
The map cache file path can point to an already existing file, as the builder adds a map only if it's not already cached.
This way, you can add custom maps to the base map cache without even needing kRO Sakray maps. If you wish to rebuild the
entire map cache, though, you can either provide a path to a non-existing file, or force the rebuild mode.

Here are the command-line arguments you can provide to the map cache builder to customize its behavior:
 -grf path/to/grf/list
   Allows to specify the file containing the list of GRFs and/or data directory
 -list path/to/map/list
   Allows to specify the file containing the list of maps to add to the map cache
 -cache path/to/map/cache
   Allows to specify the path to the generated map cache
 -rebuild
   Allows to force the rebuild mode (map cache will be overwritten even if it already exists)


Map cache format reference:
-------------------------------------------------------------------------------

The file is written as little-endian, even on big-endian systems, for cross-compatibility reasons. Appropriate conversions
are done when generating it, so don't worry about it.
The first 6 bytes are a main header:
<unsigned int> file size
<unsigned short> number of maps
Then maps are stored one right after another:
<12-characters-long string> map name
<short> X size
<short> Y size
<long> compressed cell data length
<variable> compressed cell data
//===== rAthena Documentation ================================
//= MD5 Hash Check
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20140208
//===== Description: =========================================
//= This file outlines the login server's MD5 hash check.
//============================================================

The login server is able to perform a check of the client's MD5 hash.
This will ensure that a user has not tampered with the client and that
the client is the one specific to your server.

The client can only send the correct MD5 hash to the server on certain
server types, so a client diff is required to ensure the hash is sent.
Please refer to your client diff tool manual for the appropriate patch,
called "Force Send Client Hash Packet" or a similar name. A link
containing the WeeDiffGen plugin can be found at:
http://rathena.org/board/topic/70841-r16771-client-md5-hash-check/

The server-side settings for the hash check are located in
'conf\login_athena.conf':

// Client MD5 hash check
// If turned on, the login server will check if the client's hash matches
// the value below, and will not connect tampered clients.
// Note: see 'doc/md5_hashcheck.txt' for more details.
client_hash_check: off

// Client MD5 hashes
// The client with the specified hash can be used to log in by players with
// a group_id equal to or greater than the given value.
// If you specify 'disabled' as hash, players with a group_id greater than or
// equal to the given value will be able to log in regardless of hash (and even
// if their client does not send a hash at all.)
// Format: group_id, hash
// Note: see 'doc/md5_hashcheck.txt' for more details.
client_hash: 0, 113e195e6c051bb1cfb12a644bb084c5
client_hash: 10, cb1ea78023d337c38e8ba5124e2338ae
client_hash: 99, disabled

To enable MD5 hash checks, set 'client_hash_check' to 'on' and add one
'client_hash' entry for each client you want to use.
The group_id can be any of the groups in 'conf/groups.conf', and it is
useful in case if you want to allow GMs to use a different client
than normal players; for example, a GM client could be hexed
differently, perhaps with dual-clienting enabled and chat flood
disabled.
You will need to replace the example MD5 hashes with the actual hash of
your client. You can use any MD5 hash tools to generate it, e.g.:
- md5sum (command line) on linux
- WinMD5 on Windows
- md5 (command line) on Mac OS X
//===== rAthena Documentation ================================
//= rAthena Monster Availability Database Reference
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20191213
//===== Description: =========================================
//= Explanation of the mob_avail.yml file and structure.
//============================================================

---------------------------------------

Mob: The AEGIS name of the monster.

---------------------------------------

Sprite: The name of the sprite the monster will be changed to.

This can be another mob, a player (prefixed with 'JOB_'), or an NPC. When using an NPC sprite,
the prefix is not required in the mob_avail database as the script engine will strip it.

Example:
  - Mob: POPORING
    Sprite: PORING # This will change the Poporing into a Poring.

  - Mob: PORING
    Sprite: JOB_STALKER # This will change the Poring into a Stalker.

  - Mob: WOLF
    Sprite: 4_M_BARBER # This will change the Wolf into the Barber NPC.

These constants can be found in src/map/script_constants.hpp.

---------------------------------------

Sex: The sex to be displayed if the Sprite is a player.

Valid types:
	Female
	Male

---------------------------------------

HairStyle: The hair style ID to be displayed if the Sprite is a player.

---------------------------------------

HairColor: The hair color ID to be displayed if the Sprite is a player.

---------------------------------------

ClothColor: The cloth color ID to be displayed if the Sprite is a player.

---------------------------------------

Weapon: The AEGIS name of the item to be displayed if the Sprite is a player.

---------------------------------------

Shield: The AEGIS name of the item to be displayed if the Sprite is a player.

---------------------------------------

HeadTop: The AEGIS name of the item to be displayed if the Sprite is a player.

---------------------------------------

HeadMid: The AEGIS name of the item to be displayed if the Sprite is a player.

---------------------------------------

HeadLow: The AEGIS name of the item to be displayed if the Sprite is a player.

---------------------------------------

PetEquip: The AEGIS name of the item to be displayed if the Mob is a valid pet.

---------------------------------------

Options: The view option to be applied to the Mob.

Valid types:
	Sight
	Cart1
	Falcon
	Riding
	Cart2
	Cart3
	Cart4
	Cart5
	Orcish
	Wedding
	Ruwach
	Flying
	Xmas
	Transform
	Summer
	Dragon1
	Wug
	WugRider
	MadoGear
	Dragon2
	Dragon3
	Dragon4
	Dragon5
	Hanbok
	Oktoberfest
	Summer2
//===== rAthena Documentation ================================
//= Monster Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20201006
//===== Description: =========================================
//= Explanation of the mob_db.yml file and structure.
//============================================================

---------------------------------------

ID: The ID of the monster.

---------------------------------------

SpriteName: The sprite name of the monster (.act & .spr)

---------------------------------------

Name: The name of the monster, this will be used when you use "--en--".

---------------------------------------

JapaneseName: The name of the monster, this will be used when you use "--ja--". Defaults to Name if not defined.

---------------------------------------

Level: The level of the monster.

---------------------------------------

Hp: The HP of the monster.

---------------------------------------

Sp: The SP of the monster.

---------------------------------------

BaseExp: Base experience point of the monster.

---------------------------------------

JobExp: Job experience point of the monster.

---------------------------------------

MvpExp: The MVP Experience point the monster gives to the player who got the MVP reward when it is defeated. This exp is a percentage of the exp the monster gives.

---------------------------------------

Attack: The minimum attack of the monster (Pre-Renewal)
		The base attack of the monster. (Renewal)

---------------------------------------

Attack2: The maximum attack of the monster. If undefined, the value of Attack will be used as the absolute attack. (Pre-Renewal)
		 The base magic attack of the monster. (Renewal)

---------------------------------------

Defense: Physical defense of the monster, reduce melee and ranged physical attack/skill.

---------------------------------------

MagicDefense: Magic defense of the monster, reduce magical skill.

---------------------------------------

Resistance: Physical resistance of the monster, reduce melee and ranged physical attack/skill.

---------------------------------------

MagicResistance: Magic resistance of the monster, reduce magical skill.

---------------------------------------

Str: Strength of the monster. Affects ATK.

---------------------------------------

Agi: Agility of the monster. Affects FLEE.

---------------------------------------

Vit: Vitality of the monster. Adds additional DEF.

---------------------------------------

Int: Intelligence of the monster. Adds additional MATK.

---------------------------------------

Dex: Dexterity of the monster. Affects HIT rate.

---------------------------------------

Luk: Luck of the monster. Affects Perfect dodge/Lucky flee/Perfect flee/Lucky dodge rate.

---------------------------------------

AttackRange: Range of the monster attack. If set to 1 or 2, it will be set to melee attack. If set to 3 or more, it will be set to ranged attack.

---------------------------------------

SkillRange: Maximum Skill Range.

---------------------------------------

ChaseRange: Sight limit of the monster. If set to 1000 or beyond, the monster will follow you all over the map.

---------------------------------------

Size: Size of the monster.

Small (Default)
Medium
Large

---------------------------------------

Race: Race of the monster.

Formless (Default)
Undead
Brute
Plant
Insect
Fish
Demon
Demihuman
Angel
Dragon

Demihuman is not same nor includes Player.

---------------------------------------

RaceGroups: Secondary race groups for special bonuses.

Goblin
Kobold
Orc
Golem
Guardian
Ninja
Gvg
Battlefield
Treasure
Biolab
Manuk
Splendide
Scaraba
Ogh_Atk_Def
Ogh_Hidden
Bio5_Swordman_Thief
Bio5_Acolyte_Merchant
Bio5_Mage_Archer
Bio5_Mvp
Clocktower
Thanatos
Faceworm
Hearthunter
Rockridge
Werner_Lab
Temple_Demon
Illusion_Vampire

---------------------------------------

Element: Element of the monster.

Neutral (Default)
Water
Earth
Fire
Wind
Poison
Holy
Dark
Ghost
Undead

---------------------------------------

ElementLevel: Element level of the monster.

---------------------------------------

WalkSpeed: Walk speed of the monster.

20		- Fastest (MIN_WALK_SPEED
150		- Normal (DEFAULT_WALK_SPEED)
1000	- Slowest (MAX_WALK_SPEED)

---------------------------------------

AttackDelay: Attack Delay of the monster, also known as ASPD. Low value means faster attack speed, but don't make it too low or it will lag when a player got mobbed by several of these mobs.

---------------------------------------

AttackMotion: Attack animation motion. Low value means monster's attack will be displayed in higher FPS (making it shorter, too). (Thanks to Wallex for this)

---------------------------------------

DamageMotion: Damage animation motion, same as aMotion but used to display the "I am hit" animation. Coincidentally, this same value is used to determine how long it is before the monster/player can move again. Endure is dMotion = 0, obviously.

---------------------------------------

DamageTaken: Rate at which the monster will recieve damage from players.

---------------------------------------

Ai: Aegis Monster Type behavior. Full explanation can be found in 'doc/mob_db_mode_list.txt'.

---------------------------------------

Class: Aegis Monster Class Type behavior. Full explanation can be found in 'doc/mob_db_mode_list.txt'.

---------------------------------------

Modes: Behaviour that isn't defined by AI or Class of the monster. Full explanation can be found in 'doc/mob_db_mode_list.txt'.

---------------------------------------

MvpDrops: List of items of the MVP drop. Maximum of 3 items (MAX_MVP_DROP). None of these items can be stolen by TF_STEAL.
	- Item				- Item name.
      Rate				- Drop rate of item, n/10000.
      RandomOptionGroup	- Random Option Group applied to item on drop. (Optional)
      Index               Index used for overwriting item. (Optional)

---------------------------------------

Drops: List of items of the monster drop. Maximum of 10 items (MAX_MOB_DROP).
	- Item                Item name.
      Rate                Drop rate of item, n/10000.
      StealProtected      If the item is shielded from TF_STEAL. (Default: false)
      RandomOptionGroup   Random Option Group applied to item on drop. (Optional)
      Index               Index used for overwriting item. (Optional)
//===== rAthena Documentation ================================
//= rAthena Monster Modes Reference
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20160402
//===== Description: =========================================
//= A reference description of rAthena's mob_db 'mode' field.
//============================================================

Bit Legend
-------------------------------------------------------------------------------

MD_CANMOVE            | 0x0000001 |         1
MD_LOOTER             | 0x0000002 |         2
MD_AGGRESSIVE         | 0x0000004 |         4
MD_ASSIST             | 0x0000008 |         8
MD_CASTSENSORIDLE     | 0x0000010 |        16
MD_NORANDOMWALK       | 0x0000020 |        32
MD_NOCAST             | 0x0000040 |        64
MD_CANATTACK          | 0x0000080 |       128
FREE                  | 0x0000100 |       256
MD_CASTSENSORCHASE    | 0x0000200 |       512
MD_CHANGECHASE        | 0x0000400 |      1024
MD_ANGRY              | 0x0000800 |      2048
MD_CHANGETARGETMELEE  | 0x0001000 |      4096
MD_CHANGETARGETCHASE  | 0x0002000 |      8192
MD_TARGETWEAK         | 0x0004000 |     16384
MD_RANDOMTARGET       | 0x0008000 |     32768
---------------------------------------------
MD_IGNOREMELEE        | 0x0010000 |     65536
MD_IGNOREMAGIC        | 0x0020000 |    131072
MD_IGNORERANGED       | 0x0040000 |    262144
MD_MVP                | 0x0080000 |    524288
MD_IGNOREMISC         | 0x0100000 |   1048576
MD_KNOCKBACKIMMUNE    | 0x0200000 |   2097152
MD_TELEPORTBLOCK      | 0x0400000 |   4194304
FREE                  | 0x0800000 |   8388608
---------------------------------------------
MD_FIXEDITEMDROP      | 0x1000000 |  16777216
MD_DETECTOR           | 0x2000000 |  33554432
MD_STATUSIMMUNE       | 0x4000000 |  67108864
MD_SKILLIMMUNE        | 0x8000000 | 134217728

Explanation for modes
-------------------------------------------------------------------------------

Can Move: Enables the mob to move/chase characters.

Looter: The mob will loot up nearby items on the ground when it's on idle state.

Aggressive: normal aggressive mob, will look for a close-by player to attack.

Assist: When a nearby mob of the same class attacks, assist types will join them.

Cast Sensor Idle: Will go after characters who start casting on them if idle
	or walking (without a target).

No Random Walk: The mob will not randomly walk around while in the
	idle state.

No Cast Skill: The mob will be unable to cast skills.

Can Attack: Enables the mob to attack/retaliate when you are within attack
	range. Note that this only enables them to use normal attacks, skills are
	always allowed.

Cast Sensor Chase: Will go after characters who start casting on them if idle
	or chasing other players (they switch chase targets)

Change Chase: Allows chasing mobs to switch targets if another player happens
	to be within attack range (handy on ranged attackers, for example)

Angry: These mobs are "hyper-active". Apart from "chase"/"attack", they have
	the states "follow"/"angry". Once hit, they stop using these states and use
	the normal ones. The new states are used to determine a different skill-set
	for their "before attacked" and "after attacked" states. Also, when
	"following", they automatically switch to whoever character is closest.

Change Target Melee: Enables a mob to switch targets when hit by a normal attack
	while attacking someone else.

Change Target Chase: Enables a mob to switch targets when hit by any attack
	while chasing another character.

Target Weak: Allows aggressive monsters to only be aggressive against 
	characters that are five levels below it's own level.
	For example, a monster of level 104 will not pick fights with a level 99.

Random Target: Picks a new random target in range on each attack / skill.

Ignore Melee: The mob will take 1 HP damage from physical attacks.

Ignore Magic: The mob will take 1 HP damage from magic attacks.

Ignore Range: The mob will take 1 HP damage from ranged attacks.

MVP: Flagged as MVP which makes mobs resistant to Coma. Also displays the
	MVP sign and gives players MVP EXP or MVP items.

Ignore Misc: The mob will take 1 HP damage from "none" attack type.

Knockback Immune: The mob will be unable to be knocked back.

Teleport Block: Not implemented yet.

Fixed Item Drop: The mob's drops are not affected by item drop modifiers.

Detector: Enables mob to detect and attack characters who are in hiding/cloak.

Status Immune: Immune to being affected by statuses.

Skill Immune: Immune to being affected by skills.

Aegis Mob Types
-------------------------------------------------------------------------------

What Aegis has are mob-types, where each type represents an AI behavior that
is mimicked by a group of rA mode bits. This is the table to convert from one
to another:

Aegis/rA (description)
01: 0x0081 (passive)
02: 0x0083 (passive, looter)
03: 0x1089 (passive, assist and change-target melee)
04: 0x3885 (angry, change-target melee/chase)
05: 0x2085 (aggressive, change-target chase)
06: 0x0000 (passive, immobile, can't attack) [plants]
07: 0x108B (passive, looter, assist, change-target melee)
08: 0x7085 (aggressive, change-target melee/chase, target weak enemies)
09: 0x3095 (aggressive, change-target melee/chase, cast sensor idle) [Guardian]
10: 0x0084 (aggressive, immobile)
11: 0x0084 (aggressive, immobile) [Guardian]
12: 0x2085 (aggressive, change-target chase) [Guardian]
13: 0x308D (aggressive, change-target melee/chase, assist)
17: 0x0091 (passive, cast sensor idle)
19: 0x3095 (aggressive, change-target melee/chase, cast sensor idle)
20: 0x3295 (aggressive, change-target melee/chase, cast sensor idle/chase)
21: 0x3695 (aggressive, change-target melee/chase, cast sensor idle/chase, chase-change target)
24: 0x00A1 (passive, does not walk randomly) [Slave]
25: 0x0001 (passive, can't attack) [Pet]
26: 0xB695 (aggressive, change-target melee/chase, cast sensor idle/chase, chase-change target, random target)
27: 0x8084 (aggressive, immobile, random target)

Aegis Class Types
-------------------------------------------------------------------------------

Aegis has different class types that can't be combined but can be reflected by
a combination of rA mode bits.
Add the mode listed here to the mode above.

Aegis/rA
00: 0x0000000 (normal monster)
01: 0x6200000 (boss class, immune to status changes, immune to knockback, detector)
02: 0x4000000 (guardian class, immune to status changes)
04: 0xC000000 (battlefield class, immune to status changes, completely ignores all skills)
05: 0x1000000 (event class, ignores all drop rate adjustments)

- Note that the detector bit for Insect/Demon monsters need to be added
  independently.

Aegis Attr Types
-------------------------------------------------------------------------------

The Aegis attr types are a bitmask just like the rA mode bits and can be 
directly converted. Plant mode is a combination of various of these modes.
Add the mode listed here to the resulting mode above.

Aegis/rA
01: 0x010000 (takes 1 damage from melee attacks)
02: 0x020000 (takes 1 damage from magic attacks)
04: 0x040000 (takes 1 damage from ranged attacks)
08: 0x080000 (MVP, gives MVP rewards, immune to instant death/coma effects)
16: 0x100000 (takes 1 damage from misc attacks)
32: 0x200000 (cannot be knocked back)
64: 0x400000 (teleport block)
//===== rAthena Documentation ================================
//= Mob Item Ratio Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20210624
//===== Description: =========================================
//= Explanation of the mob_item_ratio.yml file and structure.
//============================================================

Item base drop rates defined in mob_db.yml will not get multiplied by global item_rate* values (aka drop rates) from
conf/battle/drops.conf and instead, Ratio will be used (100 = 1x).
If no Mob is specified, all monsters will be affected, otherwise only the ones listed.

Examples:
Jellopies from monsters will drop with 1x drop rate regardless of global drop rate
Body:
 - Item: Jellopy
   Ratio: 100

Jellopies from monsters will drop with 10x drop rate regardless of global drop rate
Body:
 - Item: Jellopy
   Ratio: 1000

Removes Jellopies from monsters drop
Body:
 - Item: Jellopy
   Ratio: 0

Jellopies from Porings will drop with 1x drop rate. Other monsters that drop Jellopies are unaffected (use global drop rate).
Body:
 - Item: Jellopy
   Ratio: 100
   List:
     PORING: true

Notes:
- Does not override item_drop_*_min/max settings.
- Does not affect card/item-granted drops. To adjust card/item-granted drops, edit them in item_db.
- Does affect MVP prizes and Treasure Boxes.
- You can add only ONE Ratio per Item. If you need various ratios for different monsters, override drop rate with Ratio=100 and edit base drop rates in mob_db.
- This file is reloaded by @reloadmobdb.
//===== rAthena Documentation ================================
//= rAthena Monster Powerskill Reference
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20200104
//===== Description: =========================================
//= Reference for monster level 10 skills.
//============================================================

When a monster uses a level 10 skill on Aegis, it will be much stronger than the 
normal player version. On rAthena we reflect this by giving the monster a skill
level above the maximum player level.
The following lists explains the skill specialities and the corresponding level
which needs to be put for these skills in the mob_skill_db.

Note: The "SkillDatabase::parseNode" template has a linear determination feature
where it will attempt to fill the values from the last level defined to MAX_SKILL_LEVEL.
If it can't determine a trend it will fill with the last level defined.

-------------------------------------------------------------------------------
Skill | rAthena Lv | Explanation
-------------------------------------------------------------------------------
7,SM_MAGNUM           |25| 9x9 AoE. 600% damage at all ranges.
15,MG_FROSTDIVER      |40| 500% damage. 100% base chance.
17,MG_FIREBALL        |44| Re: 1020% damage, Pre: 510% damage
21,MG_THUNDERSTORM    |20| 7x7 AoE. 3 splash into LP. 20 hits.
28,AL_HEAL            |11| Heals max_heal HP(see conf/battle/skills.conf)
30,AL_DECAGI          |48| Reduces Agi by 50. Duration 130 seconds.
42,MC_MAMMONITE       |22| 1200% damage.
57,KN_BRANDISHSPEAR   |10| 562% damage at all ranges.
60,KN_TWOHANDQUICKEN  |30| Increases ASPD by 70%. Duration 300 seconds.
80,WZ_FIREPILLAR      |10| Damage multiplied by number of hits.
83,WZ_METEOR          |11| Meteors drop in 29x29 AoE. 15 hits per meteor.
84,WZ_JUPITEL         |28| 30 hits, knockback out of visible range.
85,WZ_VERMILION       |21| 15x15 unit placement. 1 splash into LP. 500% damage.
86,WZ_WATERBALL       |10| 9x9 unit placement. 67 hits.
110,BS_HAMMERFALL     |10| 25x25 AoE. 100% base chance.
//===== rAthena Documentation ================================
//= Source Documentation
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20140718
//===== Description: =========================================
//= List of all packets used by login-serv (A), char-serv (H),
//= and map-serv (Z) to communicate to the client.
//= See packet_interserv.txt for communication between servers.
//============================================================
//===== rAthena Documentation ================================
//= Source Documentation
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20180924
//===== Description: =========================================
//= List of all packets used by login-server (A), char-server
//= (H), and map-server (Z) to communicate with each other.
//= See packet_client.txt for communication to client (C).
//============================================================

This file provides information about rAthena's packets, ordered by number.
This assumes knowledge of packet notation, which is detailed in
'doc/packet_struct_notation.txt'.

The format of this file is as follows:
	1. Notes
	2. Login-Char Packets
	3. Char/Inter Packets
	- 3.1 Inter-Map Packets
	- 3.2 Char-Map Packets

============
| 1. Notes |
============
Currently the max packet size is 0xFFFF (see 'WFIFOSET()' in 'src/common/socket.cpp').

=========================
| 2. Login-Char Packets |
=========================
0x2712:
	Type: HA
	Structure: <cmd>.W <aid>.L <login_id1>.L <login_id2>.L <sex>.B <ip>.L <request_id>.L
	index: 0,2,6,10,14,15,19
	len: 23
	parameter:
		- cmd : packet identification (0x2712)
		- aid : account identification
		- login_id1: unknown @FIXME
		- login_id2: unknown @FIXME
		- sex: the sex of the account
		- ip: the ip of the connection (obsolete)
		- request_id: unknown @FIXME
	desc:
		- Request from char-server to authenticate an account.

0x2713:
	Type: AH
	Structure: <cmd>.W <aid>.L <login_id1>.L <login_id2>.L <sex>.B <auth>.B <request_id>.L <clienttype>.B
	index: 0,2,6,10,14,15,16,20
	len: 21
	parameter:
		- cmd : packet identification (0x2713)
		- aid : account identification
		- login_id1: unknown @FIXME
		- login_id2: unknown @FIXME
		- sex: the sex of the account
		- ok : 1=auth failed, 1=ok
		- request_id: unknown @FIXME
		- clienttype: unknown @FIXME
	desc:
		- Acknowledge the authentication request from char-server

0x2714:
	Type: HA
	Structure: <cmd>.W <user_count>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2714)
		- user_count: number of user present on the char-server
	desc:
		- Retrieve the number of user present on a char-server

0x2715:
	free

0x2716:
	Type: HA
	Structure: <cmd>.W <aid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2716)
		- aid: account identification
	desc:
		- Request the account information of aid (see 0x2717)

0x2717
	Type: AH
	Structure: <cmd>.W <aid>.L <email>.40B <expiration_time>.L <group_id>.B <char_slots>.B <birthdate>.11B <pincode>.5B <pincode_change>.L <isvip>.B <char_vip>.B <MAX_CHAR_BILLING>.B
	index: 0,2,6,46,50,51,52,63,68,72,73,74
	len: 75
	parameter:
		- cmd: packet identification (0x2717)
		- aid: account identification
		- email: email of aid
		- expiration_time: unknow @FIXME
		- group_id: the group the aid belong too
		- char_slots: number of slot available the account have (will be displayed on client)
		- birthdate: birthdate of aid
		- pincode: current pincode of aid
		- pincode_change: new pincode of aid
		- isvip: if this aid is currently vip or not
		- char_vip: number of charslot that are vip (could only do creation on if you are vip)
		- MAX_CHAR_BILLING: number of charslort that are for billing
	desc:
		- Request account data

0x2718
	Type: AH
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2718)
	desc:
		- Keep alive packet, (confirm we are still connected)

0x2719:
	Type: HA
	Structure: <cmd>.W
	index: 0,2
	len: 2
	parameter:
		- cmd : packet identification (0x2719)
	desc:
		- Ping request from char-server

0x2720:
	Type: HA
	Structure: <cmd>.W <map_fd>.L <u_fd>.L <u_aid>.L <account_id>.L
	index: 0,2,6,10,14
	len: 18
	parameter:
		- cmd : packet identification (0x2720)
		- map_fd :
		- u_fd :
		- u_aid :
		- account_id :
	desc:
		-

0x2721:
	Type: AH
	Structure: <cmd>.W <map_fd>.L <u_fd>.L <u_aid>.L <account_id>.L <status>.B <password>.33B <email>.40B <last_ip>.16B <last_login>.24B <group_id>.L <logincount>.L <state>.L <birthdate>.11B <userid>.?B
	index: 0,2,6,10,18,19,52,92,108,132,136,140,144,122+NAME_LENGTH
	len: 122 + NAME_LENGTH
	parameter:
		- cmd : packet identification (0x2721)
		- map_fd
		- u_fd
		- u_aid
		- account_id
		- status: 0 - Failed
		- password
		- email
		- last_ip
		- last_login
		- group_id
		- logincount
		- state
		- birthdate
		- userid
	desc:
		-

0x2722:
	Type: HA
	Structure: <cmd>.W <account_id>.L <actual_e-mail>.40B <new_e-mail>.40B
	index: 0,2,6,46
	len: 86
	parameter:
		- cmd : packet identification (0x2722)
		- aid: account identification
		- actual_email: current email address
		- new_email: new email address
	desc:
		- Map-server sends information to change an email of an account via char-server

0x2723:
	Type: AH
	Structure: <cmd>.W <aid>.L <sex>.B
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x2723)
		- aid: account identification
		- sex: sex of account
			0 = SEX_FEMALE
			1= SEX_MALE
			2=SEX_SERVER
	desc:
		- Acknowledge sex update

0x2724:
	Type: HA
	Structure: <cmd>.W <t_aid>.L <state>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2724)
		- t_aid: account identification of target
		- state: state of account
			- 0 : unblock
			- 5 : block (Connection refused)
	desc:
		- Receiving an account state update request from a map-server (relayed via char-server)

0x2725:
	Type: HA
	Structure: <cmd>.W <t_aid>.L <timediff>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2725)
		- t_aid: account identification of target
		- timediff: tick to add or remove to a timestamp
	desc:
		- Receiving of map-server via char-server a ban request (alter the ban time)

0x2726:
	Type: AH
	Structure: <cmd>.W <len>.W <aid>.L <cid>.L <?>.B <type>.B <count>.W { <keyLength>.B <key>.<keyLength> <index>.L <valLength>.B <val>.<valLength> }*
	index: 0,2,4,8,12,13,14,16,...
	len: variable
	parameter:
		- cmd : packet identification (0x2726)
		- ?
		- aid
		- cid
		- type
		- count
		- keyLength
		- key
		- index
		- val
		- valLength
	desc:
		- Send global account registry

0x2727:
	Type: HA
	Structure: <cmd>.W <aid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2727)
		- aid: account identification
	desc:
		- Receive a request to change sex (sex is reversed)

0x2728:
	Type: HA
	Structure: <cmd>.W <len>.W <aid>.L <cid>.L { <keyLength>.B <key>.<keyLength> <index>.L <type>.B <value>.?B }
	index: 0,2,4,8,13
	len: variable (reg size+4)
	parameter:
		- cmd : packet identification (0x2728)
		- len:  pakcet size
		- aid: account identification
		- cid : char identification
		- keyLength
		- key
		- index
		- type
		- value
	desc:
		- Receive a request to fetch account_reg2 from a char-server, see packet 0x3004 (mapif_parse_Registry)


0x2729:
	Type: AH
	Structure: <cmd>.W <len>.L <aid>.L <cid>.L <type>.B { <str>.?B <value>.?B }
	index: 0,2,4,8,12,13
	len: variable (reg2 size+13)
	parameter:
		- cmd : packet identification (0x2729)
		- len:  pakcet size
		- aid: account identification
		- cid : char identification
		-type:
		-type:
			1: account2 registry (only one used atm)
			2: account registry
			3: char registry
		- str : name of variable in registry
		- value : value of varaible in registry
	desc:
		- Receive account_reg2 registry, forward to map-server.

0x272a:
	Type: HA
	Structure: <cmd>.W <t_aid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x272a)
		- t_aid: account identification
	desc:
		- request unban account


0x272b:
	Type: HA
	Structure: <cmd>.W <t_aid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x272b)
		- t_aid: account identification
	desc:
		- Add aid to list of online user on login-server (setacconline).

0x272c:
	Type: HA
	Structure: <cmd>.W <t_aid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x272c)
		- t_aid: account identification
	desc:
		- Remove aid to the list of online user (setaccoffline).

0x272d:
	Type: HA
	Structure: <cmd>.W <len>.W <nb_online>.L {<aid>.L}*
	index: 0,2,4,8
	len: 8+users*4
	parameter:
		- cmd : packet identification (0x272d)
		- len : size of packet
		- users: number of users connected to char-server
		- aid: account identification
	desc:
		- receive account list from char-server

0x272e:
	Type: HA
	Structure: <cmd>.W  <aid>.L  <cid>.L
	index: 0,2,4,6
	len: 10
	parameter:
		- cmd : packet identification (0x272e)
		- aid: account identification
		- cid: char identification
	desc:
		- request accreg2 to login

0x272f:
0x2730:
	free

0x2731:
	Type: AH
	Structure: <cmd>.W <aid>.L <state>.B <status/date>.L
	index: 0,2,6,7
	len: 11
	parameter:
		- cmd : packet identification (0x2731)
		- aid: account identification
		- state: 0=change of status, 1=ban
		- status|date: status or final date of a banishment
	desc:
		- Notify char-server of a state change or ban (accbannotification).

0x2732:
0x2733:
    free

0x2734:
	Type: AH
	Structure: <cmd>.W <aid>.L
	index: 0,2,
	len: 6
	parameter:
		- cmd : packet identification (0x2734)
		- aid: account identification
	desc:
		- Account is already marked as online. (Login-server request to kick a character out).

0x2735:
	Type: AH
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2735)
	desc:
		- IP address update signal from login-server.
		- Send back the IP of char-server to login-server if IP was changed.

0x2736:
	Type: HA
	Structure: <cmd>.W <ip>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2736)
		-  ip: ip of char-server
	desc:
		- IP update for char-server

0x2737:
	Type: HA
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2737)
	desc:
		- Request to set all account as offline from char-server

0x2738:
	Type: HA
	Structure: <cmd>.W <aid>.L <pincode>.?B
	index: 0,2,6
	len: variable: 11+PINCODE_LENGTH+1
	parameter:
		- cmd : packet identification (0x2738)
		- aid : account identification
		- pincode : new pincode code
	desc:
		- Change PIN Code of an account

0x2739:
	Type: HA
	Structure: <cmd>.W <aid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2739)
		- aid : account identification
	desc:
		- Login-server notifies char-server for too many wrong PIN code entered. (fail auth)

0x273a
0x273b
0x273c
0x273d
0x273e
0x273f
	free

0x2740
0x2741
	free

0x2742:
	Type: HA
	Structure: <cmd>.W <aid>.L <flag>.B <timediff>.L <mapfd>.L
	index: 0,2,6,7,11
	len: 15
	parameter:
		- cmd : packet identification (0x2742)
		- aid: account identification
		- flag: 0x1 ack vip data to char-server, 0x2 add duration, 0x8 First request on player login
		- timediff: tick to add to viptime
		- mapfd: map-server link to ack if type&1
	desc:
		- Received a VIP data request from char

0x2743:
	Type: AH
	Structure: <cmd>.W <aid>.L <vip_time>.L <flag>.B <groupid>.L <mapfd>.L
	index: 0,2,6,10,11,15
	len: 19
	parameter:
		- cmd : packet identification (0x2743)
		- aid: account identification
		- vip_time: timestamp of vip_time if he is vip
		- flag: 0x1: isvip, is this account in vip mode atm, 0x2: isgm, 0x4: show rates on player
		- groupid: group id of account
		- mapfd: map-server link to ack
	desc:
		- Transmit vip specific data to char-server (will be transfered to map-server)

=========================
| 3.1 Inter-Map Packets |
=========================

0x3000
	Type: ZI
	Structure: <cmd>.W <len>.W <fontColor>.L <fontType>.W <fontSize>.W <fontAlign>.W <fontY>.W <mes>.?B
	index: 0,2,4,8,10,12,14,16
	len: 16+msglen
	parameter:
		- cmd : packet identification (0x3000)
		- len : packet size
		- fontColor: (standard broadcast color=0xFF000000)
		- fontType:
		- fontSize:
		- fontAlign:
		- fontY:
		- mes: message to send
	desc:
		- Broadcasts a message to all map-servers connected to this char-server


0x3001
	Type: ZI
	Structure: <cmd>.W <len>.W <name>(NAME_LENGTH)B <nick>(NAME_LENGTH)B <mes>.?B
	index: 0,2,4,4+NAME_LENGTH,4+2*NAME_LENGTH
	len: 52+mes_len
	parameter:
		- cmd : packet identification (0x3001)
		- len: packet size
		- name : sender name of msg
		- nick : receiver name of msg
		- mes : message to send
	desc:
		- Send a whisper to another player

0x3002
	Type: ZI
	Structure: <cmd>.W <
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x3002)
		- id: whisper id, identifier to match current whisper session that store in inter.cpp::wis_db
		- flag: 0=success, 1=target not found, 2=ignored by target
	desc:
		- Inform the char-server of the result of the whisper

0x3003
	Type: ZI
	Structure: <cmd>.W <packet_len>.W <wispname>.?B <permission>.L <message>.?B
	index: 0,2,4,4+NAME_LENGTH,8+NAME_LENGTH
	len: variable: mes_len + 8 + NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3003)
		- packet_len: mes_len + 8 + NAME_LENGTH
		- wisp_name
		- permission
		- message
	desc:
		- Transmission of GM only Wisp/Page from server to inter-server

0x3004
	Type: ZI
	Structure: <cmd>.W <aid>.L <cid>.L <type>.B { <str>.?B <value>.?B }?
	index: 0,4,8,12,13
	len:  variable : 13+regnum*(len variable name+len value) (max=288 * MAX_REG_NUM+13)
	parameter:
		- cmd : packet identification (0x3004)
		- aid: account identification
		- cid: char identification
		-type:
			1: account2 registry
			2: account registry
			3: char registry
		-str: register variable identity, (variable name)
		-value: variable value
	desc:
		- Map-server is requesting char-server to save registry values. (type=1 will forward data to login-server)

0x3005
	Type: ZI
	Structure: <cmd>.W <aid>.L <cid>.L <acc_reg2>.B <acc_reg>.B <ch_reg>.B
	index: 0,2,6,10,11,12
	len: 13
	parameter:
		- cmd : packet identification (0x3005)
		- aid:
		- cid:
		-acc_reg2 : request  account registry (permanent variable of account, save on login-server)
		-acc_reg : request account registry (permanent variable of account , save on char-server)
		-ch_reg :  request char registry (permanent variable of char)
	desc:
		- Request the registries for this player.

0x3006
	Type: ZI
	Structure: <cmd>.W <aid>.L <cid>.L <type>.B <NAME_LENGTH>.?
	index: 0,2,6,10,11
	len: 12+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3006)
		- aid
		- cid
		- type
		- NAME_LENGTH
	desc

0x3007
	Type: ZI
	Structure: <cmd>.W <u_fd>.L <aid>.L <group_lv>.L <type>.B <query>.?B
	index: 0,2,6,10,14,15
	len: 15+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3007)
		- u_fd
		- aid
		- group_lv
		- type : 0 - Full account info. 1 - Return as clif_account_name
		- query : name or aid of player we want info
	desc:
		- Request acc info

0x3009
	Type: ZI
	Structure: <cmd>.W <len>.W <nameid>.W <source>.W <type>.B <name>.24B <srcname>.24B
	index: 0,2,6,4,8,9,24
	len: 9+NAME_LENGTH+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3009)
		- len : Packet length
		- nameid : ID of obtained item
		- source : Source from where the item obtained
		- type : Obtained type. 0: Box/Package, 1: Monster, 2: NPC
		- name : Name of player who obtained the item
		- srcname : Source name as alternative of source id
	desc:
		- Send broadcasts request if player get special items.

0x3018
	Type: ZI
	Structure: <cmd>.W <aid>.L <gid>.L
	index 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3018)
		- aid
		- gid
	desc:
		- Request guild storage

0x3019
	Type: ZI
	Structure: <cmd>.W <guild_storage>.W <aid>.L <gid>.L
	index: 0,2,4,8,12
	len: 12+guild_storage
	parameter:
		- cmd : packet identification (0x3019)
		- guild_storage
		- aid
		- gid
	desc:
		- Send guild storage

0x3020
	Type: ZI
	Structure: <cmd>.W <party_member>.W <name>.24B <item>.B <item2>.B <member>.?B
	index: 0,2,4,28,29,30
	len: variable: 28+party_member (max=64)
	parameter:
		- cmd : packet identification (0x3020)
		- party_member
		- name
		- item
		- item2
		- member
	desc:
		- Party creation request

0x3021
	Type: ZI
	Structure: <cmd>.W <party_id>.L <cid>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3021)
		- party_id
		- cid
	desc:
		- Party information request

0x3022
	Type: ZI
	Structure: <cmd>.W <party_member>.W <party_id>.L <member>.?B
	index: 0,2,4,8
	len: variable: 8+party_member (Max=42)
	parameter:
		- cmd : packet identification (0x3022)
		- party_member
		- party_id
		- member
	desc:
		- Request to add a member to party

0x3023
	Type: ZI
	Structure: <cmd>.W <party_id>.L <aid>.L <exp>.W <item>.W
	index: 0,2,6,10,12,14
	len: 14
	parameter:
		- cmd : packet identification (0x3023)
		- party_id
		- aid
		- exp
		- item
	desc:
		- Request to change party configuration (exp,item share)

0x3024
	Type: ZI
	Structure: <cmd>.W <party_id>.L <aid>.L <cid>.L <name>.24B <type>.B
	index: 0,2,6,10,14,48
	len: 49
	parameter:
		- cmd : packet identification (0x3024)
		- party_id : Party ID
		- aid : Account ID
		- cid : Character ID
		- name : Character Name
		- type : Leave (PARTY_MEMBER_WITHDRAW_LEAVE) or kick (PARTY_MEMBER_WITHDRAW_EXPEL) the player
	desc:
		- Request to leave party or kick party member

0x3025
	Type: ZI
	Structure: <cmd>.W <party_id>.L <aid>.L <cid>.L <mapindex>.W <online>.B <base_level>.W
	index: 0,2,6,10,14,16,17
	len: 19
	parameter:
		- cmd : packet identification (0x3025)
		- party_id
		- aid
		- cid
		- mapindex
		- online
		- base_level
	desc:
		- Party change map

0x3026
	Type: ZI
	Structure: <cmd>.W <party_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3026)
		- party_id
	desc:
		- Request breaking party

0x3027
	Type: ZI
	Structure: <cmd>.W <len>.W <party_id>.L <aid>.L <mes>.?B
	index: 0,2,4,8,12
	len: variable: 12+len
	parameter:
		- cmd : packet identification (0x3027)
		- len
		- party_id
		- aid
		- mes
	desc:
		- Sending party chat

0x3029
	Type: ZI
	Structure: <cmd>.W <party_id>.L <aid>.L <cid>.L
	index: 0,2,6,10
	len: 14
	parameter:
		- cmd : packet identification (0x3029)
		- party_id
		- aid
		- cid
	desc:
		- Request a new leader for party

0x302A
	Type: ZI
	Structure: <cmd>.W <share_lvl>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x302a)
		- share_lvl
	desc:
		- Request to update party share level

0x3030
	Type: ZI
	Structure: <cmd>.W <guild_member>.W <aid>.L <name>.?B <master>.?B
	index: 0,2,4,8,8+NAME_LENGTH
	len:
	parameter:
		- cmd : packet identification (0x3030)
		- guild_member
		- aid
		- name
		- master
	desc:
		- Request a Guild creation

0x3031
	Type: ZI
	Structure: <cmd>.W <guild_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3031)
		- guild_id
	desc:
		- Request Guild information

0x3032
	Type: ZI
	Structure: <cmd>.W <guild_member>.W <guild_id>.L <m>.?B
	index: 0,2,4,8
	len: variable: 8+guild_member
	parameter:
		- cmd : packet identification (0x3032)
	desc:
		- Request to add member to the guild

0x3033
	Type: ZI
	Structure: <cmd>.W <len>.W <guild_id>.L <name>.?B
	index: 0,2,4,8
	len: variable: 8+len
	parameter:
		- cmd : packet identification (0x3033)
		- len
		- guild_id
		- name
	desc:
		- Request a new leader for guild

0x3034
	Type: ZI
	Structure: <cmd>.W <guild_id>.L <aid>.L <cid>.L <flag>.B <mes> .40B
	index: 0,2,6,10,14,15
	len: 55
	parameter:
		- cmd : packet identification (0x3034)
		- guild_id
		- aid
		- cid
		- flag
		- mes
	desc:
		- Request to leave guild

0x3035
	Type: ZI
	Structure: <cmd>.W <guild_id>.L <aid>.L <cid>.L <online>.B <lv>.W <class_>.W
	index: 0,2,6,10,14,15,17
	len: 19
	parameter:
		- cmd : packet identification (0x3035)
		- guild_id
		- aid
		- cid
		- online
		- lv
		- class_
	desc:
		- Update request / Lv online status of the guild members

0x3036
	Type: ZI
	Structure: <cmd>.W <guild_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3036)
		- guild_id
	desc:
		- Guild disbanded notification

0x3037
	Type: ZI
	Structure: <cmd>.W <len>.W <guild_id>.L <aid>.L <mes>.?B
	index: 0,2,4,8,12
	len: variable: 12+len
	parameter:
		- cmd : packet identification (0x3037)
		- len
		- guild_id
		- aid
		- mes
	desc:
		- Send a guild message

0x3039
	Type: ZI
	Structure: <cmd>.W <len>.W <guild_id>.L <type>.W <data>.?B
	index: 0,2,4,8,10
	len: variable: 10+len
	parameter:
		- cmd : packet identification (0x3039)
		- len
		- guild_id
		- type
		- data
	desc:
		- Request a change of Guild basic information

0x303a
	Type: ZI
	Structure: <cmd>.W <len>.W <guild_id>.L <aid>.L <cid>.L <type>.W <data>.?B
	index: 0,2,4,8,12,16,18
	len: variable: 18+len
	parameter:
		- cmd : packet identification (0x303a)
		- len
		- guild_id
		- aid
		- cid
		- type
		- data
	desc:
		- Request a change of Guild member information

0x303b
	Type: ZI
	Structure: <cmd>.W <guild_position>.W <guild_id>.L <idx>.L <p>.?B
	index: 0,2,4,8,12
	len: variable: 12+guild_position
	parameter:
		- cmd : packet identification (0x303b)
		- guild_position
		- guild_id
		- idx
		- p
	desc:
		- Request a change of Guild title

0x303c
	Type: ZI
	Structure: <cmd>.W <guild_id>.L <skill_id>.L <aid>.L <max>.L
	index: 0,2,6,10,14
	len: 18
	parameter:
		- cmd : packet identification (0x303c)
		- guild_id
		- skill_id
		- aid
		- max
	desc:
		- Request an update of Guild skill skill_id

0x303d
	Type: ZI
	Structure: <cmd>.W <guild_id1>.L <guild_id2>.L <account_id1>.L <account_id2>.L <flag>.B
	index: 0,2,6,10,14,18
	len: 19
	parameter:
		- cmd : packet identification (0x303d)
		- guild_id1
		- guild_id2
		- account_id1
		- account_id2
		- flag
	desc:
		- Request a new guild alliance

0x303e
	Type: ZI
	Structure: <cmd>.W <guild_id>.L <mes1>.60B <mes2>.120B
	index: 0,2,6,66
	len: 186
	parameter:
		- cmd : packet identification (0x303e)
		- guild_id
		- mes1
		- mes2
	desc:
		- Request to change guild notice

0x303f
	Type: ZI
	Structure: <cmd>.W <len>.W <guild_id>.L <0>.L <data>.?B
	index: 0,2,4,8,12
	len: variable: 12+len (Max=2012)
	parameter:
		- cmd : packet identification (0x303f)
	desc:
		- Request to change guild emblem

0x3040
	Type: ZI
	Structure: <cmd>.W <num>.W <castle_ids>.?B
	index: 0,2,4
	len: variable: 4 + num * 2,147,483,647
	parameter:
		- cmd : packet identification (0x3040)
		- num
		- castle_ids
	desc:
		- Requests guild castles data from char-server

0x3041
	Type: ZI
	Structure: <cmd>.W <castle_ids>.W <index>.B <value>.L
	index: 0,2,4,5
	len: 9
	parameter:
		- cmd : packet identification (0x3041)
		- castle_ids
		- index
		- value
	desc:
		- Request change castle guild owner and save data

0x3048
	Type: ZI
	Structure: <cmd>.W <cid>.L <flag>.B <mail_type>.B
	index: 0,2,6,7
	len: 8
	parameter:
		- cmd : packet identification (0x3048)
		- cid
		- flag
		- mail_type
	desc:
		- Inbox request

0x3049
	Type: ZI
	Structure: <cmd>.W <mail_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3049)
		- mail_id
	desc:
		- Mail read

0x304a
	Type: ZI
	Structure: <cmd>.W <cid>.L <mail_id>.L <attachment_type>.B
	index: 0,2,6,10
	len: 11
	parameter:
		- cmd : packet identification (0x304a)
		- cid
		- mail_id
		- attachment_type
	desc:
		- Mail get attachment

0x304b
	Type: ZI
	Structure: <cmd>.W <cid>.L <mail_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x304b)
		- cid
		- mail_id
	desc:
		- Mail delete

0x304c
	Type: ZI
	Structure: <cmd>.W <cid>.L <mail_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x304c)
		- cid
		- mail_id
	desc:
		- Mail return

0x304d
	Type: ZI
	Structure: <cmd>.W <len>.W <aid>.L <msg>.?B
	index: 0,2,4,8
	len: variable: 8+mail_message
	parameter:
		- cmd : packet identification (0x304d)
		- len
		- aid
		- msg
	desc:
		- Mail send

0x304e
	Type: ZI
	Structure: <cmd>.W <cid>.L <name>.24B
	index: 0,2,6
	len: 30
	parameter:
		- cmd : packet identification (0x304e)
		- cid
		- name
	desc:
		- Checks if a character with the given name exists.

0x3050
	Type: ZI
	Structure: <cmd>.W <len>.W <cid>.L <type>.W <price>.L <page>.W <searchtext>.?B
	index: 0,2,4,8,10,14,16
	len: variable: 16+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3050)
		- len
		- cid
		- type
		- price
		- page
		- searchtext
	desc:
		- Auction request list

0x3051
	Type: ZI
	Structure: <cmd>.W <len>.W <auction_data>.?B
	index: 0,2,4
	len: variable: 4+auction_data
	parameter:
		- cmd : packet identification (0x3051)
		- len
		- auction_data
	desc:
		- Auction register

0x3052
	Type: ZI
	Structure: <cmd>.W <cid>.L <auction_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3052)
		- cid
		- auction_id
	desc:
		- Auction cancel

0x3053
	Type: ZI
	Structure: <cmd>.W <cid>.L <auction_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3053)
		- cid
		- auction_id
	desc:
		- Auction close

0x3055
	Type: ZI
	Structure: <cmd>.W <len>.W <cid>.L <auction_id>.L <bid>.L <name>.?B
	index: 0,2,4,8,12,16
	len: variable: 16+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3055)
		- len
		- cid
		- auction_id
		- bid
	desc:
		- Auction bid

0x3056
	Type: ZI
	Structure: <cmd>.W <cid>.L <aid>.L <guild_id>.W
	index: 0,2,6,10
	len: 12
	parameter:
		- cmd : packet identification (0x3056)
		- cid
		- aid
		- guild_id
	desc:
		- Itembound request

0x3060
	Type: ZI
	Structure: <cmd>.W <cid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3060)
		- cid
	desc:
		- Requests a character's quest log entries to the inter-server.

0x3061
	Type: ZI
	Structure: <cmd>.W <len>.W <cid>.L <quest_log>.?B
	index: 0,2,4,8
	len: variable: 8+num_quests
	parameter:
		- cmd : packet identification (0x3061)
	desc:
		- Requests to the inter-server to save a character's quest log entries.

0x3062
	Type: ZI
	Structure: <cmd>.W <cid>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3062)
		- cid
	desc:
		- Requests a character's achievement log entries to the inter-server.

0x3063
	Type: ZI
	Structure: <cmd>.W <len>.W <cid>.L <achievement_log>.?B
	index: 0,2,4,8
	len: variable: 8+count
	parameter:
		- cmd : packet identification (0x3063)
	desc:
		- Requests to the inter-server to save a character's achievement log entries.

0x3070
	Type: ZI
	Structure: <cmd>.W <size>.W <merc>.?B
	index: 0,2,4
	len: variable: 4+s_mercenary
	parameter:
		- cmd : packet identification (0x3070)
		- size
		- merc
	desc:
		- Mercenary create

0x3071
	Type: ZI
	Structure: <cmd>.W <merc_id>.L <char_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3071)
		- merc_id
		- cid
	desc:
		- Mercenary request

0x3072
	Type: ZI
	Structure: <cmd>.W <merc_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3072)
		- merc_id
	desc:
		- Mercenary delete

0x3073
	Type: ZI
	Structure: <cmd>.W <size>.W <merc>.?B
	index: 0,2,4
	len: variable: 4+s_mercenary
	parameter:
		- cmd : packet identification (0x3073)
		- size
		- merc
	desc:
		- Mercenary save

0x307c
	Type: ZI
	Structure: <cmd>.W <size>.W <ele>.?B
	index: 0,2,4
	len: variable: 4+s_elemental
	parameter:
		- cmd : packet identification (0x307c)
		- size
		- ele
	desc:
		- Elemental create

0x307d
	Type: ZI
	Structure: <cmd>.W <ele_id>.L <cid>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x307d)
		- ele_id
		- cid
	desc:
		- Elemental request

0x307e
	Type: ZI
	Structure: <cmd>.W <ele_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x307e)
		- ele_id
	desc:
		- Elemental delete

0x307f
	Type: ZI
	Structure: <cmd>.W <size>.W <ele>.?B
	index: 0,2,4
	len: variable: 4+s_elemental
	parameter:
		- cmd : packet identification (0x307f)
		- size
		- ele
	desc:
		- Elemental save

0x3080
	Type: ZI
	Structure: <cmd>.W <aid>.L <cid>.L <pet_class>.W <pet_lv>.W <pet_egg_id>.W <pet_equip>.W <intimate>.W <hungry>.W <rename_flag>.B <incubate>.B
	index: 0,2,6,10,12,14,16,18,20,22,23,24
	len: variable: 24+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3080)
		- aid
		- cid
		- pet_class
		- pet_lv
		- pet_egg_id
		 -pet_equip
		- intimate
		- hungry
		- rename_flag
		- incubate
	desc:
		- Pet create

0x3081
	Type: ZI
	Structure: <cmd>.W <aid>.L <cid>.L <pet_id>.L
	index: 0,2,6,10
	len: 14
	parameter:
		- cmd : packet identification (0x3081)
		- aid
		- cid
		- pet_id
	desc:
		- Request pet data

0x3082
	Type: ZI
	Structure: <cmd>.W <size>.W <aid>.L <s_pet>.?B
	index: 0,2,4,8
	len: variable: 8+s_pet
	parameter:
		- cmd : packet identification (0x3082)
		- size
		- aid
		- s_pet: Pet data
	desc:
		- Save pet data

0x3083
	Type: ZI
	Structure: <cmd>.W <pet_id>.L
	index: 0,2
	len 6:
	parameter:
		- cmd : packet identification (0x3083)
		- pet_id
	desc:
		- Delete pet data

0x308a
	Type: ZI
	Structure: <cmd>.W <type>.B <account_id>.L <char_id>.L
	index: 0,2,3,7
	len: 11
	parameter:
		- cmd : packet identification (0x308a)
		- type : 0 - TABLE_INVENTORY, 1 - TABLE_CART, 2 - TABLE_STORAGE
		- account_id
		- char_id
	desc:
		- Request inventory/cart/storage data for a player/guild if type = 3

0x308b
	Type: ZI
	Structure: <size>.W <type>.B <account_id>.L <char_id>.L <entries>.?B
	index: 0,2,4,5,9,13
	len: 11
	parameter:
		- cmd : packet identification (0x308b)
		- type : 0 - TABLE_INVENTORY, 1 - TABLE_CART, 2 - TABLE_STORAGE
		- account_id
		- char_id
		- entries : Inventory/cart/storage entries that will be saved
	desc:
		- Request to save inventory/cart/storage entries

0x3090:
	Type: ZI
	Structure: <cmd>.W <s_homunculus>.W <aid>.L <sh>.?B
	index: 0,2,4,8
	len: variable: 8+s_homunculus
	parameter:
		- cmd : packet identification (0x3090)
		- s_homunculus
		- aid
		- sh
	desc:
		- Homunculus create

0x3091:
	Type: ZI
	Structure: <cmd>.W <aid>.L <homun_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3091)
		- aid
		- homun_id
	desc:
		- Homunculus request load

0x3092:
	Type: ZI
	Structure: <cmd>.W <s_homunculus>.W <aid>.L <sh>.?B
	index: 0,2,4,8
	len: variable: 8+s_homunculus
	parameter:
		- cmd : packet identification (0x3092)
		- s_homunculus
		- aid
		- sh
	desc:
		- Homunculus request save

0x3093:
	Type: ZI
	Structure: <cmd>.W <homun_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x3093)
		- homun_id
	desc:
		- Homunculus request delete

0x3094:
	Type: ZI
	Structure: <cmd>.W <aid>.L <cid>.L <name>.?B
	index: 0,2,6,10
	len: variable: 10+name
	parameter:
		- cmd : packet identification (0x3094)
		- aid
		- cid
		- name
	desc:
		- Homunculus rename

0x30A0:
	Type: ZI
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x30A0)
	desc:
		- Requests the loaded clans from the inter-server

0x30A1
	Type: ZI
	Structure: <cmd>.W <size>.W <clan id>.L <account id>.L <message>.?B
	index: 0,2,4,8,12
	len: variable: 12+message
	parameter:
		- cmd : packet identification (0x30A1)
		- size
		- clan id : the clan id the message is sent to
		- account id : the account id of the sender
		- message : the message to be sent
	desc:
		- Sends a clan message to the inter-server to relay it to all other map-servers

0x30A2:
	Type: ZI
	Structure: <cmd>.W <clan id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x30A2)
		- clan id : the clan id
	desc:
		- Notifies the inter-server that a player has left the clan or disconnected

0x30A3:
	Type: ZI
	Structure: <cmd>.W <clan id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x30A3)
		- clan id : the clan id
	desc:
		- Notifies the inter-server that a player has joined the clan or connected

0x3800:
	Type: IZ
	Structure: <cmd>.W <len>.W <fontColor>.L <fontType>.W <fontSize>.W <fontAlign>.W <fontY>.W <mes>.?B
	index: 0,2,4,8,10,12,14,16
	len: variable: 16+len
	parameter:
		- cmd : packet identification (0x3800)
		- len
		- fontColor
		- fontType
		- fontSize
		- fontAlign
		- fontY
		- mes
	desc:
		- Send broadcast message

0x3801
	Type: IZ
	Structure: <cmd>.W <len>.W <id>.L <src>.24B <dst>.24B <msg>.?B
	index: 0,2,4,8,32,56
	len: variable: 56+len (Max=1991)
	parameter:
		- cmd : packet identification (0x3801)
		- len
		- id
		- src
		- dst
		- msg
	desc:
		- Send whisper message

0x3802
	Type: IZ
	Structure: <cmd>.W <src>.24B <flag>.B
	index: 0,2,26
	len: 27
	parameter:
		- cmd : packet identification (0x3802)
		- src
		- flag
	desc:
		- Whisper sending result

0x3803
	Type: IZ
	Structure: <cmd>.W <packet_len>.W <wispname>.?B <permission>.L <message>.?B
	index: 0,2,4,4+NAME_LENGTH,8+NAME_LENGTH
	len: variable: mes_len + 8 + NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3803)
		- packet_len: mes_len + 8 + NAME_LENGTH
		- wisp_name
		- permission
		- message
	desc:
		- Parse whisper to GM

0x3804
	Type: HZ
	Structure: <cmd>.W <len>.W <aid>.L <cid>.L <?>.B <type>.B <count>.W { <keyLength>.B <key>.<keyLength> <index>.L <valLength>.B <val>.<valLength> }*
	index: 0,2,4,8,12,13,14,16,...
	len: variable
	parameter:
		- cmd : packet identification (0x3804)
		- ?
		- aid
		- cid
		- type
		- count
		- keyLength
		- key
		- index
		- val
		- valLength
	desc:
		- Send global account registry to map-server from login-server

0x3806
	Type: IZ
	Structure: <cmd>.W <aid>.L <cid>.L <type>.B <flag>.B <name>.B
	index: 0,2,6,10,11,12
	len: 13
	parameter:
		- cmd : packet identification (0x3806)
		- aid
		- cid
		- type
		- flag
		- name
	desc:
		- mapif_namechange_ack

0x3807
	Type: IZ
	Structure: <cmd>.W <len>.W <u_fd>.L <aid>.L <msg_out>.?B
	index: 0,2,4,8,12
	len: variable: 12+len
	parameter:
		- cmd : packet identification (0x3807)
		- len
		- u_fd
		- aid
		- msg_out
	desc:
		- sends a message to map-server (fd) to a user (u_fd) although we use fd we keep aid for safe-check

0x3808
	Type: IZ
	Structure: <cmd>.W <u_fd>.L <aid>.L <acc_name>.?B
	index: 0,2,6,10
	len: variable: 10+NAME+LENGTH
	parameter:
		- cmd : packet identification (0x3808)
		- u_fd
		- aid
		- acc_name
	desc:
		- Transmit the result of a account_information request from map-server, with type 1

0x3809
	Type: IZ
	Structure: <cmd>.W <len>.W <nameid>.W <source>.W <type>.B <name>.24B <srcname>.24B
	index: 0,2,6,4,8,9,24
	len: 9+NAME_LENGTH+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3809)
		- len : Packet length
		- nameid : ID of obtained item
		- source : Source from where the item obtained
		- type : Obtained type. 0: Box/Package, 1: Monster, 2: NPC
		- name : Name of player who obtained the item
		- srcname : Source name as alternative of source
	desc:
		- Broadcasts if player get special items.

0x3818
	Type: IZ
	Structure: <cmd>.W <len>.W <aid>.L <guild_id>.L <flag>.B <guild_storage>.?B
	index: 0,2,4,8,12,13
	len: variable: 13+guild_storage
	parameter:
		- cmd : packet identification (0x3818)
		- len
		- aid
		- guild_id
		- flag
		- guild_storage
	desc:
		- mapif_load_guild_storage

0x3819
	Type: IZ
	Structure: <cmd>.W <aid>.L <guild_id>.L <fail>.B
	index: 0,2,6,10
	len: 11
	parameter:
		- cmd : packet identification (0x3819)
		- aid
		- guild_id
		- fail
	desc:
		- mapif_save_guild_storage_ack

0x3820
	Type: IZ
	Structure: <cmd>.W <aid>.L <char_id>.L <?>.B <party_id>.L <name>.?B
	index: 0,2,6,10,11,15
	len: 39
	parameter:
		- cmd : packet identification (0x3820)
		- aid
		- char_id
		- ?
		- party_id
		- name
	desc:
		- ACK party creation

0x3821
	Type: IZ
	Structure: <cmd>.W <?>.W <char_id>.L <party_id>.L
	index: 0,2,4,8
	len: 12
	parameter:
		- cmd : packet identification (0x3821)
		- ?
		- char_id
		- party_id
	desc:
		- Party information not found

0x3822
	Type: IZ
	Structure: <cmd>.W <party_id>.L <account_id>.L <char_id>.L <flag>.B
	index: 0,2,6,10,14
	len: 15
	parameter:
		- cmd : packet identification (0x3822)
		- party_id
		- account_id
		- char_id
		- flag
	desc:
		- mapif_party_memberadded

0x3823
	Type: IZ
	Structure: <cmd>.W <party_id>.L <account_id>.L <exp>.W <item>.W <flag>.B
	index: 0,2,6,10,12,14,15?
	len: 16?
	parameter:
		- cmd : packet identification (0x3823)
		- party_id
		- account_id
		- exp
		- item
		- flag
		- ?
	desc:
		- Party setting change notification

0x3824
	Type: IZ
	Structure: <cmd>.W <party_id>.L <account_id>.L <char_id>.L <name>.24B <type>.B
	index: 0,2,6,10,14,48
	len: 49
	parameter:
		- cmd : packet identification (0x3824)
		- party_id : Party ID
		- account_id : Account ID
		- char_id : Character ID
		- name : Character Name
		- type : Leaving reason/result
	desc:
		- Withdrawal notification party

0x3825
	Type: IZ
	Structure: <cmd>.W <party_id>.L <account_id>.L <char_id>.L <map>.W <online>.B <lv>.W <?>.?B
	index: 0,2,6,10,14,16,17,19
	len: 20?
	parameter:
		- cmd : packet identification (0x3825)
		- party_id
		- account_id
		- char_id
		- map
		- online
		- lv
		- ?
	desc:
		- Party map update notification

0x3826
	Type: IZ
	Structure: <cmd>.W <party_id>.L <flag>.B <?>.?B
	index: 0,2,6,7
	len: 16
	parameter:
		- cmd : packet identification (0x3826)
		- party_id
		- flag
		- ?
	desc:
		- Dissolution party notification

0x3827
	Type: IZ
	Structure: <cmd>.W <len>.W <party_id>.L <account_id>.L <mes>.?B
	index: 0,2,4,8,12
	len: variable: 12+len (max=512)
	parameter:
		- cmd : packet identification (0x3827)
		- len
		- party_id
		- account_id
		- mes
	desc:
		- mapif_party_message

0x3830
	Type: IZ
	Structure: <cmd>.W <account_id>.L <guild_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x3830)
		- account_id
		- guild_id
	desc:
		- mapif_guild_created

0x3831
	Type: IZ
	Structure: <cmd>.W <?>.W <guild_id>.L <?>.?B
	index: 0,2,4,8
	len: 12
	parameter:
		- cmd : packet identification (0x3831)
		- ?
		- guild_id
		- ?
	desc:
		- mapif_guild_noinfo

0x3832
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <account_id>.L <char_id>.L <flag>.B
	index: 0,2,6,10,14
	len: 15
	parameter:
		- cmd : packet identification (0x3832)
		- guild_id
		- account_id
		- char_id
		- flag
	desc:
		- ACK member add

0x3834
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <account_id>.L <char_id>.L <flag>.B <mes>.40B <name>.?B
	index: 0,2,6,10,14,15,55
	len: variable: 55+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x3834)
		- guild_id
		- account_id
		- char_id
		- flag
		- mes
		- name
	desc:
		- mapif_guild_withdraw

0x3835
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <account_id>.L <char_id>.L <online>.B <lv>.W <class_>.W
	index: 0,2,6,10,14,15,17
	len: 19
	parameter:
		- cmd : packet identification (0x3835)
		- guild_id
		- account_id
		- char_id
		- online
		- lv
		- class_
	desc:
		- Send short guild member's info

0x3836
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <flag>.B
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x3836)
		- guild_id
		- flag
	desc:
		- mapif_guild_broken

0x3837
	Type: IZ
	Structure: <cmd>.W <len>.W <guild_id>.L <account_id>.L <mes>.?B
	index: 0,2,4,8,12
	len: variable: 12+len (max=512)
	parameter:
		- cmd : packet identification (0x3837)
		- len
		- guild_id
		- account_id
		- mes
	desc:
		- Send guild message

0x3839
	Type: IZ
	Structure: <cmd>.W <len>.W <guild_id>.L <type>.W <data>.?B
	index: 0,2,4,8,10
	len: variable: 10+len (Max=2048)
	parameter:
		- cmd : packet identification (0x3839)
		- len
		- guild_id
		- type
		- data
	desc:
		- mapif_guild_basicinfochanged

0x383a
	Type: IZ
	Structure: <cmd>.W <len>.W <guild_id>.L <account_id>.L <char_id>.L <type>.W <data>.?B
	index: 0,2,4,8,12,16,18
	len: variable: 18+len (Max=2048)
	parameter:
		- cmd : packet identification (0x383a)
		- len
		- guild_id
		- account_id
		- char_id
		- type
		- data
	desc:
		- mapif_guild_memberinfochanged

0x383b
	Type: IZ
	Structure: <cmd>.W <len>.W <guild_id>.L <idx>.L <position>.?B
	index: 0,2,4,8,12
	len: variable: 12+guild_position
	parameter:
		- cmd : packet identification (0x383b)
		- len
		- guild_id
		- idx
		- position
	desc:
		- mapif_guild_position

0x383c
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <skill_id>.L <account_id>.L
	index: 0,2,6,10
	len: 14
	parameter:
		- cmd : packet identification (0x383c)
		- guild_id
		- skill_id
		- account_id
	desc:
		- ACK guild skill up

0x383d
	Type: IZ
	Structure: <cmd>.W <guild_id1>.L <guild_id2>.L <account_id1>.L <account_id2>.L <flag>.B <name1>.?B <name2>.?B
	index: 0,2,6,10,14,18,19
	len: variable: 19+2*NAME_LENGTH
	parameter:
		- cmd : packet identification (0x383d)
		- guild_id1
		- guild_id2
		- account_id1
		- account_id2
	desc:
		- ACK guild alliance

0x383e
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <mes1>.60B <mes2>.120B <?>.?B
	index: 0,2,6,66,186
	len: 256
	parameter:
		- cmd : packet identification (0x383e)
		- guild_id
		- mes1
		- mes2
		- ?
	desc:
		- Send the guild notice

0x383f
	Type: IZ
	Structure: <cmd>.W <len>.W <guild_id>.L <emblem_id>.L <emblem_data>.?B
	index: 0,2,4,8,12
	len: variable: 12+emblem_data
	parameter:
		- cmd : packet identification (0x383f)
		- len
		- guild_id
		- emblem_id
		- emblem_data
	desc:
		- Send emblem data

0x3840
	Type: IZ
	Structure: <cmd>.W <len>.W <gc>.?B
	index: 0,2,4
	len: variable: 4+num*gc
	parameter:
		- cmd : packet identification (0x3840)
		- len
		- gc
	desc:
		- mapif_guild_castle_dataload

0x3843
	Type: IZ
	Structure: <cmd>.W <guild_id>.L <aid>.L <cid>.L <time>.L
	index: 0,2,6,10,14
	len: 18
	parameter:
		- cmd : packet identification (0x3843)
		- guild_id
		- aid
		- cid
		- time of change
	desc:
		- mapif_guild_master_changed

0x3848
	Type: IZ
	Structure: <cmd>.W <size>.W <char_id>.L <flag>.B <mail_type>.B <md>.?B
	index: 0,2,4,8,9,10
	len: variable: 10+md
	parameter:
		- cmd : packet identification (0x3848)
		- size
		- char_id
		- flag
		- mail_type
		- md : Mail
	desc:
		- A player request for mail inbox

0x3849
	Type: IZ
	Structure: <cmd>.W <dest_id>.L <sender_id>.L <sender_name>.24B <mail_title>.40B
	index: 0,2,6,10,34
	len: 74
	parameter:
		- cmd : packet identification (0x3849)
		- dest_id
		- sender_id
		- sender_name
		- mail_title
	desc:
		- Report New Mail to map-server

0x384a
	Type: IZ
	Structure: <cmd>.W <size>.W <char_id>.L <zeny>.L <item>.?B
	index: 0,2,4,8,12
	len: variable: 12+item
	parameter:
		- cmd : packet identification (0x384a)
		- size
		- char_id
		- zeny
		- item
	desc:
		- Get mail attachment

0x384b
	Type: IZ
	Structure: <cmd>.W <char_id>.L <mail_id>.L <failed>.B
	index: 0,2,6,10,11
	len: 11
	parameter:
		- cmd : packet identification (0x384b)
		- char_id
		- mail_id
		- failed: Fail status when delete a mail
	desc:
		- Status about mail deletion to player

0x384c
	Type: IZ
	Structure: <cmd>.W <char_id>.L <mail_id>.L <new_mail>.B
	index: 0,2,6,10,11
	len: 11
	parameter:
		- cmd : packet identification (0x384c)
		- char_id
		- mail_id
		- new_mail
	desc:
		- Received a returned mail

0x384d
	Type: IZ
	Structure: <cmd>.W <size>.W <mail_message>.?B
	index: 0,2,4
	len: variable: 4+mail_message
	parameter:
		- cmd : packet identification (0x384d)
		- size
		- mail_message
	desc:
		- Mail sent status (to player if the sender is player and online)

0x384e
	Type: IZ
	Structure: <cmd>.W <cid_sender>.L <cid_receiver>.L <class>.W <level>.W <name>.24B
	index: 0,2,6,10,12,14
	len: 38
	parameter:
		- cmd : packet identification (0x384e)
		- cid_sender
		- cid_receiver
		- class
		- level
		- name
	desc:
		- Mail receiver's character data(character id, job, level and name)

0x3850
	Type: IZ
	Structure: <cmd>.W <size>.W <char_id>.L <count>.W <pages>.W <auction_data>.?B
	index: 0,2,4,8,10,12
	len: variable: 12+auction_data
	parameter:
		- cmd : packet identification (0x3850)
		- size
		- char_id
		- count
		- pages
		- auction_data
	desc:
		- Auction list

0x3851
	Type: IZ
	Structure: <cmd>.W <size>.W <auction_data>.?B
	index: 0,2,4
	len: variable: 4+auction_data
	parameter:
		- cmd : packet identification (0x3851)
		- size
		- auction_data
	desc:
		- Status auction registration

0x3852
	Type: IZ
	Structure: <cmd>.W <char_id>.L <result>.B
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x3852)
		- char_id
		- result
	desc:
		- Cancel an auction that requested by player

0x3853
	Type: IZ
	Structure: <cmd>.W <char_id>.L <result>.B
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x3853)
		- char_id
		- result
	desc:
		- Receive a notification that the auction has ended

0x3855
	Type: IZ
	Structure: <cmd>.W <char_id>.L <bid>.L <result>.B
	index: 0,2,6,10
	len: 11
	parameter:
		- cmd : packet identification (0x3855)
		- char_id
		- bid
		- result
	desc:
		- Get back the money from biding auction (someone else have bid it over)

0x3856
	Type: IZ
	Structure: <cmd>.W <aid>.L <guild_id>.W
	index: 0,2,6
	len: 8
	parameter:
		- cmd : packet identification (0x3856)
		- aid : account_id
		- guild_id
	desc:
		- Acknowledge the good deletion of the bound item

0x3857
	Type: IZ
	Structure: <cmd>.W <size>.W <count>.W <guild_id>.W { <items>.?B }*MAX_INVENTORY
	index: 0,2,4,6,8
	len: variable: 8+items
	parameter:
		- cmd : packet identification (0x3857)
		- size
		- count : number of item retrieved
		- guild_id
		- items: retrieved guild bound items
	desc:
		- Ask map-server to process the retrieved guild bound items from expelled member

0x3860
	Type: IZ
	Structure: <cmd>.W <size>.W <char_id>.L <quest>.?B
	index: 0,2,4,8
	len: variable: 8+quest
	parameter:
		- cmd : packet identification (0x3860)
		- size
		- char_id
		- quest
	desc:
		- Send quest log to a player

0x3861
	Type: IZ
	Structure: <cmd>.W <char_id>.L <success>.B
	index: 0,2,4
	len: 5
	parameter:
		- cmd : packet identification (0x3861)
		- char_id
		- success
	desc:
		- Send quest log saving status

0x3880
	Type: IZ
	Structure: <cmd>.W <account_id>.L <class>.W <pet_id>.L
	index: 0,2,6,8
	len: 12
	parameter:
		- cmd : packet identification (0x3880)
		- account_id
		- class
		- pet_id
	desc:
		- Send pet egg creation status

0x3881
	Type: IZ
	Structure: <cmd>.W <size>.W <account_id>.L <status>.B <s_pet>.?B
	index: 0,2,4,6,8,9
	len: variable: 9+s_pet
	parameter:
		- cmd : packet identification (0x3881)
		- size
		- account_id
		- status: 1 means no info available
		- s_pet: Pet data
	desc:
		- Send packet data to a player

0x3882
	Type: IZ
	Structure: <cmd>.W <account_id>.L <flag>.B
	index: 0,2,4
	len: 5
	parameter:
		- cmd : packet identification (0x3882)
		- account_id
		- flag: 1 failed to save
	desc:
		- Send pet save status

0x3883
	Type: IZ
	Structure: <cmd>.W <flag>.B
	index: 0,2
	len: 3
	parameter:
		- cmd : packet identification (0x3883)
		- flag
	desc:
		- Send pet deletion status

0x388a
	Type: IZ
	Structure: <cmd>.W <size>.W <type>.B <account_id>.L <result>.B <entries>.?B
	index: 0,2,4,5,9
	len: 9+variable
	parameter:
		- cmd : packet identification (0x388a)
		- size
		- type : Storage type, 0 - TABLE_INVENTORY, 1 - TABLE_CART, 2 - TABLE_STORAGE
		- account_id
		- result : True if data loaded, false if failed
		- entries : Inventory/cart/storage entries
	desc:
		- Process inventory/cart/storage entries for player from inter-server

0x388b
	Type: IZ
	Structure: <cmd>.W <account_id>.L <result>.B <type>.B
	index: 0,2,6,7
	len: 11
	parameter:
		- cmd : packet identification (0x388b)
		- account_id
		- result : 1 - success, 0 - failed
		- type : Storage type, 0 - TABLE_INVENTORY, 1 - TABLE_CART, 2 - TABLE_STORAGE
	desc:
		- Info about inventory/cart/storage data is saved

0x388c
	Type: IZ
	Structure: <cmd>.W <len>.W { <storage_table>.? }*?
	index: 0,2,6,...
	len: 6+variable
	parameter:
		- cmd : packet identification (0x388c)
		- len : packet length
		- storage_table : Storage table information
	desc:
		- Receive storage information

0x3890
	Type: IZ
	Structure: <cmd>.W <size>.W <account_id>.L <flag>.B <s_homunculus>.?B
	index: 0,2,4,8,9
	len: variable: 9+s_homunculus
	parameter:
		- cmd : packet identification (0x3890)
		- size
		- account_id
		- flag: 0 means homunculus creation is failed
		- s_homunculus: Homunculus data
	desc:
		- Send homunculus creation status

0x3891
	Type: IZ
	Structure: <cmd>.W <size>.W <account_id>.L <flag>.B <s_homunculus>.?B
	index: 0,2,4,8,9
	len: variable: 9+s_homunculus
	parameter:
		- cmd : packet identification (0x3891)
		- size
		- account_id
		- flag: 0 means failed to retrieve homunculus data
		- s_homunculus: Homunculus data
	desc:
		- Send homunculus data to a player

0x3892
	Type: IZ
	Structure: <cmd>.W <account_id>.L <flag>.B
	index: 0,2,4
	len: 5
	parameter:
		- cmd : packet identification (0x3892)
		- account_id
		- flag: 1 if success
	desc:
		- Send homunculus saving status to a player

0x3893
	Type: IZ
	Structure: <cmd>.W <flag>.B
	index: 0,2
	len: 3
	parameter:
		- cmd : packet identification (0x3893)
		- flag: 1 Homunculus deleted
	desc:
		- Send homunculus deletion status

0x38A0
	Type: IZ
	Structure: <cmd>.W <size>.W <clan structure>.?B * n
	index: 0, 2, 4
	len: variable: 4+clan*n
	parameter:
		- cmd : packet identification (0x38A0)
		- size
		- clan structure
	desc:
		- Send all loaded clans to the map-server

0x38A1
	Type: IZ
	Structure: <cmd>.W <size>.W <message>.?B
	index: 0, 2, 4
	len: variable: 4+message
	parameter:
		- cmd : packet identification (0x38A1)
		- size
		- message : the data of the clan chat message packet
	desc:
		- Sends a clan chat message to other map-servers

0x38A2
	Type: IZ
	Structure: <cmd>.W <clan id>.L <online count>.W
	index: 0, 2, 6
	len: 8
	parameter:
		- cmd : packet identification (0x38A2)
		- clan id : the clan id of the clan that needs an update
		- online count : the amount of currently connected players in the clan
	desc:
		- Updates the online clan member count for all other map-servers

========================
| 3.2 Char-Map Packets |
========================
0x2af9
	Type: AZ
	Structure: <cmd>.W <?>.B
	index: 0,2
	len: 3
	parameter:
		- cmd : packet identification (0x2af9)
		- ?
	desc:
		- chrif_connectack

0x2afb
	Type: HZ
	Structure: <cmd>.W <size>.W <status>.B <servername>.?B <defaultmap>.?B <mapx>.W <mapy>.W
	index: 0,2,4,5+NAME_LENGTH,5+NAME_LENGTH+MAP_NAME_LENGTH,5+NAME_LENGTH+MAP_NAME_LENGTH+2
	len: variable: 9+NAME_LENGTH+MAP_NAME_LENGTH
	parameter:
		- cmd : packet identification (0x2afb)
		- status : 0 Success, 1 : Fail
		- servername :
		- defaultmap :
		- mapx :
		- mapy :
	desc:
		- Map received from map-server, then send reply with server name and default map

0x2afd
	Type: AZ
	Structure: <cmd>.W <mmo_charstatus_len>.W <account_id>.L <?>.L <?>.L <?>.L <?>.L <?>.B <cd>.?B
	index: 0,2,4,8,12,16,20,24,25
	len: variable: mmo_charstatus_len
	parameter:
		- cmd : packet identification (0x2afd)
		- mmo_charstatus_len
		- account_id
		- ?
		- ?
		- ?
		- ?
		- ?
		- cd
	desc:
		- auth request from map-server

0x2b00
	Type: AZ
	Structure: <cmd>.W <users>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2b00)
	desc:
		- Send to map-servers the users count on this char-server, (meaning the total of all map-server)

0x2b03
	Type: AZ
	Structure: <cmd>.W <account_id>.L <?>.B
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x2b03)
		- account_id
		- ?
	desc:
		- Player Requesting char-select from map-server

0x2b04
	Type: AZ
	Structure: <cmd>.W <?>.W <ip>.L <port>.W
	index: 0,2,4,8
	len: ?
	parameter:
		- cmd : packet identification (0x2b04)
		- ?
		- ip
		- port
	desc:
		- Receive maps from some other map-server (relayed via char-server)

0x2b06
	Type: AZ
	Structure: <cmd>.W <account_id>.L <login_id1>.L <login_id2>.L <char_id>.L <map_index>.W <x>.W <y>.W <ip>.L <port>.W
	index: 0,2,6,10,14,16,18,20,24,28
	len: 30
	parameter:
		- cmd : packet identification (0x2b06)
		- account_id
		- login_id1
		- login_id2
		- char_id
		- map_index
		- x
		- y
		- ip
		- port
	desc:
		- Map-server change request acknowledgment (positive or negative)

0x2b09
	Type: AZ
	Structure: <cmd>.W <?>.L <?>?
	index: 0,2,6
	len: 30
	parameter:
		- cmd : packet identification (0x2b09)
		- ?
		- ?
	desc:
		- Lookup to search if that char_id correspond to a name.

0x2b0b
	Type: AZ
	Structure: <cmd>.W <len>.W <aid>.L <cid>.L <count>.W <skill_cooldown_data>.?B
	index: 0,2,4,8,12,14
	len: variable: 14+MAX_SKILLCOOLDOWN*skill_cooldown_data
	parameter:
		- cmd : packet identification (0x2b0b)
		- len
		- aid
		- cid
		- count
		- skill_cooldown_data
	desc:
		- Retrieve and load skillcooldown for a player

0x2b0d
	Type: AZ
	Structure: <cmd>.W <acc>.L <sex>.L
	index:0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b0d)
		- acc
		- sex
	desc:
		- Request char-server to change sex of char

0x2b0f
	Type: AZ
	Structure: <cmd>.W <aid>.L <name>.24B <operation>.W <result>.W
	index: 0,2,6,30,32
	len: 34
	parameter:
		- cmd : packet identification (0x2b0f)
		- aid
		- name
		- operation
		- result
	desc:
		- Processing a reply to chrif_req_login_operation() (request to modify an account).

0x2b12
	Type: AZ
	Structure: <cmd>.W <partner_id1>.L <partner_id2>.L <?>.B
	index: 0,2,6,10
	len: 11
	parameter:
		- cmd : packet identification (0x2b12)
		- partner_id1
		- partner_id2
		- ?
	desc:
		- Divorce players (only used if 'partner_id' is offline)

0x2b14
	Type: AZ
	Structure: <cmd>.W <id>.L <res>.B <ret_status>.L
	index: 0,2,6,7
	len: 11
	parameter:
		- cmd : packet identification (0x2b14)
		- id
		- res
		- ret_status
	desc:
		- Disconnection of a player (account has been banned of has a status, from login/char-server)

0x2b1b
	Type: AZ
	Structure: <cmd>.W <size>.W <size>.W <size>.W <smith_rank>.?B <alchi_rank>.?B <taek_rank>.?B
	index: 0,2,4,6,?,?,?
	len: ? (Max=32000)
	parameter:
		- cmd : packet identification (0x2b1b)
		- size: total packet length
		- size: Alchemist block size
		- size: Blacksmith block size
		-
		-
		-
	desc:
		- Send map-servers fames ranking lists

0x2b1d
	Type: AZ
	Structure: <cmd>.W <len>.W <aid>.L <cid>.L
	index: 0,2,4,8
	len: variable: 14+50*status_change_data
	parameter:
		- cmd : packet identification (0x2b1d)
		- len
		- aid
		- cid
	desc:
		- Map-server requesting to send the list of sc_data the player has saved

0x2b1e
	Type: AZ
	Structure: <cmd>.W <new_ip>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2b1e)
		- new_ip
	desc:
		- Request forwarded from char-server for inter-server IP sync

0x2b1f
	Type: AZ
	Structure: <cmd>.W <account_id>.L <reason>.B
	index: 0,2,6
	len: 7
	parameter:
		- cmd : packet identification (0x2b1f)
		- account_id
		- reason
	desc:
		- Request to kick char from a certain map-server

0x2b20
	Type: AZ
	Structure: <cmd>.W <len>.W <ip>.L <port>.W
	index: 0,2,4,8
	len: 10
	parameter:
		- cmd : packet identification (0x2b20)
		- len
		- ip
		- port
	desc:
		- Remove specified maps (used when some other map-server disconnects)

0x2b21
	Type: AZ
	Structure: <cmd>.W <aid>.L <cid>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b21)
	desc:
		- chrif_save_ack (Received after a character has been "final saved" on the char-server)

0x2b22
	Type: AZ
	Structure: <cmd>.W <type>.B <index>.B <fame>.L
	index: 0,2,3,4
	len: 8
	parameter:
		- cmd : packet identification (0x2b22)
		- type
		- index
		- fame
	desc:
		- Send to map-servers the updated fame ranking lists

0x2b24
	Type: AZ
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2b24)
	desc:
		- Map-server keep alive packet, answer back map that we alive as well

0x2b25
	Type: AZ
	Structure: <cmd>.W <father_id>.L <mother_id>.L <char_id>.L
	index: 0,2,6
	len: ? (Max=64)
	parameter:
		- cmd : packet identification (0x2b25)
		- father_id
		- mother_id
		- char_id
	desc:
		- Removes baby from Father ID and Mother ID

0x2b27
	Type: AZ
	Structure: <cmd>.W <account_id>.L <char_id>.L <login_id1>.L <sex>.B
	index: 0,2,6,10,14
	len: 15
	parameter:
		- cmd : packet identification (0x2b27)
		- account_id
		- char_id
		- login_id1
		- sex
	desc:
		- Client authentication failed

0x2b29
	free

0x2b2b
	Type: AZ
	Structure: <cmd>.W <aid>.L <vip_time>.L <groupid>.L <flag>.B
	index: 0,2,6,10,11
	len: 15
	parameter:
		- cmd : packet identification (0x2b2b)
		- aid
		- vip_time
		- groupid
		- flag : 0x1: isvip, is this account in vip mode atm, 0x2: isgm, 0x4: show rates on player
	desc:
		- Received vip-data from char-server, fill map-server data

0x2b2f
	Type: AZ
	Structure: <cmd>.W <len>.W <cid>.L <count>.B { <bonus_script_data>.?B }
	index: 0,2,4,8
	len: variable: 9+count*bonus_script_data
	parameter:
		- cmd : packet identification (0x2b2f)
	desc:
		- Get bonus_script data(s) from table to load

0x2736
	Type: ZA
	Structure: <cmd>.W <ip>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2736)
	desc:
		- ip address update

0x2afa
	Type: ZA
	Structure: <cmd>.W <size>.W {<map_index>.W}*instance_start
	index: 0,2,4
	len: variable: 4+instance_start*4
	parameter:
		- cmd : packet identification (0x2afa)
		- size
		- map_index*instance_start
	desc:
		- Send available normal maps. chrif_sendmap

0x2afc
	Type: ZA
	Structure: <cmd>.W <account_id>.L <char_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2afc)
		- account_id
		- char_id
	desc:
		- Request sc_data from char-server

0x2afe
	Type: ZA
	Structure: <cmd>.W <map_usercount>.W
	index: 0,2
	len: 4
	parameter:
		- cmd : packet identification (0x2afe)
	desc:
		- send_usercount_tochar (unused)

0x2aff
	Type: ZA
	Structure: <cmd>.W <len>.W <users>.W <account_id>.L <char_id>.L
	index: 0,2,4,6+8*i,6+8+i+4
	len: variable: 6+8*users
	parameter:
		- cmd : packet identification (0x2aff)
		- len
		- users
		- account_id
		- char_id
	desc:
		- Map-server sent us all his users info, (aid and cid) so we can update online_char_db

0x2b01
	Type: ZA
	Structure: <cmd>.W <mmo_charstatus_len>.W <account_id>.L <char_id>.L <flag>.B
	index: 0,2,4,8,12
	len: variable: mmo_charstatus_len
	parameter:
		- cmd : packet identification (0x2b01)
	desc:
		- charsave of char XY account XY

0x2b02
	Type: ZA
	Structure: <cmd>.W <id>.L <login_id1>.L <login_id2>.L <s_ip>.L
	index: 0,2,6,10,14
	len: 18
	parameter:
		- cmd : packet identification (0x2b02)
		- id
		- login_id1
		- login_id2
		- s_ip
	desc:
		- chrif_charselectreq

0x2b05
	Type: ZA
	Structure: <cmd>.W <id>.L <login_id1>.L <login_id2>.L <char_id>.L <mapindex>.W <x>.W <y>.W <ip>.L <port>.W <sex>.B <client_addr>.L <group_id>.L
	index: 0,2,6,10,14,18,20,22,24,28,30,31,35
	len: 39
	parameter:
		- cmd : packet identification (0x2b05)
		- id
		- login_id1
		- login_id2
		- char_id
		- mapindex
		- x
		- y
		- ip
		- port
		- sex
		- client_addr
		- group_id
	desc:
		- Tell the char-server the map change / quest for ok

0x2b07
	Type: ZA
	Structure: <cmd>.W <char_id>.L <friend_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b07)
		- char_id
		- friend_id
	desc:
		- Asks char-server to remove friend_id from the friend list of char_id

0x2b08
	Type: ZA
	Structure: <cmd>.W <char_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2b08)
	desc:
		- Search char through id on char-server

0x2b0a
	Type: ZA
	Structure: <cmd>.W <account_id>.L <char_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b0a)
		- account_id
		- char_id
	desc:
		- Request skillcooldown from char-server

0x2b0c
	Type: ZA
	Structure: <cmd>.W <id>.W <actual_email>.40B <new_email>.40B
	index: 0,2,6,46
	len: 86
	parameter:
		- cmd : packet identification (0x2b0c)
		- id
		- actual_email
		- new_email
	desc:
		- Change Email

0x2b0e
	Type: ZA
	Structure: <cmd>.W <aid>.L <name>.24B <operation_type>.W <timediff>.L <val1>.L <val2>.L
	index: 0,2,30,36,40
	len: 44
	parameter:
		- cmd : packet identification (0x2b0e)
		- aid
		- name
		- operation_type: 1:block account, 2:ban account, 3:unblock account, 4:unban account, 5:changesex, 6:VIP, 7:changecharsex
		- timediff
		- val1
		- val2
	desc:
		- Send an account modification request to the login-server (via char-server).

0x2b10
	Type: ZA
	Structure: <cmd>.W <char_id>.L <fame>.L <type>.B
	index: 0,2,6,10
	len: 11
	parameter:
		- cmd : packet identification (0x2b10)
		- char_id
		- fame
		- type
	desc:
		- Request/Receive top 10 Fame character list

0x2b11
	Type: ZA
	Structure: <cmd>.W <partner_id1>.L <partner_id2>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b11)
		- partner_id1
		- partner_id2
	desc:
		- Request char-server to Divorce Players

0x2b15
	Type: ZA
	Structure: <cmd>.W <len>.W <account_id>.L <char_id>.L <count>.W
	index: 0,2,4,8,12
	len: variable: 14+MAX_SKILLCOOLDOWN*skill_cooldown_data
	parameter:
		- cmd : packet identification (0x2b15)
		- len
		- account_id
		- char_id
		- count
	desc:
		- Request to save skill cooldown data

0x2b16
	Type: ZA
	Structure: <cmd>.W <base_rate>.L <job_rate>.L <drop_rate>.L
	index: 0,2,6,10
	len: 14
	parameter:
		- cmd : packet identification (0x2b16)
		- base_rate
		- job_rate
		- drop_rate
	desc:
		- Send rates and motd to char-server

0x2b17
	Type: ZA
	Structure: <cmd>.W <char_id>.L <account_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b17)
		- char_id
		- account_id
	desc:
		- Tell char-server character disconnected

0x2b18
	Type: ZA
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2b18)
	desc:
		- Tell char-server to reset all chars offline

0x2b19
	Type: ZA
	Structure: <cmd>.W <char_id>.L <account_id>.L
	index: 0,2,6
	len: 10
	parameter:
		- cmd : packet identification (0x2b19)
		- char_id
		- account_id
	desc:
		- Tell char-server character is online

0x2b1a
	Type: ZA
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2b1a)
	desc:
		- Build the fame ranking lists and send them

0x2b1c
	Type: ZA
	Structure: <cmd>.W <len>.W <account_id>.L <char_id>.L <count>.W
	index: 0,2,4,8,12
	len: variable: 14+SC_MAX*status_change_data
	parameter:
		- cmd : packet identification (0x2b1c)
		- len
		- account_id
		- char_id
		- count
	desc:
		- parses the sc_data of the player and sends it to the char-server for saving

0x2b23
	Type: ZA
	Structure: <cmd>.W
	index: 0
	len: 2
	parameter:
		- cmd : packet identification (0x2b23)
	desc:
		- pings the char-server (chrif_keepalive)

0x2b26
	Type: ZA
	Structure: <cmd>.W <account_id>.L <char_id>.L <login_id1>.L <sex>.B <client_addr>.L <autotrade>.B
	index: 0,2,6,10,14,15,19
	len: 20
	parameter:
		- cmd : packet identification (0x2b26)
		- account_id
		- char_id
		- login_id1
		- sex
		- client_addr
		- autotrade
	desc:
		- client authentication request

0x2b28
	Type: ZA
	Structure: <cmd>.W <aid>.L <timediff>.L <character_name>.?B
	index: 0,2,6,10
	len: variable: 10+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x2b28)
		- aid
		- timediff
		- character_name
	desc:
		- chrif_req_charban

0x2b2a
	Type: ZA
	Structure: <cmd>.W <aid>.L <character_name>.?B
	index: 0,2,6
	len: 6+NAME_LENGTH
	parameter:
		- cmd : packet identification (0x2b2a)
		- aid
		- character_name
	desc:
		- chrif_req_charunban

0x2b2d
	Type: ZA
	Structure: <cmd>.W <char_id>.L
	index: 0,2
	len: 6
	parameter:
		- cmd : packet identification (0x2b2d)
	desc:
		- Requests bonus_script data

0x2b2e
	Type: ZA
	Structure: <cmd>.W <len>.W <char_id>.L <count>.B { <bonus_script_data>.?B }
	index: 0,2,4,8
	len: variable: 9+count*bonus_script_data
	parameter:
		- cmd : packet identification (0x2b2e)
		- len
		- char_id
		- count
	desc:
		- Stores bonus_script data(s) to the table
//===== rAthena Documentation ================================
//= Packet Structure Notation
//===== By: ==================================================
//= Ai4rei
//===== Last Updated: ========================================
//= 20120810
//===== Description: =========================================
//= Explanation how packets are and should be documented.
//============================================================

This document specifies how packets are and should be documented, to
keep packet structure comments consistent in the entire codebase. It
also serves as a guide to those, who are unfamiliar with the general
packet layout.

All mentioned data types are assumed to be little-endian (least-
significant byte first, least significant bit last) and of same size
regardless of architecture.

= Typical description of a packet =

 /// Notifies the client about entering a chatroom (ZC_ENTER_ROOM).
 /// 00db <packet len>.W <chat id>.L { <role>.L <name>.24B }*
 /// role:
 ///     0 = owner (menu)
 ///     1 = normal

The first line contains a brief description of what the packet does,
or what it is good for, followed by it's AEGIS name in parentheses;
first two letters of the AEGIS name specify origin (first letter)
and destination (second letter) of the packet. If the packet's name
is not known or is not applicable (rAthena server-server packets),
specify at least these two letters to indicate the direction of the
packet. Do not use S(end)/R(ecv) for this, as it is inaccurate and
location dependent (if the description is copied to different server
or other RO-related projects, it might change it's meaning).

If there are multiple versions of the packet, the AEGIS name is
appended to the end of the packet's structure instead. If the name
did not change between versions, a PACKETVER expression is appended,
such as (PACKETVER >= 20111111).

Second line describes the packet's field structure, beginning with a
%04x formatted packet type, followed by the individual fields and
their types. Each field begins with it's name enclosed in angle
brackets ( <field name> ) followed by a dot and the data size type.
Field names should be lower-case and without underscores. If other
packets already have a field in common, use that name, rather than
inventing your own (ex. "packet len" and "account id"). Repeated and
optional fields are designated with curly and square brackets
respectively, padded with a single space at each side.

Further lines are optional and either include details about the
the packet's mechanics or further explanation on the packet fields'
values.

= Packet field data size type =

 B = 1 byte (byte)
 W = 2 bytes (word)
 L = 4 bytes (long, dword)
 F = 4 bytes (float)
 Q = 8 bytes (quad)

 nB = n bytes
 ?B = variable/unknown amount of bytes
 nS = n bytes, zero-terminated
 ?S = variable/unknown amount of bytes, zero-terminated

= Repetition of packet fields =

 {} = repeated block
 {}* = variable/unknown amount of consecutive blocks
 {}*n = n times repeated block
 [] = optional fields

= Packet origin and destination letters =

 A = Account (Login)
 C = Client
 H = Character
 I = Inter
 S = Server (any type of server)
 Z = Zone (Map)

= Examples =

Packet with nested repetition blocks:

 /// Presents a textual list of producable items (ZC_MAKABLEITEMLIST).
 /// 018d <packet len>.W { <name id>.W { <material id>.W }*3 }*
 /// material id:
 ///     unused by the client

Packet with multiple versions identified with different AEGIS names:

 /// Request for server's tick.
 /// 007e <client tick>.L (CZ_REQUEST_TIME)
 /// 0360 <client tick>.L (CZ_REQUEST_TIME2)

Packet with multiple versions identified with same AEGIS name:

 /// Cashshop Buy Ack (ZC_PC_CASH_POINT_UPDATE).
 /// 0289 <cash point>.L <error>.W
 /// 0289 <cash point>.L <kafra point>.L <error>.W (PACKETVER >= 20070711)

Packet with combination of both different AEGIS names and different
versions with same name:

 /// Sends hotkey bar.
 /// 02b9 { <is skill>.B <id>.L <count>.W }*27 (ZC_SHORTCUT_KEY_LIST)
 /// 07d9 { <is skill>.B <id>.L <count>.W }*36 (ZC_SHORTCUT_KEY_LIST_V2, PACKETVER >= 20090603)
 /// 07d9 { <is skill>.B <id>.L <count>.W }*38 (ZC_SHORTCUT_KEY_LIST_V2, PACKETVER >= 20090617)

Packet for a client command:

 /// /item /monster (CZ_ITEM_CREATE).
 /// Request to make items or spawn monsters.
 /// 013f <item/mob name>.24B
//===== rAthena Documentation ================================
//= Permissions List
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20130613
//===== Description: =========================================
//= List of available permissions and their functions.
//============================================================

This file describes the functions of player group permissions,
configured in '/conf/groups.conf' under the "permissions" bracket.

To search for a permission, write "*" before its name.
The format of this file is as follows:
	1. Basic Permissions
	2. Extended Permissions
	3. Command-related

========================
| 1. Basic Permissions |
========================
---------------------------------------

*can_trade

Allows player to distribute items, such as through trades, dropping,
vending, storage, mail, etc.

---------------------------------------

*can_party

Allows player to create and join parties.

---------------------------------------

*attendance

Allows player to use the daily attendance system.

---------------------------------------

===========================
| 2. Extended Permissions |
===========================
---------------------------------------

*all_skill

Grants player all available skills in the player's skill tree.

---------------------------------------

*all_equipment

Allows player to equip any item, regardless of requirements (class, level,
etc.). Note that this can cause client errors if a sprite does not exist.

---------------------------------------

*skill_unconditional

Allows player to use any skill, regardless of required conditions (SP,
items, etc.).

---------------------------------------

*join_chat

Allows player to join password-protected chatrooms.

---------------------------------------

*kick_chat

Prevents player from being kicked from a chatroom.

---------------------------------------

*view_hpmeter

Allows player to see the HP bar of every player.

---------------------------------------

*view_equipment

Allows player to view the equipment of every player, regardless of that
player's setting.

---------------------------------------

*hack_info

Allows player to receive all information about players who try to hack,
spoof a name, etc.

---------------------------------------

*disable_pvm

Prevents player from attacking monsters.

---------------------------------------

*disable_pvp

Prevents player from attacking other players.

---------------------------------------

*can_trade_bounded

Allows player to do normal item actions with bounded items (drop, sell,
trade, etc.).

---------------------------------------
 
*item_unconditional

Allows player to consume any consumable item regardless the requirements
(bypass noitemconsumption mapflag, item's class, gender, status changes,
item delay, etc).

---------------------------------------

======================
| 3. Command-related |
======================
---------------------------------------

*all_commands

Allows usage of all atcommands and charcommands.

---------------------------------------

*disable_commands_when_dead

Disables usage of atcommands when player is dead.

---------------------------------------

*hide_session

Hides player session from being displayed by atcommands (@who, @whomap,
etc.).

---------------------------------------

*who_display_aid

Displays all GMs and character/account IDs in the @who command.

---------------------------------------

*any_warp

Allows player to bypass 'nowarp', 'nowarpto', 'noteleport', and 'nomemo'
mapflags in commands which modify a character's map or coordinates (@memo,
@mapmove, @go, @jump, etc.).

---------------------------------------

*receive_requests

Allows player to receive requests through the @requests command.

---------------------------------------

*show_bossmobs

Displays boss mobs in the @showmobs command.

---------------------------------------

*channel_admin

Allows player to modify #channel settings regardless of ownership and to
join password-protected channels without a password.

---------------------------------------

*use_check

Allows player to use the client command /check (displays character status).

---------------------------------------

*use_changemaptype

Allows player to use the client command /changemaptype.

---------------------------------------

*command_enable

Enable to use atcommand while talking with NPC.

---------------------------------------

*bypass_stat_onclone

Bypass max parameter limit while using @clonestat

---------------------------------------

*bypass_max_stat

Allow to bypass the maximum stat parameter (at conf/player.conf) to
maximum value 32,767.

---------------------------------------

*macro_detect

Allows player to use the client command /macro_detector.

---------------------------------------

*macro_register

Allows player to use the client commands /maco_register (used to add new captcha) and /macro_preview (used to preview captcha by ID).

---------------------------------------
//===== rAthena Documentation ================================
//= Quest Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20220629
//===== Description: =========================================
//= Explanation of the quest_db.yml file and structure.
//============================================================

---------------------------------------

Id: Quest ID.

---------------------------------------

Title: Quest title.

---------------------------------------

TimeLimit: Amount of time before the quest expires.

Use a number followed by "d" for day(s), "h" for hour(s), "mn" for minute(s), and "s" for second(s).
Specifying with "+" will mark how long until the quest expires.
Specifying without "+" will mark the exact time the quest expires. Format: "d" (optional), [0-23]"h" (required), [0-59]"mn" (optional), [0-59]"s" (optional).

Please note the number before "d" only shifts the exact timer to the given day(s).

---------------------------------------

Targets: Quest objective target.

The target can be a combination of Mob/Count or of Id/Count and other fields.
If Mob is supplied, Count is required and the other fields are ignored.
If Id is supplied, Count is required for each new entry.

  - Mob                Name of monster to kill (aegis monster name).
    Count              Amount of monsters to kill. Set to 0 to skip the target on import.
    Id                 Unique target index for the quest Id. Requires a positive number.
    Race               Monster race target. (Default: All). Valid races are Angel, Brute, DemiHuman, Demon, Dragon, Fish, Formless, Insect, Plant, Undead, All.
    Size               Monster size target. (Default: All). Valid sizes are Small, Medium, Large, All.
    Element            Monster element target. (Default: All). Valid elements are Dark, Earth, Fire, Ghost, Holy, Neutral, Poison, Undead, Water, Wind, All.
    MinLevel           Minimum monster level target. If not supplied but MaxLevel defined, MinLevel is 1. Set to 0 to ignore MinLevel on import.
    MaxLevel           Maximum monster level target. Set to 0 to ignore MaxLevel on import.
    Location           Map name where kills are counted.
    MapName            Displayed map name in quest UI.
    MapMobTargets      List of monster names. Only names in the list will increase the kill counter. Only active when Id is used.
      <name>: <bool>   Monster name and whether the monster is added or removed from the list.

---------------------------------------

Drops: Quest item drop targets.

  - Mob              Monster to kill. 0 will apply to all monsters.
    Item             Item to drop (aegis item name).
    Count            Amount of items that will drop. Non-stackable items default to 1.
    Rate             Item drop rate. (10000 = 100%)
//===== rAthena Documentation ================================
//= Permanent Quest Variables
//===== By: ==================================================
//= Lupus
//===== Last Updated: ========================================
//= 20120826
//===== Description: =========================================
//= This file should help to understand and manage bit-wise 
//= quest variables. You can store up to 31 boolean value into 
//= a single variable.
//============================================================

Variable: MISC_QUEST
--------------------------------------------------------------

Quest:		Juice Maker Quest
Info:		How to make juices. This bit keeps final state of the quest.
How to set:	set MISC_QUEST, MISC_QUEST | 1;
How to check:	if (MISC_QUEST & 1) {}

Quest:		-
Info:		-
How to set:	set MISC_QUEST, MISC_QUEST | 2;
How to check:	if (MISC_QUEST & 2) {}

Quest:		Morgenstein Quest
Info:		How to make Mixture & Counteragent. This bit keeps final state of the quest.
How to set:	set MISC_QUEST, MISC_QUEST | 4;
How to check:	if (MISC_QUEST & 4) {}

Quest:		Prontera Culvert Quest
Info:		Determines if player can enter Prontera Culverts.
How to set:	set MISC_QUEST, MISC_QUEST | 8;
How to check:	if (MISC_QUEST & 8) {}

Quest:		Edgar's Offer
Info:		Cheap ticket from Izlude to Alberta. This bit keeps final state of the quest.
How to set:	set MISC_QUEST, MISC_QUEST | 16;
How to check:	if (MISC_QUEST & 16) {}

Quest:		Piano Quest
Info:		The only way from Niflheim to Umbala.
How to set:	set MISC_QUEST, MISC_QUEST | 32;
How to check:	if (MISC_QUEST & 32) {}

Quest:		-
Info:		-
How to set:	set MISC_QUEST, MISC_QUEST | 64;
How to check:	if (MISC_QUEST & 64) {}

Quest:		-
Info:		-
How to set:	set MISC_QUEST, MISC_QUEST | 128;
How to check:	if (MISC_QUEST & 128) {}

Quest:		-
Info:		-
How to set:	set MISC_QUEST, MISC_QUEST | 256;
How to check:	if (MISC_QUEST & 256) {}

Quest:		Cube Room
Info:		Lighthalzen Cube Room quest (to enter Bio-Lab)
How to set:	set MISC_QUEST, MISC_QUEST | 512;
How to check:	if (MISC_QUEST & 512) {}

Quest:		Reset Skills Event
Info:		Yuno, Hypnotist Teacher
How to set:	set MISC_QUEST, MISC_QUEST | 1024;
How to check:	if (MISC_QUEST & 1024) {}

Quest:		Slotted Arm Guard Quest
Info:		Ninja Job Room, Boshuu
How to set:	set MISC_QUEST, MISC_QUEST | 2048;
How to check:	if (MISC_QUEST & 2048) {}

Quest:		Improved Arm Guard Quest
Info:		Ninja Job Room, Basshu
How to set:	set MISC_QUEST, MISC_QUEST | 4096;
How to check:	if (MISC_QUEST & 4096) {}

Quest:		Rachel Sanctuary Quest
Info:		Determines if player can access Rachel Santuary.
How to set:	set MISC_QUEST, MISC_QUEST | 8192;
How to check:	if (MISC_QUEST & 8192) {}

Quest:		Message Delivery Quest
Info:		Send a message to Elly, in Niflheim from Erious.
How to set:	set MISC_QUEST, MISC_QUEST | 16384;
How to check:	if (MISC_QUEST & 16384) {}

Quest:		Umbala Domestic Dispute?
Info:		Reward: 1 Yggdrasil Leaf.
How to set:	set MISC_QUEST, MISC_QUEST | 32768;
How to check:	if (MISC_QUEST & 32768) {}

Quest:		Access to the Turtle Island
Info:		Reward: ~1 OCA, OVB, GB.
How to set:	set MISC_QUEST, MISC_QUEST | 65536;
How to check:	if (MISC_QUEST & 65536) {}


Variable: MISC_QUEST2
--------------------------------------------------------------

Quest:		-
Info:		-
How to set:	set MISC_QUEST2, MISC_QUEST2 | ?;
How to check:	if (MISC_QUEST2 & ?) {}
//===== BetterRA Documentation================================
//= BetterRA Script Encoding
//===== By:==================================================
//= BetterRA Dev Team
//===== Last Updated:========================================
//= 20220308
//===== Description:=========================================
//= 将脚本编译为机器码，加简单的混淆操作。
//= 不是常见的加密操作，只是将脚本程序转为机器可以识别的机器码。
//= 被编码的脚本不需要解密操作，脚本底层可以直接识别
//= 通过此操作编码的脚本，解密和反向成为几乎不可能的一件事情
//===========================================================

通过 map-server.exe 对脚本进行编码操作, 防止倒卖修改以及滥用

参数:
	-input <路径>	输入文件(被支持的类型: txt\conf\文件夹)
	-output <路径>	输出文件(类型必须与 -input 对应)
	-uid <UID>	绑定 UID(UID为整数类型)
	-onlyenc		只加密带有 script_enc 的脚本
	
uid:
	网络授权相关的ID
	通过 UID 才能对脚本进行机器码绑定邮箱绑定和结算, 带有UID的文件如果没有经过网络授权该脚本无法使用
	
onlyenc:
	脚本函数中的 script 关键字 改为 script_enc 并且在加密时脚本只对带有 script_enc 的脚本进行加密
	
使用方法：
1.可对目录下的所有文件进行编码
	例子: map-server.exe /generate-encode -input npc/BetterRa/ -output npc/BetterRa/

2.可对单个文件进行编码
	例子: map-server.exe /generate-encode -input npc/BetterRa/BetterRA_test.txt -output npc/BetterRa/BetterRA_test_enc.txt
	
3.可依次对 conf 配置中的所有文件进行编码
	例子: map-server.exe /generate-encode -input npc/re/scripts_main.conf -output npc/BetterRa/
	
4.只加密 script_enc 脚本区块
	例子: - 脚本

将以下脚本复制到 npc/BetterRa/BetterRA_test.txt 中, 没有文件则创建一个

prontera,154,119,5	script_enc	加密脚本	56,{
	mes "[加密脚本]";
	mes "脚本加密后, 我的内容是被加密内容.";
	close;
}
prontera,160,119,5	script	未加密脚本	56,{
	mes "[未加密脚本]";
	mes "脚本加密后, 我的内容是被未被加密的.";
	close;
}
执行以下命令
map-server.exe /generate-encode -input npc/BetterRa/BetterRA_test.txt -output npc/BetterRa/BetterRA_test_enc.txt -onlyenc

命令如何执行？
	在服务端目录中创建一个 encodegenerate.bat 文件
	将脚本内容复制进去, 保存关闭
	执行 encodegenerate.bat 文件完成脚本加密

例: 完成脚本加密后使用暂停(pause)以便查看报错
@ECHO OFF
map-server.exe /generate-encode -input npc/BetterRa/BetterRA_test.txt -output npc/BetterRa/BetterRA_test_enc.txt -onlyenc
ECHO.
pause

头部文本相关说明:
EncryptStart: 
BindUID: 		绑定的UID, 带有此项的脚本必须通过脚本授权才可以使用
Author: 		作者的账号邮箱, 方便联系作者, 请不要把自己的map-server.exe给别人
UsedFunc:		加密脚本中使用过的脚本指令
UsedVar: 		加密脚本中使用过的脚本变量
SourceMD5: 		脚本在未加密时的文件md5, 方便对照源脚本审核脚本内容
EncryptEnd//===== rAthena Documentation================================
//= rAthena Script Commands
//===== By:==================================================
//= rAthena Dev Team
//===== Last Updated:========================================
//= 20220308
//===== Description:=========================================
//= A reference manual for the rAthena scripting language.
//= Commands are sorted depending on their functionality.
//===========================================================

This document is a reference manual for all the scripting commands and functions
available in rAthena. It is not a simple tutorial. When people tell you to
"Read The F***ing Manual", they mean this.

This is not a place to teach you basic programming. This document will not teach
you basic programming by itself. It's more of a reference for those who have at
least a vague idea of what they want to do and want to know what tools they have
available to do it. We've tried to keep it as simple as possible, but if you
don't understand it, getting a clear book on programming in general will help
better than yelling around the forum for help.

A little learning never caused anyone's head to explode.

Structure
---------

The script commands are listed in no particular order, but are grouped by
relative function.

*Name of the command and parameters (if any).

Descriptive text

	Small example if possible. Will usually be incomplete, it's there just to
	give you an idea of how it works in practice.

To find a specific command, use Ctrl+F, (or whatever keys call up a search
function in whatever you're reading this with) put an asterisk (*) followed by the command
name, and it should find the command description for you.

If you find anything missing, please let us know!

Syntax
------

Throughout this document, wherever a command wants an argument, it is given in
<angle brackets>. This doesn't mean you should type the angle brackets. If an
argument of a command is optional, it is given in {curly brackets}. You've
doubtlessly seen this convention somewhere. If a command can optionally take
an unspecified number of arguments, you'll see a list like this:

command <argument>{,<argument>...<argument>}

This still means they will want to be separated by commas.

Where a command wants a string, it will be given in "quotes", if it's a number,
it will be given without them. Normally, you can put an expression, like a bunch
of functions or operators returning a value, in (round brackets) instead of most
numbers. Round brackets will not always be required, but they're often a good
idea.

Wherever you refer to a map name, it's always 'map name' (.gat suffix is deprecated).


Script loading structure
------------------------

Scripts are loaded by the map server as referenced in the 'conf/map_athena.conf'
configuration file, but in the default configuration, it doesn't load any script
files itself. Instead, it loads the file 'npc/(pre-)re/scripts_main.conf' which itself
contains references to other files. The actual scripts are loaded from txt
files, which are linked up like this:

npc: <path to a filename>

Any line like this, invoked, ultimately, by 'map_athena.conf' will load up the
script contained in this file, which will make the script available. No file
will get loaded twice to prevent possible errors.

Another configuration file option of relevance is:

delnpc: <path to a filename>

This will unload a specified script filename from memory, which, while
seemingly useless, may sometimes be required.

Whenever '//' is encountered in a line upon reading, everything beyond this on
that line is considered to be a comment and is ignored. This works wherever you
place it.

// This line will be ignored when processing the script.

Block comments can also be used, where you can place /* and */ between any text you
wish rAthena to ignore.

Example:
/* This text,
 * no matter which new line you start
 * is ignored, until the following
 * symbol is encountered: */

The asterisks (*) in front of each line is a personal preference and is not required.

Upon loading all the files, the server will execute all the top-level commands
in them. No variables exist yet at this point, no commands can be called other
than those given in this section. These commands set up the basic structure - create
NPC objects, spawn monster objects, set map flags, etc. No code is actually
executed at this point. The top-level commands are pretty confusing, since
they aren't structured like you would expect (command name first), but rather,
normally start with a map name.

What's more confusing about the top-level commands is that most of them use a
tab symbol to divide their arguments.

To prevent problems and confusion, the tab symbols are written as '%TAB%'
throughout this document, even though this makes the text a bit less readable.
Using an invisible symbol to denote arguments is one of the bad things about
this language.

Here is a list of valid top-level commands:

** Set a map flag:

<map name>%TAB%mapflag%TAB%<flag>

This will, upon loading, set a specified map flag on a map you like. These are
normally in files inside 'npc/mapflag' and are loaded first, so by the time the
server's up, all the maps have the flags they should have. Map flags determine
the behavior of the map in various situations. For more details, see 'setmapflag'
and 'doc/mapflags.txt'.

** Create a permanent monster spawn:

<map name>{,<x>{,<y>{,<xs>{,<ys>}}}}%TAB%monster%TAB%<monster name>{,<monster level>}%TAB%<mob id>,<amount>{,<delay1>{,<delay2>{,<event>{,<mob size>{,<mob ai>}}}}}

Map name is the name of the map the monsters will spawn on. x,y are the
coordinates where the mob should spawn. If xs and ys are non-zero, they
specify the 'radius' of a spawn-rectangle area centered at x,y.
Putting zeros instead of these coordinates will spawn the monsters randomly.
Note this is only the initial spawn zone, as mobs random-walk, they are free
to move away from their specified spawn region.

Monster name is the name the monsters will have on screen, and has no relation
whatsoever to their names anywhere else. It's the mob id that counts, which
identifies monster record in 'mob_db.yml' database of monsters. If the mob name
is given as "--ja--", the 'japanese name' field from the monster database is
used, (which, in rAthena, actually contains an English name) if it's "--en--",
it's the 'english name' from the monster database (which contains an uppercase
name used to summon the monster with a GM command).

You can specify a custom level to use for the mob different from the one of
the database by adjoining the level after the name with a comma. eg:
"Poring,50" for a name will spawn a monster with name Poring and level 50.

Amount is the amount of monsters that will be spawned when this command is
executed, it is affected by spawn rates in 'battle_athena.conf'.

Delay1 and delay2 control monster respawn delays - the first one is the fixed
base respawn time, and the second is random variance on top of the base time.
Both values are given in milliseconds (1000 = 1 second).
Note that the server also enforces a minimum respawn delay of 1 second (See
/conf/battle/monster.conf::mob_respawn_time).

Event is a script event to be executed when the mob is killed. The event must
be in the form "NPCName::OnEventName" to execute, and the event name label
should start with "On". As with all events, if the NPC is an on-touch NPC, the
player who triggers the script must be within 'trigger' range for the event to
work.

There are two optional fields for monster size and AI.
Natural enemies for AI monsters are normal monsters.

<mob size> can be:
	Size_Small	(0)
	Size_Medium	(1)
	Size_Large	(2)

<mob ai> can be:
	AI_NONE		(0)		(default)
	AI_ATTACK	(1)		(attack/friendly)
	AI_SPHERE	(2)		(Alchemist skill)
	AI_FLORA	(3)		(Alchemist skill)
	AI_ZANZOU	(4)		(Kagerou/Oboro skill)
	AI_LEGION	(5)		(Sera skill)
	AI_FAW		(6)		(Mechanic skill)
	AI_WAVEMODE	(7)		Normal monsters will ignore attack from AI_WAVEMODE monsters

Alternately, a monster spawned using 'boss_monster' instead of 'monster' is able
to be detected on the map with the SC_BOSSMAPINFO status (used by Convex Mirror).

** NPC names

/!\ WARNING: this applies to warps, NPCs, duplicates and shops /!\

NPC names are kinda special and are formatted this way:

<Display name>{::<Unique name>}

All NPCs need to have a unique name that is used for identification purposes.
When you have to identify a NPC by its name, you should use <Unique name>.
If <Unique name> is not provided, use <Display name> instead.

The client has a special feature when displaying names:
if the display name contains a '#' character, it hides that part of the name.
ex: if your NPC is named 'Hunter#hunter1', it will be displayed as 'Hunter'

<Display name> must be at most 24 characters in length.
<Unique name> must be at most 24 characters in length.

** Define a warp point

<from mapname>,<fromX>,<fromY>,<facing>%TAB%warp%TAB%<warp name>%TAB%<spanx>,<spany>,<to mapname>,<toX>,<toY>
<from mapname>,<fromX>,<fromY>,<facing>%TAB%warp2%TAB%<warp name>%TAB%<spanx>,<spany>,<to mapname>,<toX>,<toY>
<from mapname>,<fromX>,<fromY>,<facing>%TAB%warp(<state>)%TAB%<warp name>%TAB%<spanx>,<spany>,<to mapname>,<toX>,<toY>
<from mapname>,<fromX>,<fromY>,<facing>%TAB%warp2(<state>)%TAB%<warp name>%TAB%<spanx>,<spany>,<to mapname>,<toX>,<toY>

This will define a warp NPC that will warp a player between maps, and while most
arguments of that are obvious, some deserve special mention.

SpanX and SpanY will make the warp sensitive to a character who didn't step
directly on it, but walked into a zone which is centered on the warp from
coordinates and is SpanX in each direction across the X axis and SpanY in each
direction across the Y axis.

Warp NPC objects also have a name, because you can use it to refer to them later
with 'enablenpc'/'disablenpc'

Facing of a warp object is irrelevant, it is not used in the code and all
current scripts have a zero in there.

Unlike 'warp', 'warp2' will also be triggered by hidden player.

The basic state of the warp can be defined in <state>. Only one state can be defined at a time.
Duplicate warps (including instance warps) inherit the <state> of the original warp.

Valid <state> are:
CLOAKED		Make the warp specified cloaked.
HIDDEN		Make the warp specified hidden.
DISABLED	Make the warp specified disabled.

** Define an NPC object.

<map name>,<x>,<y>,<facing>%TAB%script%TAB%<NPC Name>%TAB%<sprite id>,{<code>}
<map name>,<x>,<y>,<facing>%TAB%script%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>,{<code>}
<map name>,<x>,<y>,<facing>%TAB%script(<state>)%TAB%<NPC Name>%TAB%<sprite id>,{<code>}
<map name>,<x>,<y>,<facing>%TAB%script(<state>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>,{<code>}

This will place an NPC object on a specified map at the specified location, and
is a top-level command you will use the most in your custom scripting. The NPCs
are triggered by clicking on them, and/or by walking in their trigger area, if
defined, see that below.

Facing is a direction the NPC sprite will face in. Not all NPC sprites have
different images depending on the direction you look from, so for some facing
will be meaningless. Facings are counted counterclockwise in increments of 45
degrees, where 0 means facing towards the top of the map. (So to turn the sprite
towards the bottom of the map, you use facing 4, and to make it look southeast
it's facing 5.)

<state> works like the warp <state> defined above, but for NPCs.

Sprite ID is the sprite number or constant used to display this particular NPC.
You may also use a monster's ID instead to display a monster sprite for this NPC.
It is possible to use a job sprite as well, but you must first define it as a
monster sprite in 'mob_avail.yml', a full description on how to do this is not
in the scope of this manual.
A '-1' Sprite ID will make the NPC invisible (and unclickable).
A '111' Sprite ID will make an NPC which does not have a sprite, but is still
clickable, which is useful if you want to make a clickable object of the 3D
terrain.

TriggerX and triggerY, if given, will define an area, centered on NPC and
spanning triggerX cells in every direction across X and triggerY in every
direction across Y. Walking into that area will trigger the NPC. If no
'OnTouch:' special label is present in the NPC code, the execution will start
from the beginning of the script, otherwise, it will start from the 'OnTouch:'
label. Monsters can also trigger the NPC, though the label 'OnTouchNPC:' is
used in this case.

The code part is the script code that will execute whenever the NPC is
triggered. It may contain commands and function calls, descriptions of which
compose most of this document. It has to be in curly brackets, unlike elsewhere
where we use curly brackets, these do NOT signify an optional parameter.

Example of how <state> works:

// Define a cloaked NPC :
lighthalzen,306,267,5	script	Skia#ep162_04	4_EP16_SKIA,{
	//...
	end;

OnInit:
	cloakonnpc();
	end;
}

// Another way to define a cloaked NPC using <state> :
lighthalzen,306,267,5	script(CLOAKED)	Skia#ep162_04	4_EP16_SKIA,{
	//...
	end;
}

** Define a 'floating' NPC object.

-%TAB%script%TAB%<NPC Name>%TAB%-1,{<code>}

This will define an NPC object not triggerable by normal means. This would
normally mean it's pointless since it can't do anything, but there are
exceptions, mostly related to running scripts at specified time, which is what
these floating NPC objects are for. More on that below.

** Define a shop/cashshop/itemshop/pointshop NPC.

-%TAB%shop%TAB%<NPC Name>%TAB%<sprite id>{,discount},<itemid>:<price>{,<itemid>:<price>...}
<map name>,<x>,<y>,<facing>%TAB%shop%TAB%<NPC Name>%TAB%<sprite id>{,discount},<itemid>:<price>{,<itemid>:<price>...}

-%TAB%cashshop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>{,<itemid>:<price>...}
<map name>,<x>,<y>,<facing>%TAB%cashshop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>{,<itemid>:<price>...}

-%TAB%itemshop%TAB%<NPC Name>%TAB%<sprite id>,<costitemid>{:<discount>},<itemid>:<price>{,<itemid>:<price>...}
<map name>,<x>,<y>,<facing>%TAB%itemshop%TAB%<NPC Name>%TAB%<sprite id>,<costitemid>{:<discount>},<itemid>:<price>{,<itemid>:<price>...}

-%TAB%pointshop%TAB%<NPC Name>%TAB%<sprite id>,<costvariable>{:<discount>},<itemid>:<price>{,<itemid>:<price>...}
<map name>,<x>,<y>,<facing>%TAB%pointshop%TAB%<NPC Name>%TAB%<sprite id>,<costvariable>{:<discount>},<itemid>:<price>{,<itemid>:<price>...}

<map name>,<x>,<y>,<facing>%TAB%marketshop%TAB%<NPC Name>%TAB%<sprite id>,<itemid>:<price>:<stock>{,<itemid>:<price>:<stock>...}

Note: Additionally barter shops can be defined in npc/barters.yml

This will define a shop NPC, which, when triggered (which can only be done by
clicking) will cause a shop window to come up. No code whatsoever runs in shop
NPCs and you can't change the prices otherwise than by editing the script
itself.

The Item ID is the number of item in the 'db/item_db.yml' database. If Price is set
to -1, the 'buy price' given in the item database will be used. Otherwise, the
price you gave will be used for this item, which is how you create differing
prices for items in different shops.

Optionally you can specify the discount option and set it to "yes" or "no", to enable or disable discounting.

There are other types of shops available:
cashshop - use "cashshop" in place of "shop" to use the Cash Shop interface, allowing
you to buy items with special points that are stored as account variables
called  #CASHPOINTS and #KAFRAPOINTS. This type of shop will not allow you to sell
items at it, only make purchases. The layout used to define sale items still count, and
"<price>" refers to how many points will be spent purchasing the them.

"itemshop" and "pointshop" use the Shop interface, allowing you to buy items with a specific
item or special points from a variable. 'pointshop' only supports permanent character variables,
temporary character variables, permanent local account variables or permanent global account
variables. These variables must be of integer type, not string. 'discount' flag is an
optional value which makes the price at that shop become affected by discount skill.

"marketshop" can have limited quantity of an item in stock.
Use -1 in the stock field to have unlimited stock in a marketshop.

** Define an warp/shop/cashshop/itemshop/pointshop/NPC duplicate.

warp/warp2: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<spanx>,<spany>
shop/cashshop/itemshop/pointshop/npc: -%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>
shop/cashshop/itemshop/pointshop/npc: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>
npc: -%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>
npc: <map name>,<x>,<y>,<facing>%TAB%duplicate(<label>)%TAB%<NPC Name>%TAB%<sprite id>,<triggerX>,<triggerY>

This will duplicate an warp/shop/cashshop/itemshop/pointshop/NPC referred to by 'label'.
Warp duplicates inherit the target location.
Shop/cashshop/itemshop/pointshop duplicates inherit the item list.
NPC duplicates inherit the script code.
The rest (name, location, facing, sprite ID, span/trigger area)
is obtained from the definition of the duplicate (not inherited).

** Define a function object

function%TAB%script%TAB%<function name>%TAB%{<code>}

This will define a function object, callable with the 'callfunc' command (see
below). This object will load on every map server separately, so you can get at
it from anywhere. It's not possible to call the code in this object by
anything other than the 'callfunc' script command.

The code part is the script code that will execute whenever the function is
called with 'callfunc'. It has to be in curly brackets, unlike elsewhere where
we use curly brackets, these do NOT signify an optional parameter.

Once an object is defined which has a 'code' field to its definition, it
contains script commands which can actually be triggered and executed.

~ RID? GID? ~

What a RID is and why do you need to know
-----------------------------------------

Most scripting commands and functions will want to request data about a
character, store variables referenced to that character, send stuff to the
client connected to that specific character. Whenever a script is invoked by a
character, it is passed a so-called RID - this is the account ID number of a
character that caused the code to execute by clicking on it, walking into its
OnTouch zone, or otherwise.

If you are only writing common NPCs, you don't need to bother with it. However,
if you use functions, if you use timers, if you use clock-based script
activation, you need to be aware of all cases when a script execution can be
triggered without a RID attached. This will make a lot of commands and functions
unusable, since they want data from a specific character, want to send stuff to
a specific client, want to store variables specific to that character, and they
would not know what character to work on if there's no RID.

Unless you use 'attachrid' to explicitly attach a character to the script first.

Whenever we say 'invoking character', we mean 'the character who's RID is
attached to the running script. The script function "playerattached" can be
used to check which is the currently attached player to the script (it will
return 0 if the there is no player attached or the attached player no longer
is logged on to the map-server).

But what about GID?
-------------------

GID stands for the Game ID of something, this can either be the GID obtained
through mobspawn (mob control commands) or the account ID of a character.
Another way would be to right click on a mob, NPC or char as GM sprited char
to view the GID.

See also 'getpetinfo', 'getmercinfo', 'gethominfo', and 'geteleminfo'.

This is mostly used for the new version of skill and the mob control commands
implemented.

Item and pet scripts
--------------------

Each item in the item database has three special fields - Script , EquipScript
and UnEquipScript. The first is script code run every time a character equips the item,
with the RID of the equipping character. Every time they unequip an item, all
temporary bonuses given by the script commands are cleared, and all the scripts
are executed once again to rebuild them. This also happens in several other
situations (like upon login) but the full list is currently unknown.

EquipScript is a piece of script code run whenever the item is used by a character
by double-clicking on it. UnEquipScript runs whenever the
equipment is unequip by a character

Not all script commands work properly in the item scripts. Where commands and
functions are known to be meant specifically for use in item scripts, they are
described as such.

Every pet in the pet database has a PetScript field, which determines pet
behavior. It is invoked wherever a pet of the specified type is spawned.
(hatched from an egg, or loaded from the char server when a character who had
that pet following them connects) This may occur in some other situations as
well. Don't expect anything other than commands definitely marked as usable in
pet scripts to work in there reliably.

Numbers
-------

Beside the common decimal numbers, which are nothing special whatsoever (though
do not expect to use fractions, since ALL numbers are integer in this language),
the script engine also handles hexadecimal numbers, which are otherwise
identical. Writing a number like '0x<hex digits>' will make it recognized as a
hexadecimal value. Notice that 0x10 is equal to 16. Also notice that if you try
to 'mes 0x10' it will print '16'.

Number values can't exceed the limits of an integer variable: Any number
greater than INT64_MAX (9223372036854775807) or smaller than INT64_MIN
(-9223372036854775808) will be capped to those values and will cause a warning
to be reported.

Variables
---------

The meat of every programming language is variables - places where you store
data.

In the rAthena scripting language, variable names are not case sensitive.

Variables are divided into and uniquely identified by the combination of:
prefix  - determines the scope and extent (or lifetime) of the variable
name    - an identifier consisting of '_' and alphanumeric characters
postfix - determines the type of the variable: integer or string

Scope can be:
global    - global to all servers
local     - local to the server
account   - attached to the account of the character identified by RID
character - attached to the character identified by RID
npc       - attached to the NPC
scope     - attached to the scope of the instance

Extent can be:
permanent - They still exist when the server resets.
temporary - They cease to exist when the server resets.

Prefix: scope and extent
nothing  - A permanent variable attached to the character, the default variable
           type. They are stored by char-server in the `char_reg_num` and
           `char_reg_str`.
"@"      - A temporary variable attached to the character.
           SVN versions before 2094 revision and RC5 version will also treat
           'l' as a temporary variable prefix, so beware of having variable
           names starting with 'l' if you want full backward compatibility.
"$"      - A global permanent variable.
           They are stored by map-server in database table `mapreg`.
"$@"     - A global temporary variable.
           This is important for scripts which are called with no RID
           attached, that is, not triggered by a specific character object.
"."      - A NPC variable.
           They exist in the NPC and disappear when the server restarts or the
           NPC is reloaded. Can be accessed from inside the NPC or by calling
           'getvariableofnpc'. Function objects can also have .variables which
           are accessible from inside the function, however 'getvariableofnpc'
           does NOT work on function objects.
".@"     - A scope variable.
           They are unique to the instance and scope. Each instance has its
           own scope that ends when the script ends. Calling a function with
           callsub/callfunc starts a new scope, returning from the function
           ends it. When a scope ends, its variables are converted to values
           ('return .@var;' returns a value, not a reference).
"'"      - An instance variable.
           These are used with the instancing system and are unique to each
           instance type. Can be accessed from inside the instance or by calling
           'getinstancevar'.
"#"      - A permanent local account variable.
           They are stored by char-server in the `acc_reg_num` table and
           `acc_reg_str`.
"##"     - A permanent global account variable stored by the login server.
           They are stored in the `global_acc_reg_num` table and
		   `global_acc_reg_str`.
           The only difference you will note from normal # variables is when
           you have multiple char-servers connected to the same login server.
           The # variables are unique to each char-server, while the ## variables
           are shared by all these char-servers.

Postfix: integer or string
nothing - integer variable, can store positive and negative numbers, but only
          whole numbers (so don't expect to do any fractional math)
'$'     - string variable, can store text

Examples:
  name  - permanent character integer variable
  name$ - permanent character string variable
 @name  - temporary character integer variable
 @name$ - temporary character string variable
 $name  - permanent global integer variable
 $name$ - permanent global string variable
$@name  - temporary global integer variable
$@name$ - temporary global string variable
 .name  - NPC integer variable
 .name$ - NPC string variable
.@name  - scope integer variable
.@name$ - scope string variable
 'name  - instance integer variable
 'name$ - instance string variable
 #name  - permanent local account integer variable
 #name$ - permanent local account string variable
##name  - permanent global account integer variable
##name$ - permanent global account string variable

If a variable was never set, it is considered to equal zero for integer
variables or an empty string ("", nothing between the quotes) for string
variables. Once you set it to that, the variable is as good as forgotten
forever, and no trace remains of it even if it was stored with character or
account data.

Some variables are special, that is, they are already defined for you by the
scripting engine. You can see the full list in 'src/map/script_constants.hpp', which
is a file you should read, since it also allows you to replace lots of numbered
arguments for many commands with easier to read text. The special variables most
commonly used are all permanent character-based variables:

Zeny        - Amount of Zeny.
Hp          - Current amount of hit points.
MaxHp       - Maximum amount of hit points.
Sp          - Current spell points.
MaxSp       - Maximum amount of spell points.
StatusPoint - Amount of status points remaining.
SkillPoint  - Amount of skill points remaining.
BaseLevel   - Character's base level.
JobLevel    - Character's job level.
BaseExp     - Amount of base experience points.
JobExp      - Amount of job experience points.
NextBaseExp - Amount of base experience points needed to reach the next level.
NextJobExp  - Amount of job experience points needed to reach the next level.
Weight      - Amount of weight the character currently carries.
MaxWeight   - Maximum weight the character can carry.
Sex         - 0 if female, 1 if male.
Class       - Character's job.
Upper       - 0 if the character is a normal class, 1 if advanced, 2 if baby.
BaseClass   - The character's 1-1 'normal' job, regardless of Upper value.
              For example, this will return Job_Acolyte for Acolyte, Priest/Monk,
              High Priest/Champion, and Arch Bishop/Sura. If the character has not
              reached a 1-1 class, it will return Job_Novice.
BaseJob     - The character's 'normal' job, regardless of Upper value.
              For example, this will return Job_Acolyte for Acolyte,
              Baby Acolyte, and High Acolyte.
Karma       - The character's karma. Karma system is not fully functional, but
              this doesn't mean this doesn't work at all. Not tested.
Manner      - The character's manner rating. Becomes negative if the player
              utters words forbidden through the use of 'manner.txt' client-side
              file.
Ap          - Current amount of activity points.
MaxAp       - Maximum amount of activity points.

While these behave as variables, do not always expect to just set them - it is
not certain whether this will work for all of them. Whenever there is a command
or a function to set something, it's usually preferable to use that instead. The
notable exception is Zeny, which you can and often will address directly -
setting it will make the character own this number of Zeny.
If you try to set Zeny to a negative number, the script will be terminated with an error.

Some source-end constants can also be accessed in scripts. This list is located in
'src/map/script_constants.hpp', which contains constants such as server defines and status options:

	PACKETVER, MAX_LEVEL, MAX_STORAGE, MAX_INVENTORY, MAX_CART, MAX_ZENY, MAX_PARTY,
	MAX_GUILD, MAX_GUILDLEVEL, MAX_GUILD_STORAGE, MAX_BG_MEMBERS, MAX_CHAT_USERS,
	VIP_SCRIPT, MIN_STORAGE

	Option_Nothing, Option_Sight, Option_Hide, Option_Cloak, Option_Falcon, Option_Riding,
	Option_Invisible, Option_Orcish, Option_Wedding, Option_Chasewalk, Option_Flying,
	Option_Xmas, Option_Transform, Option_Summer, Option_Dragon1, Option_Wug,
	Option_Wugrider, Option_Madogear, Option_Dragon2, Option_Dragon3, Option_Dragon4,
	Option_Dragon5, Option_Hanbok, Option_Oktoberfest, Option_Dragon, Option_Costume

Assigning variables
--------- ---------

Variables can be accessed and modified much like in other programming languages.

	.@x = 100;
	.@x = .@y = 100;

Support for modifying variable values using 'set' is still supported (and required
to exist for this new method to work) so previous scripts will continue to work.

When assigning values, all operator methods are supported which exist in the below
'Operators' section. For instance:

	.@x += 100;
	.@x -= 100;
	.@x *= 2;
	.@x /= 2;
	.@x %= 5;
	.@x >>= 2;
	.@x <<= 2;

Will all work. For more information on available operators, see the Operators section
described below. All operators listed there may be placed in-front of the '=' sign
when modifying variables to perform the action as required.

Note:

 !! Currently the scripting engine does not support directly copying array variables.
 !! In order to copy arrays between variables the use of 'copyarray' function is still
 !! required.

Strings
-------

To include symbol '"' in a string you should use prefix '\"'


Arrays
------

Arrays (in rAthena at least) are essentially a set of variables going under the
same name. You can tell between the specific variables of an array with an
'array index', a number of a variable in that array:

<variable name>[<array index>]

All variable types can be used as arrays.

Variables stored in this way, inside an array, are also called 'array elements'.
Arrays are specifically useful for storing a set of similar data (like several
item IDs for example) and then looping through it. You can address any array
variable as if it was a normal variable:

	set .@arrayofnumbers[0],1;

You can also do things like using a variable (or an expression, or even a
value from another array) to get at an array value:

	set .@x,100;
	set .@arrayofnumbers[.@x],10;

This will make .@arrayofnumbers[100] equal to 10.

Index numbering always starts with 0 and arrays can hold over 2 billion
variables. As such, the (guaranteed) allowed values for indices are in the
range 0 ~ 2147483647.

And array indexes probably can't be negative. Nobody tested what happens when
you try to get a negatively numbered variable from an array, but it's not going
to be pretty.

Arrays can naturally store strings:

.@menulines$[0] is the 0th element of the .@menulines$ array of strings. Notice
the '$', normally denoting a string variable, before the square brackets that
denotes an array index.

Variable References
-------------------

//##TODO



Operators
---------

Operators are things you can do to variables and numbers. They are either the
common mathematical operations or conditional operators

+ - will add two numbers. If you try to add two strings, the result will be a
    string glued together at the +. You can add a number to a string, and the
    result will be a string. No other math operators work with strings.
- - will subtract two numbers.
* - will multiply two numbers.
/ - will divide two numbers. Note that this is an integer division, i.e.
    7/2 is not equal 3.5, it's equal 3.
% - will give you the remainder of the division. 7%2 is equal to 1.

There are also conditional operators. This has to do with the conditional
command 'if' and they are meant to return either 1 if the condition is satisfied
and 0 if it isn't. (That's what they call 'boolean' variables. 0 means 'False'.
Anything except the zero is 'True' Odd as it is, -1 and -5 and anything below
zero will also be True.)

You can compare numbers to each other and you compare strings to each other, but
you can not compare numbers to strings.

 == - Is true if both sides are equal. For strings, it means they are the same.
 >=  - True if the first value is equal to, or greater than, the second value.
 <=  - True if the first value is equal to, or less than, the second value
 >   - True if the first value greater than the second value
 <   - True if the first value is less than the second value
 !=  - True if the first value IS NOT equal to the second one

Examples:

 1 == 1 is True.
 1<2 is True while 1>2 is False.
 .@x>2 is True if .@x is equal to 3. But it isn't true if .@x is 2.

Only ' == ' and '!=' have been tested for comparing strings. Since there's no way
to code a seriously complex data structure in this language, trying to sort
strings by alphabet would be pointless anyway.

Comparisons can be stacked in the same condition:

 && - Is True if and only if BOTH sides are true.
      ('1 == 1 && 2 == 2' is true. '2 == 1 && 1 == 1' is false.)
 || - Is True if either side of this expression is True.

 1 == 1 && 2 == 2 is True.
 1 == 1 && 2 == 1 is False.
 1 == 1 || 2 == 1 is True.

Logical bitwise operators work only on numbers, and they are the following:

 << - Left shift.
 >> - Right shift.
	Left shift moves the binary 1(s) of a number n positions to the left,
	which is the same as multiplying by 2, n times.
	In the other hand, Right shift moves the binary 1(s) of a number n positions
	to the right, which is the same as dividing by 2, n times.
		Example:
		set b,2;
		set a, b << 3;
		mes a;
		set a, a >> 2;
		mes a;
	The first mes command would display 16, which is the same as 2 x (2 x 2 x 2) = 16.
	The second mes command would display 4, which is the same as 16 / 2 = 8. 8 / 2 = 4.
 &  - And.
 |  - Or.
	The bitwise operator AND (&) is used to test two values against each other,
	and results in setting bits which are active in both arguments. This can
	be used for a few things, but in rAthena this operator is usually used to
	create bit-masks in scripts.

	The bitwise operator OR (|)sets to 1 a binary position if the binary position
	of one of the numbers is 1. This way a variable can hold several values we can check,
	known as bit-mask. A variable currently can hold up to 32 bit-masks (from position 0
	to position 1). This is a cheap(skate) and easy way to avoid using arrays to store several checks
	that a player can have.

	A bit-mask basically is (ab)using the variables bits to set various options in
	one variable. With the current limit if variables it is possible to store 32
	different options in one variable (by using the bits on position 0 to 31).

	Example(s):
	- Basic example of the & operator, bit example:
		10 & 2 = 2
	Why? :
		10 = 2^1 + 2^3 (2 + 8), so in bits, it would be 1010
		2 = 2^1 (2), so in bits (same size) it would be 0010
		The & (AND) operator sets bits which are active (1) in both arguments, so in the
		example 1010 & 0010, only the 2^1 bit is active (1) in both. Resulting in the bit
		0010, which is 2. 
	- Basic example of creating and using a bit-mask:
		set .@options,2|4|16; //(note: this is the same as 2+4+16, or 22)
		if (.@options & 1)	mes "Option 1 is activated";
		if (.@options & 2)	mes "Option 2 is activated";
		if (.@options & 4)	mes "Option 3 is activated";
		if (.@options & 8)	mes "Option 4 is activated";
		if (.@options & 16)	mes "Options 5 is activated";
	This would return the messages about option 2, 3 and 5 being shown (since we've set
	the 2,4 and 16 bit to 1).
 ^  - Xor.
	The bitwise operator XOR (eXclusive OR) sets a binary position to 0 if both
	numbers have the same value in the said position. On the other hand, it
	sets to 1 if they have different values in the said binary position.
	This is another way of setting and unsetting bits in bit-masks.

	Example:
	- First let's set the quests that are currently in progress:
		set inProgress,1|8|16; // quest 1,8 and 16 are in progress
	- After playing for a bit, the player starts another quest:
		if (inProgress&2 == 0) {
			// this will set the bit for quest 2 (inProgress has that bit set to 0)
			set inProgress,inProgress^2;
			mes "Quest 2: find a newbie and be helpful to him for an hour.";
			close;
		}
	- After spending some time reading info on Xor's, the player finally completes quest 1:
		if (inProgress&1 && isComplete) {
			// this will unset the bit for quest 1 (inProgress has that bit set to 1)
			set inProgress,inProgress^1;
			mes "Quest 1 complete!! You unlocked the secrets of the Xor dynasty, use them wisely.";
			close;
		}

Unary operators with only with a single number, which follows the operator, and
are following:

 -  - Negation.
	The sign of the number will be reversed. If the number was positive, it will
	become negative and vice versa.

	Example:
		set .@myvar,10;
		mes "Negative 10 is " + (-.@myvar);

 !  - Logical Not.
	Reverses the boolean result of an expression. True will become false and
	false will become true.

	Example:
		if (!callfunc("F_dosomething"))
		{
			mes "Doing something failed.";
			close;
		}

 ~  - Bitwise Not.
	Reverses each bit in a number, also known as one's complement. Cleared bits
	are set, and set bits are cleared.

	Example:
	- Ensure, that quest 2 is disabled, while keeping all other active, if they are.
		set inProgress,inProgress&(~2);  // same as set inProgress,inProgress&0xfffffffd

Ternary operators take three expressions (numbers, strings or boolean), and are
following:

 ?: - Conditional operator
	Very useful e.g. to replace

		if (Sex) mes "..."; else mes "...";

	clauses with simple

		mes "Welcome, " + (Sex?"Mr.":"Mrs.") + " " + strcharinfo(0);

	or to replace any other simple if-else clauses. It might be worth
	mentioning that ?: has low priority and has to be enclosed with
	parenthesis in most (if not all) cases.

Labels
------

Within executable script code, some lines can be labels:

<label name>:

Labels are points of reference in your script, which can be used to route
execution with 'goto', 'menu' and 'jump_zero' commands, invoked with 'doevent'
and 'donpcevent' commands and are otherwise essential. A label's name may not be
longer than 22 characters. (23rd is the ':'.) There is some confusion in the
source about whether it's 22, 23 or 24 all over the place, so keeping labels
under 22 characters could be wise. It may only contain alphanumeric characters
and underscore. In addition to labels you name yourself, there are also some
special labels which the script engine will start execution from if a special
event happens:

OnClock<hour><minute>:
OnMinute<minute>:
OnHour<hour>:
On<weekday><hour><minute>:
OnDay<month><day>:

This will execute when the server clock hits the specified date or time. Hours
and minutes are given in military time. ('0105' will mean 01:05 AM). Weekdays
are Sun,Mon,Tue,Wed,Thu,Fri,Sat. Months are 01 to 12, days are 01 to 31.
Remember the zero.

OnInit:
OnInterIfInit:
OnInterIfInitOnce:

OnInit will execute every time the scripts loading is complete, including when
they are reloaded with @reloadscript command. OnInterIfInit will execute when
the map server connects to a char server, OnInterIfInitOnce will only execute
once and will not execute if the map server reconnects to the char server later.

OnAgitStart:
OnAgitEnd:
OnAgitInit:
OnAgitStart2:
OnAgitEnd2:
OnAgitInit2:
OnAgitStart3:
OnAgitEnd3:
OnAgitInit3:

OnAgitStart will run whenever the server shifts into WoE mode, whether it is
done with @agitstart GM command or with 'AgitStart' script command. OnAgitEnd
will do likewise for the end of WoE.

OnAgitInit will run when data for all castles and all guilds that hold a castle
is received by map-server from the char-server after initial connect.

No RID will be attached while any of the above mentioned labels are triggered, so
no character or account-based variables will be accessible, until you attach a
RID with 'attachrid' (see below).

The above also applies to, the last three labels, the only difference is that
these labels are used exclusively for WoE SE, and are called independently.

OnInstanceInit:

This label will be executed when an instance is created and initialized through
the 'instance_create' command. It will run again if @reloadscript is used while
an instance is in progress.

OnInstanceDestroy:

This label will be executed when an instance is destroyed by a timeout, exceeding
the keepalive time or through the 'instance_destroy' command. It will be called
exactly before the instance will be destroyed and all other NPCs of the instance
will still be available at this point of time.

OnTouch:

This label will be executed if a trigger area is defined for the NPC object it's
in. If it isn't present, the execution will start from the beginning of the NPC
code. The RID of the triggering character object will be attached.

OnTouch_:

Similar to OnTouch, but will only run one instance. Another character is
chosen once the triggering character leaves the area.

OnTouchNPC:

Similar to OnTouch, but will only trigger for monsters. For this case, by using
'getattachedrid' will returns GID (ID that returned when use 'monster').

OnPCLoginEvent:
OnPCLogoutEvent:
OnPCBaseLvUpEvent:
OnPCJobLvUpEvent:

It's pretty obvious when these four special labels will be invoked.

OnPCDieEvent:

This special label triggers when a player dies. The variable 'killerrid' is
set to the ID of the killer.

OnPCKillEvent:

This special label triggers when a player kills another player. The variable
'killedrid' is set to the ID of the player killed.

OnNPCKillEvent:

This special label triggers when a player kills a monster without label.
The variable 'killedrid' is set to the Class (mob ID) of the monster killed.
The variable 'killedgid' is set to the ID (unique mob game ID) of the monster killed.

OnPCLoadMapEvent:

This special label triggers when a player steps in a map marked with the
'loadevent' mapflag and attaches its RID. The fact that this label requires a
mapflag for it to work is because, otherwise, it'd be server-wide and trigger
every time a player would change maps. Imagine the server load with 1,000 players
(oh the pain...)

OnWhisperGlobal:

This special label triggers when a player whispers the NPC, and will run with the
player's RID attached. It can accept up to ten parameters, which will be stored
into separate temporary character string variables @whispervar0$ to @whispervar9$.
See 'doc/whisper_sys.txt' for further documentation.

Only the special labels which are not associated with any script command are
listed here. There are other kinds of labels which may be triggered in a similar
manner, but they are described with their associated commands.

OnNaviGenerate:

This special label triggers when running the map-server-generator binary. It is used
in combination with 'naviregisterwarp' to register extra warps for an npc.

On<label name>:

These special labels are used with Mob scripts mostly, and script commands
that requires you to point/link a command to a mob or another NPC, giving a label
name to start from. The label name can be any of your liking, but must be
started with "On".

Example:

monster "prontera",123,42,"Poringz0rd",2341,23,"Master::OnThisMobDeath";

amatsu,13,152,4	script	Master	767,{
	mes "Hi there";
	close;

OnThisMobDeath:
	announce "Hey, " + strcharinfo(0) + " just killed a Poringz0rd!",bc_blue|bc_all;
	end;
}

Each time you kill one, that announce will appear in blue to everyone.

"Global" labels

There's a catch with labels and doevent. If you call a label (using doevent)
and called label is in NPC that has trigger area, that label must end with
"Global" to work globally (i.e. if RID is outside of the trigger area, which
usually happens since otherwise there would be no point calling the label with
doevent, because OnTouch would do the job). For further reference look for
npc_event in npc.cpp.

Scripting commands and functions
--------------------------------

The commands and functions are listed here in no particular order. There's a
difference between commands and functions - commands leave no 'return value'
which might be used in a conditional statement, as a command argument, or stored
in a variable. Calling commands as if they were functions will sometimes work,
but is not advised, as this can lead to some hard to track errors. Calling
functions as if they were commands will mess up the stack, so 'return' command
will not return correctly after this happens in a particular script.

All commands must end with a ';'.

-------------------------


From here on, we will have the commands sorted as follow:

1.- Basic commands.
2.- Information-retrieving commands.
3.- Checking commands.
4.- Player-related commands.
5.- Mob / NPC -related commands.
6.- Other commands.
7.- Instance commands.
8.- Quest Log commands.
9.- Battleground commands.
10.- Pet commands.
10.1.- The Pet AI commands.
11.- Homunculus commands.
12.- Mercenary commands.
13.- Party commands.
14.- Channel commands.
15.- Achievement commands.

=====================
|1.- Basic commands.|
=====================
---------------------------------------

*mes "<string>"{,"<string>"{,...}};

This command will display a box on the screen for the invoking character, if no
such box is displayed already, and will print the string specified into that
box. There is normally no 'close' or 'next' button on this box, unless you
create one with 'close' or 'next', and while it's open the player can't do much
else, so it's important to create a button later. If the string is empty, it
will show up as an empty line.

	mes "Text that will appear in the box";

Colors
------
Inside the string you may put color codes, which will alter the color of the
text printed after them. The color codes are all '^<R><G><B>' and contain three
hexadecimal numbers representing colors as if they were HTML colors - ^FF0000 is
bright red, ^00FF00 is bright green, ^0000FF is bright blue, ^000000 is black.
^FF00FF is a pure magenta, but it's also a color that is considered transparent
whenever the client is drawing windows on screen, so printing text in that color
will have kind of a weird effect. Once you've set a text's color to something,
you have to set it back to black unless you want all the rest of the text be in
that color:

	mes "This is ^FF0000 red ^000000 and this is ^00FF00 green, ^000000 so.";

Notice that the text coloring is handled purely by the client. If you use non-
English characters, the color codes might get screwed if they stick to letters
with no intervening space. Separating them with spaces from the letters on
either side solves the problem.

Multiple Lines
--------------
To display multiple lines of message while only using a single 'mes' command,
use the script command in the following format:

	mes "Line 1", "Line 2", "Line 3";

This will display 3 different lines while only consuming a single line in
the relevant script file.

Navigation
----------
For clients dated 2011-10-10aRagexe onwards, you can generate navigation links
using HTML-like labels:

	<NAVI>Display Name<INFO>mapname,x,y,0,000,flag</INFO></NAVI>

The "flag" parameter can be:
 0: Do not open Navigation Window (default).
 1: Open Navigation Window.

The example below will make the [Tool Shop] text clickable and begin navigation
to alberta (98,154) when clicked.

	mes "Have you checked out the <NAVI>[Tool Shop]<INFO>alberta,98,154,0,000,0</INFO></NAVI>?";

See also 'navigateto', which can be used for certain NPC events.

Items
-----
You can refer to items by using HTML-like links to certain items:

	<ITEMLINK>Display Name<INFO>Item ID</INFO></ITEMLINK>

Where <Display Name> is the name that will be displayed for your link and
<Item ID> being the ID of the item you want to link to when clicked.

In 2015 the tag name was changed to <ITEM> resulting in the following syntax:

	<ITEM>Display Name<INFO>Item ID</INFO></ITEM>

We therefore created script command "mesitemlink" that allows you to create the correct syntax
depending on your configured packet version. We recommend that you use this script command
instead of hardcoding the HTML-like tags. For more details see the documentation for "mesitemlink".

The following sample will open a preview window for Red Potion:

	mes "Did you ever consume a <ITEMLINK>Red Potion<INFO>501</INFO></ITEMLINK>?";
	// Or in 2015:
	mes "Did you ever consume a <ITEM>Red Potion<INFO>501</INFO></ITEM>?";

NOTE: Be aware that item links are broken in some 2015 clients.

URLs
----
Similarly, you can create links to websites that launch in a new window:

	<URL>Display Name<INFO>http://www.example.com/</INFO></URL>";

Quests
------
You can link to a quest:

	<QUEST>Quest<INFO>1</INFO></QUEST>

Message
-------
You can show a message from the msgstringtable:

	<MSG>1</MSG>

Tips
----
You can show a tip box:

	<TIPBOX>Show Tip<INFO>1</INFO></TIPBOX>

---------------------------------------

*next;

This command will display a 'next' button in the message window for the
invoking character. Clicking on it will cause the window to clear and display
a new one. Used to segment NPC-talking, next is often used in combination with
'mes' and 'close'.

If no window is currently on screen, one will be created, but once the invoking
character clicks on it, a warning is thrown on the server console and the script
will terminate.

	mes "[Woman]";
	mes "This would appear on the page";
	next;
	// This is needed since it is a new page and the top will now be blank
	mes "[Woman]";
	mes "This would appear on the 2nd page";

---------------------------------------

*clear;

This command will clear the dialog text and continue the script without player interaction.

Example:
	mes "This is how the 'clear' script command works.";
	sleep2 3000;
	clear; // This will clear the dialog and continue to the next one.
	mes "I will show you again.";
	sleep2 3000;
	clear;
	mes "Bye!";
	close;

---------------------------------------

*close;

This command will create a 'close' button in the message window for the invoking
character. If no window is currently on screen, the script execution will end. This is one
of the ways to end a speech from an NPC. Once the button is clicked, the NPC
script execution will end, and the message box will disappear.

	mes "[Woman]";
	mes "I am finished talking to you. Click the close button.";
	close;
	mes "This command will not run at all, since the script has ended.";

---------------------------------------

*close2;

This command will create a 'close' button in the message window for the invoking
character. WARNING: If no window is currently on screen, the script execution will halt
indefinitely! See 'close'. There is one important difference, though - even though
the message box will have closed, the script execution will not stop, and commands after
'close2' will still run, meaning an 'end' has to be used to stop the script, unless you
make it stop in some other manner.

	mes "[Woman]";
	mes "I will warp you now.";
	close2;
	warp "place",50,50;
	end;

Don't expect things to run smoothly if you don't make your scripts 'end'.

---------------------------------------

*close3;

The command is similar to 'close' but the cutin (if any) is cleared after closing.

---------------------------------------

*end;

This command will stop the execution for this particular script. The two
versions are perfectly equivalent. It is the normal way to end a script which
does not use 'mes'.

	if (BaseLevel <= 10)
		npctalk "Look at that you are still a n00b";
	else if (BaseLevel <= 20)
		npctalk "Look at that you are getting better, but still a n00b";
	else if (BaseLevel <= 30)
		npctalk "Look at that you are getting there, you are almost 2nd profession now right???";
	else if (BaseLevel <= 40)
		npctalk "Look at that you are almost 2nd profession";
	end;

Without the use of 'end' it would travel through the labels until the end of the
script. If you were lvl 10 or less, you would see all the speech lines, the use
of 'end' stops this, and ends the script.

---------------------------------------

*set <variable>,<expression>{,<char_id>};
*set(<variable>,<expression>{,<char id>})

This command will set a variable to the value that the expression results in.
Variables may either be set through this command or directly, much like any
other programming language (refer to the "Assigning variables" section).

This is the most basic script command and is used a lot whenever you try to do
anything more advanced than just printing text into a message box.

	set .@x,100;

will make .@x equal 100.

	set .@x,1+5/8+9;

will compute 1+5/8+9 (which is, surprisingly, 10 - remember, all numbers are
integer in this language) and make .@x equal it.

Returns the variable reference (since trunk r12870).

---------------------------------------

*setd "<variable name>",<value>{,<char_id>};

Works almost identically as set, except the variable name is identified as a string
and can thus be constructed dynamically.

This command is equivalent to:
	set getd("variable name"),<value>;

Examples:

	setd ".@var$", "Poporing";
	mes .@var$; // Displays "Poporing".

	setd ".@" + .@var$ + "123$", "Poporing is cool";
	mes .@Poporing123$; // Displays "Poporing is cool".

NOTE:
	'char_id' only works for non-server variables.
	Player with Character ID 'char_id' must be online.

---------------------------------------

*getd("<variable name>")

Returns a reference to a variable, the name can be constructed dynamically.
Refer to 'setd' for usage.

This can also be used to set an array dynamically:
	setarray getd(".array[0]"), 1, 2, 3, 4, 5;

Examples:

	set getd("$varRefence"), 1;
	set .@i, getd("$" + "pikachu");

---------------------------------------

*getvariableofnpc(<variable>,"<npc name>")

Returns a reference to a NPC variable (. prefix) from the target NPC.
This can only be used to get . variables.

Examples:

//This will return the value of .var, note that this can't be used, since the value isn't caught.
	getvariableofnpc(.var,"TargetNPC");

//This will set the .v variable to the value of the TargetNPC's .var variable.
	set .v, getvariableofnpc(.var,"TargetNPC");

//This will set the .var variable of TargetNPC to 1.
	set getvariableofnpc(.var,"TargetNPC"), 1;

Note: even though function objects can have .variables,
getvariableofnpc will not work on them.

---------------------------------------

*getvar <variable>,<char_id>;

Get variable value from the specified player. Only player/account variables
are allowed to be used (temporary character variable "@", permanent
character "", permanent local account "#", and permanent global account "##").

---------------------------------------

*goto <label>;

This command will make the script jump to a label, usually used in conjunction
with other command, such as "if", but often used on its own.

	...
	goto Label;

	mes "This will not be seen";
	end;
Label:
	mes "This will be seen";
	end;

This command should be avoided and only used if there is no other option.

---------------------------------------

*menu "<option_text>",<target_label>{,"<option_text>",<target_label>,...};

This command will create a selectable menu for the invoking character. Only one
menu can be on screen at the same time.

Depending on what the player picks from the menu, the script execution will
continue from the corresponding label. (it's string-label pairs, not label-
string)

Options can be grouped together, separated by the character ':'.

	menu "A:B",L_Wrong,"C",L_Right;

It also sets a special temporary character variable @menu, which contains the
number of option the player picked. (Numbering of options starts at 1.)
This number is consistent with empty options and grouped options.

	menu "A::B",L_Wrong,"",L_Impossible,"C",L_Right;

	L_Wrong:
		// If they click "A" or "B" they will end up here
		// @menu == 1 if "A"
		// @menu == 2 will never happen because the option is empty
		// @menu == 3 if "B"
	L_Impossible:
		// Empty options are not displayed and therefore can't be selected
		// this label will never be reached from the menu command
	L_Right:
		// If they click "C" they will end up here
		// @menu == 5

If a label is '-', the script execution will continue right after the menu
command if that option is selected, this can be used to save you time, and
optimize big scripts.

	menu "A::B:",-,"C",L_Right;
		// If they click "A" or "B" they will end up here
		// @menu == 1 if "A"
		// @menu == 3 if "B"
	L_Right:
		// If they click "C" they will end up here
		// @menu == 5

Both these examples will perform the exact same task.

If you give an empty string as a menu item, the item will not display. This
can effectively be used to script dynamic menus by using empty string for
entries that should be unavailable at that time.

You can do it by using arrays, but watch carefully - this trick isn't high
wizardry, but minor magic at least. You can't expect to easily duplicate it
until you understand how it works.

Create a temporary array of strings to contain your menu items, and populate it
with the strings that should go into the menu at this execution, making sure not
to leave any gaps. Normally, you do it with a loop and an extra counter, like
this:

	setarray .@possiblemenuitems$[0],<list of potential menu items>;
	.@j = 0; // That's the menu lines counter.

	// We loop through the list of possible menu items.
	// .@i is our loop counter.
	for( .@i = 0; .@i < getarraysize(.@possiblemenuitems$); .@i++ )
	{
		// That 'condition' is whatever condition that determines whether
		// a menu item number .@i actually goes into the menu or not.

		if (<condition>)
		{
			// We record the option into the list of options actually available.

			.@menulist$[@j] = .@possiblemenuitems$[@i];

			// We just copied the string, we do need its number for later
			// though, so we record it as well.

			.@menureference[@j] = .@i;

			// Since we've just added a menu item into the list, we increment
			// the menu lines counter.

			.@j++;
		}

		// We go on to the next possible menu item.
	}

This will create you an array .@menulist$ which contains the text of all items
that should actually go into the menu based on your condition, and an array
.@menureference, which contains their numbers in the list of possible menu items.
(Remember, arrays start with 0.) There's less of them than the possible menu
items you've defined, but the menu command can handle the empty lines - only if
they are last in the list, and if it's made this way, they are. Now comes a
dirty trick:

	// X is whatever the most menu items you expect to handle.
	menu .@menulist$[0],-,.@menulist$[1],-,...,.@menulist$[<X>],-;

This calls up a menu of all your items. Since you didn't copy some of the
possible menu items into the list, its end is empty and so no menu items will
show up past the end. But this menu call doesn't jump anywhere, it just
continues execution right after the menu command. (And it's a good thing it
doesn't, cause you can only explicitly define labels to jump to, and how do you
know which ones to define if you don't know beforehand which options will end up
where in your menu?)
But how do you figure out which option the user picked? Enter the @menu.

@menu contains the number of option that the user selected from the list,
starting with 1 for the first option. You know now which option the user picked
and which number in your real list of possible menu items it translated to:

    mes "You selected " + .@possiblemenuitems$[.@menureference[@menu-1]] + "!";

@menu is the number of option the user picked.
@menu-1 is the array index for the list of actually used menu items that we
made.
.@menureference[@menu-1] is the number of the item in the array of possible menu
items that we've saved just for this purpose.

And .@possiblemenuitems$[.@menureference[@menu-1]] is the string that we used to
display the menu line the user picked. (Yes, it's a handful, but it works.)

You can set up a bunch of 'if (.@menureference[@menu-1] == X) goto Y' statements to
route your execution based on the line selected and still generate a different
menu every time, which is handy when you want to, for example, make users select
items in any specific order before proceeding, or make a randomly shuffled menu.

Kafra code bundled with the standard distribution uses a similar array-based
menu technique for teleport lists, but it's much simpler and doesn't use @menu,
probably since that wasn't documented anywhere.

See also 'select', which is probably better in this particular case. Instead of
menu, you could use 'select' like this:

    .@dummy = select(.@menulist$[0],.@menulist$[1],...,.@menulist$[<X>]);

For the purposes of the technique described above these two statements are
perfectly equivalent.

---------------------------------------

*select("<option>"{,"<option>",...})
*prompt("<option>"{,"<option>",...})

This function is a handy replacement for 'menu' for some specific cases where
you don't want a complex label structure - like, for example, asking simple yes-
no questions. It will return the number of menu option picked, starting with 1.
Like 'menu', it will also set the variable @menu to contain the option the user
picked.

    if (select("Yes:No" ) == 1)
		mes "You said yes, I know.";

And like 'menu', the selected option is consistent with grouped options
and empty options.

'prompt' works almost the same as select, except that when a character clicks
the Cancel button, this function will return 255 instead.

---------------------------------------

*input(<variable>{,<min>{,<max>}})

This command will make an input box pop up on the client connected to the
invoking character, to allow entering of a number or a string. This has many
uses, one example would be a guessing game, also making use of the 'rand'
function:

	mes "[Woman]";
	mes "Try and guess the number I am thinking of.";
	mes "The number will be between 1 and 10.";
	next;
	.@number = rand(1,10);
	input .@guess;
	if (.@guess == .@number) {
		mes "[Woman]";
		mes "Well done, that was the number I was thinking of!";
		close;
	} else {
		mes "[Woman]";
		mes "Sorry, that wasn't the number I was thinking of.";
		close;
	}

If you give the input command a string variable to put the input in, it will
allow the player to enter text. Otherwise, only numbers will be allowed.

	mes "[Woman]";
	mes "Please say HELLO";
	next;
	input .@var$;
	if (.@var$ == "HELLO") {
		mes "[Woman]";
		mes "Well done, you typed it correctly.";
		close;
	} else {
		mes "[Woman]";
		mes "Sorry, you got it wrong.";
		close;
	}

Normally you may not input a negative number with this command.
This is done to prevent exploits in badly written scripts, which would
let people, for example, put negative amounts of Zeny into a bank script and
receive free Zeny as a result.

Since trunk r12192 the command has two optional arguments and a return value.
The default value of 'min' and 'max' can be set with 'input_min_value' and
'input_max_value' in script_athena.conf.
For numeric inputs the value is capped to the range [min,max]. Returns 1 if
the value was higher than 'max', -1 if lower than 'min' and 0 otherwise.
For string inputs it returns 1 if the string was longer than 'max', -1 is
shorter than 'min' and 0 otherwise.

---------------------------------------

*callfunc "<function>"{,<argument>,...<argument>};
*callfunc("<function>"{,<argument>,...<argument>})

This command lets you call up a function NPC. A function NPC can be called from
any script on any map server. Using the 'return' command it will come back to
the place that called it.

	place,50,50,6%TAB%script%TAB%Woman%TAB%115,{
		mes "[Woman]"
		mes "Let's see if you win...";
		callfunc "funcNPC";
		mes "Well done, you have won!";
		close;
	}
	function%TAB%script%TAB%funcNPC%TAB%{
		.@win = rand(2);
		if (.@win == 0)
			return;
		mes "Sorry, you lost.";
		close;
	}

You can pass arguments to your function - values telling it what exactly to do -
which will be available there with getarg() (see 'getarg')
Notice that returning is not mandatory, you can end execution right there.

If you want to return a real value from inside your function NPC, it is better
to write it in the function form, which will also work and will make the script
generally cleaner:

	place,50,50,6%TAB%script%TAB%Man%TAB%115,{
		mes "[Man]"
		mes "Gimme a number!";
		next;
		input .@number;
		if (callfunc("OddFunc",.@number)) mes "It's Odd!";
		close;
	}
	function%TAB%script%TAB%OddFunc%TAB%{
		if (getarg(0)%2 == 0)
			return 0;// it's even
		return 1;// it's odd
	}

Alternately, as of rAthena revision 15979 and 15981, user-defined functions
may be called directly without the use of the 'callfunc' script command.

	function<tab>script<tab>SayHello<tab>{
		mes "Hello " + getarg(0);
		return 0;
	}

	place,50,50,6<tab>script<tab>Man<tab>115,{
		mes "[Man]";
		SayHello strcharinfo(0);
		close;
	}

Note:

 !! A user-defined function must be declared /before/ a script attempts to
 !! call it. That is to say, any functions should be placed above scripts or NPCs
 !! (or loaded in a separate file first) before attempting to call them directly.

---------------------------------------

*callsub <label>{,<argument>,...<argument>};
*callsub(<label>{,<argument>,...<argument>})

This command will go to a specified label within the current script (do NOT use
quotes around it) coming in as if it were a 'callfunc' call, and pass it
arguments given, if any, which can be recovered there with 'getarg'. When done
there, you should use the 'return' command to go back to the point from where
this label was called. This is used when there is a specific thing the script
will do over and over, this lets you use the same bit of code as many times as
you like, to save space and time, without creating extra NPC objects which are
needed with 'callfunc'. A label is not callable in this manner from another
script.

Example 1: callsub for checking (if checks pass, return to script)
	callsub S_CheckFull, "guild_vs2",50;
	switch( rand(4) ) {
		case 0:	warp "guild_vs2",9,50;	end;
		case 1:	warp "guild_vs2",49,90;	end;
		case 2:	warp "guild_vs2",90,50;	end;
		case 3:	warp "guild_vs2",49,9;	end;
	}

...

S_CheckFull:
	if (getmapusers(getarg(0)) >= getarg(1)) {
		mes "I'm sorry, this arena is full.  Please try again later.";
		close;
	}
	return;

Example 2: callsub used repeatedly, with different arguments
// notice how the Zeny check/delete is reused, instead of copy-pasting for every warp
	switch(select("Abyss Lake:Amatsu Dungeon:Anthell:Ayothaya Dungeon:Beacon Island, Pharos")) {
		case 1:	callsub S_DunWarp,"hu_fild05",192,207;
		case 2:	callsub S_DunWarp,"ama_in02",119,181;
		case 3:	callsub S_DunWarp,"moc_fild20",164,145;
		case 4:	callsub S_DunWarp,"ayo_fild02",279,150;
		case 5:	callsub S_DunWarp,"cmd_fild07",132,125;
		// etc
	}

...

S_DunWarp:
// getarg(0) = "map name"
// getarg(1) = x
// getarg(2) = y
	if (Zeny >= 100) {
		Zeny -= 100;
		warp getarg(0),getarg(1),getarg(2);
	} else {
		mes "Dungeon warp costs 100 Zeny.";
	}
	close;

---------------------------------------

*getarg(<index>{,<default_value>})

This function is used when you use the 'callsub' or 'callfunc' commands. In the
call you can specify variables that will make that call different from another
one. This function will return an argument the function or subroutine was
called with, and is the normal way to get them.
This is another thing that can let you use the same code more than once.

Argument numbering starts with 0, i.e. the first argument you gave is number 0.
If no such argument was given, a zero is returned.

	place,50,50,6%TAB%script%TAB%Woman1%TAB%115,{
		mes "[Woman]";
		mes "Let's see if you win...";
		callfunc "funcNPC",2;
		mes "Well done, you have won!";
		close;
	}

	place,52,50,6%TAB%script%TAB%Woman2%TAB%115,{
		mes "[Woman]";
		mes "Let's see if you win...";
		callfunc "funcNPC",5;
		mes "Well done, you have won!";
		close;
	}

	function%TAB%script%TAB%funcNPC%TAB%{
		.@win = rand(getarg(0));
		if (.@win == 0) return;
		mes "Sorry, you lost.";
		close;
	|

"woman1" NPC object calls the funcNPC. The argument it gives in this call is
stated as 2, so when the random number is generated by the 'rand' function, it
can only be 0 or 1. Whereas "woman2" gives 5 as the argument number 0 when
calling the function, so the random number could be 0, 1, 2, 3 or 4, this makes
"woman2" less likely to say the player won.

You can pass multiple arguments in a function call:

	callfunc "funcNPC",5,4,3;

getarg(0) would be 5, getarg(1) would be 4 and getarg(2) would be 3.

'getarg' has an optional argument since trunk r10773 and stable r10958.
If the target argument exists, it is returned.
Otherwise, if <default_value> is present it is returned instead,
if not the script terminates immediately.

In the previous example getarg(2,-1) would be 3 and getarg(3,-1) would be -1.

---------------------------------------

*getargcount()

This function is used when you use the 'callsub' or 'callfunc' commands. In the
call you can specify arguments. This function will return the number of arguments
provided.

Example:
	callfunc "funcNPC",5,4,3;
	...
	function%TAB%script%TAB%funcNPC%TAB%{
		.@count = getargcount(); // 3
		...
	}

---------------------------------------

*return {<value>};

This command causes the script execution to leave previously called function
with callfunc or script with callsub and return to the location, where the call
originated from. Optionally a return value can be supplied, when the call was
done using the function form.

Using this command outside of functions or scripts referenced by callsub will
result in error and termination of the script.

	callfunc "<your function>";// when nothing is returned
	set <variable>,callfunc("<your function>");// when a value is being returned

---------------------------------------

*function <function name>;
*<function name>{(<argument>,...<argument>)};
*function <function name> {
<code>
}

This works like callfunc, and is used for cleaner and faster scripting. The function
must be defined and used within a script, and works like a label with arguments.
Note that the name may only contain alphanumeric characters and underscore.

Usage:

    1. Declare the function.
	function <function name>;
    2. Call the function anywhere within the script.
       It can also return a value when used with parentheses.
	<function name>;
    3. Define the function within the script.
	<function name> {<code>}

Example:

prontera,154,189,4	script	Item Seller	767,{
	/* Function declaration */
	function SF_Selling;

	if (Zeny > 50) {
		mes "Welcome!";
		/* Function call */
		SF_Selling;
	}
	else mes "You need 50z, sorry!";
	close;

	/* Function definition */
	function SF_Selling {
		mes "Would you like to buy a phracon for 50z?";
		next;
		if (select("Yes","No, thanks") == 1) {
			Zeny -= Zeny;
			getitem 1010,1;
			mes "Thank you!";
		}
		return;
	}
}

Example with parameters and return value:

prontera,150,150,0	script	TestNPC	123,{
	/* Function declaration */
	function MyAdd;

	mes "Enter two numbers.";
	next;
	input .@a;
	input .@b;
	/* Function call */
	mes .@a + " + " + .@b + " = " + MyAdd(.@a,.@b);
	close;

	/* Function definition */
	function MyAdd {
		return getarg(0)+getarg(1);
	}
}


---------------------------------------

*is_function("<function name>")

This command checks whether a function exists.
It returns 1 if function is found, or 0 if it isn't.

Example:

	function	script	try	{
		dothat;
	}

	-	script	test	-1,{
		.@try = is_function("try"); // 1
		.@not = is_function("not"); // 0
	}

---------------------------------------

*if (<condition>) <statement>;

This is the basic conditional statement command, and just about the only one
available in this scripting language.

The condition can be any expression. All expressions resulting in a non-zero
value will be considered True, including negative values. All expressions
resulting in a zero are false.

If the expression results in True, the statement will be executed. If it isn't
true, nothing happens and we move on to the next line of the script.

    if (1)  mes "This will always print.";
    if (0)  mes "And this will never print.";
    if (5)  mes "This will also always print.";
    if (-1) mes "Funny as it is, this will also print just fine.";

For more information on conditional operators see the operators section above.
Anything that is returned by a function can be used in a condition check without
bothering to store it in a specific variable:

    if (strcharinfo(0) == "Daniel Jackson") mes "It is true, you are Daniel!";

More examples of using the 'if' command in the real world:

Example 1:

	.@answer = 1;
	input .@input;
	if (.@input == .@answer)
		close;
	mes "Sorry, your answer is incorrect.";
	close;

Example 2:

	.@answer = 1;
	input .@input;
	if (.@input != .@answer)
		mes "Sorry, your answer is incorrect.";
	close;

Notice that examples 1 and 2 have the same effect.

Example 3:

	.@count++;
	mes "[Forgetful Man]";
	if (.@count == 1) mes "This is the first time you have talked to me.";
	if (.@count == 2) mes "This is the second time you have talked to me.";
	if (.@count == 3) mes "This is the third time you have talked to me.";
	if (.@count == 4) {
		mes "This is the fourth time you have talked to me.";
		mes "I think I am getting amnesia, I have forgotten about you...";
		.@count = 0;
	}
	close;

Example 4:

	mes "[Quest Person]";
	if (countitem(512) < 1) {  // 512 is the item ID for Apple, found in db/item_db.yml
		mes "Can you please bring me an apple?";
		close;
	}
	mes "Oh, you brought an Apple!";
	mes "I didn't want it, I just wanted to see one.";
	close;

Example 5:

	mes "[Person Checker]";
	if ($@name$ == "") {  // global variable not yet set
		mes "Please tell me someones name";
		next;
		input $@name$;
		$@name2$ = strcharinfo(0);
		mes "[Person Checker]";
		mes "Thank you.";
		close;
	}
	if ($@name$ == strcharinfo(0)) {  // player name matches $@name$
		mes "You are the person that " + $@name2$ + " just mentioned.";
		mes "Nice to meet you!";

		// reset the global variables
		$@name$ = "";
		$@name2$ = "";

		close;
	}
	mes "You are not the person that " + $name2$ + " mentioned.";
	close;

See 'strcharinfo' for an explanation of what this function does.

Example 6: Using complex conditions.

	mes "[Multiple Checks]";
	if (@queststarted == 1 && countitem(512) >= 5) {
		mes "Well done, you have started the quest and brought me 5 Apples.";
		@queststarted = 0;
		delitem 512,5;
		close;
	}
	mes "Please bring me 5 apples.";
	@queststarted = 1;
	close;

The script engine also supports nested 'if' statements:

	if (<condition>)
		dothis;
	else
		dothat;

If the condition isn't met, it'll do the action following the 'else'.
We can also group several actions depending on a condition:

	if (<condition>) {
		dothis1;
		dothis2;
	} else {
		dothat1;
		dothat2;
		dothat3;
	}

Remember that if you plan to do several actions upon the condition being false, and
you forget to use the curly braces (the { } ), the second action will be executed regardless
the output of the condition, unless of course, you stop the execution of the script if the
condition is true (that is, in the first grouping using a return; , and end; or a close; )

Also, you can have multiple conditions nested or chained.

	if (<condition 1>)
		dothis;
	else if (<condition 2>) {
		dothat;
		end;
	} else
		dothis;

---------------------------------------

*jump_zero (<condition>),<label>;

This command works kinda like an 'if'+'goto' combination in one go. (See 'if').
If the condition is false (equal to zero) this command will immediately jump to
the specified label like in 'goto'. While 'if' is more generally useful, for
some cases this could be an optimization.

The main reason for this command is that other control statements, like
'switch', 'for' or 'while', are disassembled into simple expressions together
with this command when a script is parsed.

---------------------------------------

*switch (expression);

The switch statement is similar to a series of if statements on the same expression.
In many occasions, you may want to compare the same variable (or expression)
with many different values, and execute a different piece of code depending
on which value it equals to. This is exactly what the switch statement is for.

It is important to understand how the switch statement is executed in order
to avoid mistakes. The switch statement executes line by line (actually, statement by statement).
In the beginning, no code is executed. Only when a case statement is found
with a value that matches the value of the switch expression the case statement(s)
will to executed. The parser continues to execute the statements until the end
of the switch block, or the first time it sees a break statement. If you don't
write a break statement at the end of a case's statement list, the parser will
go on executing the statements of the following case (fall-through).

Example 1:

	switch(select("Yes:No")) {
		case 1:
			mes "You said yes!";
			break;
		case 2:
			mes "Aww, why?";
			break;
	}
	close;

The example above would work like a menu and would go to the first case if
the user selects option, otherwise, would go to the second one.

Example 2:

	switch(getgroupid()) {
		case 1:
			mes "Wow, you're super!";
			break;
		case 2:
			mes "A helping hand!";
			break;
		case 3:
			mes "10001010010011";
			break;
		case 4:
			mes "Yes, milord?";
			break;
		default:
			mes "Hello there!";
			break;
	}

The example above would print a message depending on the player's groupid.
If there is no statement declared for the corresponding groupid, the script
would use the 'default' statement that applies to rest of possible values,
similar to 'else' in the if-else statement.

---------------------------------------

*while (<condition>) <statement>;

This is probably the simplest and most frequently used loop structure. The 'while'
statement can be interpreted as "while <condition> is true, perform <statement>".
It is a pretest loop, meaning the conditional expression is tested before any of the
statements in the body of the loop are performed. If the condition evaluates to
false, the statement(s) in the body of the loop is/are never executed. If the
condition evaluates to true, the statement(s) are executed, then control transfers
back to the conditional expression, which is reevaluated and the cycle continues.

Multiple statements can be grouped with { }, curly braces, just like with the 'if' statement.

Example 1:
	while (switch(select("Yes:No") == 2 ))
		mes "You picked no.";
	close;

Example 2: multiple statements
	while (switch(select("Yes:No") == 2 )) {
		mes "Why did you pick no?";
		mes "You should pick yes instead!";
	}
	close;

Example 3: counter-controlled loop
	.@i = 1;
	while (.@i <= 5) {
		mes "This line will print 5 times.";
		.@i += 1;
	}
	close;

Example 4: sentinel-controlled loop
	mes "Input 0 to stop";
	input .@num;
	while (.@num != 0) {
		mes "You entered " + .@num;
		input .@num;
	}
	close;

---------------------------------------

*for (<variable initialization>; <condition>; <variable update>) <statement>;

Another pretest looping structure is the 'for' statement. It is considered a
specialized form of the 'while' statement, and is usually associated with counter-
controlled loops. Here are the steps of the 'for' statement: the initialize
statement is executed first and only once. The condition test is performed.
When the condition evaluates to false, the rest of the for statement is skipped.
When the condition evaluates to true, the body of the loop is executed, then the
update statement is executed (this usually involves incrementing a variable).
Then the condition is reevaluated and the cycle continues.

Example 1:
	for( .@i = 1; .@i <= 5; .@i++ )
		mes "This line will print 5 times.";

Example 2:
	mes "This will print the numbers 1 - 5.";
	for( .@i = 1; .@i <= 5; .@i++ )
		mes "Number: " + .@i;

---------------------------------------

*do { <statement>; } while (<condition>);

The 'do...while' is the only post-test loop structure available in this script
language. With a post-test, the statements are executed once before the condition
is tested. When the condition is true, the statement(s) are repeated. When the
condition is false, control is transferred to the statement following the
'do...while' loop expression.

Example 1: sentinel-controlled loop
	mes "This menu will keep appearing until you pick Cancel";
	do {
		.@menu = select("One:Two:Three:Cancel");
	} while (.@menu != 4);

Example 2: counter-controlled loop
	mes "This will countdown from 10 to 1.";
	.@i = 10;
	do {
		mes .@i;
		.@i -= 1;
	} while (.@i > 0);

---------------------------------------

*freeloop({<toggle>})

Toggling this to enabled (1) allows the script instance to bypass the infinite loop
protection, allowing your script to loop as much as it may need. Disabling (0) will
warn you if an infinite loop is detected.

The command will return the state of freeloop for the attached script, even if no
argument is provided.

Example:
	freeloop(1); // enable script to loop freely

	// be careful with what you do here
	for ( .@i = 0; .@i < .@bigloop; .@i++ ) {
		dothis;
		// will sleep the script for 1ms when detect an infinity loop to
		// let rAthena do what it needs to do (socket, timer, process, etc.)
	}

	freeloop(0); // disable freeloop

	for ( .@i = 0; .@i < .@bigloop; .@i++ ) {
		dothis;
		// throw an infinity loop error
	}

---------------------------------------

*setarray <array name>[<first value>],<value>{,<value>...<value>};

This command will allow you to quickly fill up an array in one go. Check the
Kafra scripts in the distribution to see this used a lot.

    setarray .@array[0], 100, 200, 300, 400, 500, 600;

First value is the index of the first element of the array to alter. For
example:

    setarray .@array[0],200,200,200;
    setarray .@array[1],300,150;

will produce:

 .@array[0]=200
 .@array[1]=300
 .@array[2]=150

---------------------------------------

*cleararray <array name>[<first value to alter>],<value>,<number of values to set>;

This command will change many array values at the same time to the same value.

    setarray .@array[0], 100, 200, 300, 400, 500, 600;
    // This will make all 6 values 0
    cleararray .@array[0],0,6;
    // This will make array element 0 change to 245
    cleararray .@array[0],245,1;
    // This will make elements 1 and 2 change to 345
    cleararray .@array[1],345,2;

See 'setarray'.

---------------------------------------

*copyarray <destination array>[<first value>],<source array>[<first value>],<amount of data to copy>;

This command lets you quickly shuffle a lot of data between arrays, which is in
some cases invaluable.

    setarray .@array[0], 100, 200, 300, 400, 500, 600;
    // So we have made .@array[]
    copyarray .@array2[0],@array[2],2;

    // Now, .@array2[0] will be equal to .@array[2] (300) and
    // .@array2[1] will be equal to .@array[3].

So using the examples above:
 .@array[0] = 100
 .@array[1] = 200
 .@array[2] = 300
 .@array[3] = 400
 .@array[4] = 500
 .@array[5] = 600

New Array:
 .@array2[0] = 300
 .@array2[1] = 400
 .@array2[2] = 0
 .@array2[3] = 0

Notice that .@array[4] and .@array[5] won't be copied to the second array, and it will return a
0.

---------------------------------------

*deletearray <array name>[<first value>]{,<how much to delete>};

This command will delete a specified number of array elements totally from an
array, shifting all the elements beyond this towards the beginning.

    // This will delete array element 0, and move all the other array elements
    // up one place.
    deletearray .@array[0],1

// This would delete array elements numbered 1, 2 and 3, leave element 0 in its
// place, and move the other elements ups, so there are no gaps.

    deletearray .@array[1],3

---------------------------------------

*inarray <array name>,<value>;

This command returns the index of the first matching value found in the array.
It will return -1 if the value is not found.

	setarray .@array[0], 100, 200, 300, 400, 500, 600, 100;
	
	inarray(.@array[0], 200);
	//return 1 because 200 is in index 1
	//another way to say it that .@array[1] == 200
	
	.@index = inarray(.@array[0], 600);
	//.@index is now 5 because .@array[5] == 600
	
	inarray(.@array[0], 100);
	//while index 6 is also 100, the command will return the first instance it finds
	//return 0 because .@array[0] == 100

	inarray(.@array[0], 800);
	//return -1 because 800 is not an element of the array .@array

For more details, see the sample in 'doc/sample/inarray.txt'.

---------------------------------------

*countinarray <array name>{[<start index>]},<array name>{[<start index>]};

This command will check for matches between the array values and return the number of matches.
While being optional, if [<start index>] is supplied, the search will begin from the given index value.

	setarray .@array[0], 100, 200, 300, 400, 500, 600;
	
	.@variable = 100;
	if(countinarray(.@array[0], .@variable))
		mes "The number 100 was found in the array .@array";
	
	countinarray(.@array[0], .@variable);
	//return 1 because the number 100 is an element of the array .@array
	
	setarray .@array2[0],100,500;
	countinarray(.@array[0], .@array2[0]);
	//return 2 because the numbers 100 and 500 are elements of the array .@array
	
	setarray .@array3[0],100,700;
	countinarray(.@array[0], .@array3[0]);
	//return 1 because the number 100 is an element of the array .@array
	//but the number 700 is not an element of the array .@array

	//also you can change the position between the arrays in the command
	if(countinarray(.@array[0], .@array3[0]) == countinarray(.@array3[0], .@array[0]))
		//This is true

For more details, see the sample in 'doc/sample/inarray.txt'.

---------------------------------------

======================================
|2.- Information-retrieving commands.|
======================================
---------------------------------------

*strcharinfo(<type>{,<char_id>})

This function will return either the name, party name or guild name for the
invoking character. Whatever it returns is determined by type.

 0 - Character's name.
 1 - The name of the party they're in if any.
 2 - The name of the guild they're in if any.
 3 - The name of the map the character is in.

If a character is not a member of any party or guild, an empty string will be
returned when requesting that information.

---------------------------------------

*convertpcinfo(<char_id>,<type>)
*convertpcinfo(<account_id>,<type>)
*convertpcinfo(<player_name>,<type>)

This function will return the information <type> for the
specified character. Whatever it returns is determined by type.

 CPC_NAME    - Character's name.
 CPC_CHAR    - Character ID.
 CPC_ACCOUNT - Account ID.

If a character is not found (or not online) when requesting that information,
an empty string will be returned for CPC_NAME, 0 for other <type>.

---------------------------------------

*strnpcinfo(<type>)

This function will return the various parts of the name of the calling NPC.
Whatever it returns is determined by type.

 0 - The NPC's display name (visible#hidden)
 1 - The visible part of the NPC's display name
 2 - The hidden part of the NPC's display name
 3 - The NPC's unique name (::name)
 4 - The name of the map the NPC is in.

---------------------------------------

*getarraysize(<array name>)

This function returns highest index of the array that is filled.
Notice that zeros and empty strings at the end of this array are not
counted towards this number.

For example:

    setarray .@array[0], 100, 200, 300, 400, 500, 600;
    set .@arraysize,getarraysize(.@array);

This will make .@arraysize == 6. But if you try this:

    setarray .@array[0], 100, 200, 300, 400, 500, 600, 0;
    set .@arraysize,getarraysize(.@array);

.@arraysize will still equal 6, even though you've set 7 values.

---------------------------------------

*getelementofarray(<array name>,<index>)

This command retrieves the value of the element of given array at given index.
This is equivalent to using:

    <array name>[<index>]

The reason for this is, that this short form is internally converted into a call
to getelementofarray, when the script is loaded.

Also useful when passing arrays to functions or accessing another npc's arrays:
    getelementofarray(getarg(0),<index>)
    getelementofarray(getvariableofnpc(.var, "testNPC"),<index>)

---------------------------------------

*readparam(<parameter number>{,"<character name>"})
*readparam(<parameter number>{,<char_id>})

This function will return the specified stat of the invoking character, or, if a
character name or character id is specified, of that player. The stat can either
be a number or parameter name, defined in 'src/map/script_constants.hpp'.

Some example parameters:

StatusPoint, BaseLevel, SkillPoint, Class, Upper, Zeny, Sex, Weight, MaxWeight,
JobLevel, BaseExp, JobExp, NextBaseExp, NextJobExp, Hp, MaxHp, Sp, MaxSp,
BaseJob, Karma, Manner, bVit, bDex, bAgi, bStr, bInt, bLuk, Ap, MaxAp

All of these also behave as variables, but don't expect to be able to just 'set'
them - some will not work for various internal reasons.

Example 1:

    // Returns how many status points you haven't spent yet.
    mes "Unused status points: " + readparam(9);

Using this particular information as a function call is not required. Typing this
will return the same result:

    mes "Unused status points: " + StatusPoint;

Example 2:

You can also use this command to get stat values.

    if (readparam(bVit) > 77)
        mes "Only people with over 77 Vit are reading this!";

---------------------------------------

*getcharid(<type>{,"<character name>"})

This function will return a unique ID number of the invoking character, or, if a
character name is specified, of that player.

Type is the kind of associated ID number required:

 0 - Character ID
 1 - Party ID
 2 - Guild ID
 3 - Account ID
 4 - Battle Ground ID
 5 - Clan ID

For most purposes other than printing it, a number is better to have than a name
(people do horrifying things to their character names).

If the character is not in a party or not in a guild, the function will return 0
if guild or party number is requested. If a name is specified and the character
is not found, 0 is returned.

If getcharid(0) returns a zero, the script got called not by a character and
doesn't have an attached RID. Note that this will cause the map server to
print "player not attached!" error messages, so it is preferred to use
"playerattached" to check for the character attached to the script.

if (getcharid(2) == 0)
	mes "Only members of a guild are allowed here!";

---------------------------------------

*getnpcid(<type>{,"<npc name>"});

Retrieves IDs of the currently invoked NPC. If a unique npc name is
given, IDs of that NPC are retrieved instead. Type specifies what ID
to retrieve and can be one of the following:

    0 - NPC Game ID

If an invalid type is given or the NPC does not exist, 0 is returned.

---------------------------------------

*getchildid({<char_id>})
*getmotherid({<char_id>})
*getfatherid({<char_id>})

These functions return the character ID of the attached player's child,
mother, mother, or father, respectively. It returns 0 if no ID is found.

    if (getmotherid()) mes "Your mother's ID is: " + getmotherid();

---------------------------------------

*ispartneron({<char_id>})

This function returns 1 if the invoking character's marriage partner is
currently online and 0 if they are not or if the character has no partner.

---------------------------------------

*getpartnerid({<char_id>})

This function returns the character ID of the invoking character's marriage
partner, if any. If the invoking character is not married, it will return 0,
which is a quick way to see if they are married:

    if (getpartnerid()) mes "I'm not going to be your girlfriend!";
    if (getpartnerid()) mes "You're married already!";

---------------------------------------

*getlook(<type>{,<char_id>})

This function will return the number for the current character look value
specified by type. See 'setlook' for valid look types.

This can be used to make a certain script behave differently for characters
dressed in black.

---------------------------------------

*getsavepoint(<information type>{,<char_id>})

This function will return information about the invoking character's save point.
You can use it to let a character swap between several recorded save points.
Available information types are:

 0 - Map name (a string)
 1 - X coordinate
 2 - Y coordinate

---------------------------------------

*getcharip({"<character name>"|<account id>|<char id>})

This function will return the IP address of the invoking character, or, if a player
is specified, of that character. A blank string is returned if no player is attached.

Examples:

// Outputs IP address of attached player.
	mes "Your IP: " + getcharip();

// Outputs IP address of character "Silver".
	mes "Silver's IP: " + getcharip("Silver");

---------------------------------------

*vip_status(<type>,{"<character name>"})

Returns various information about a player's VIP status.

Valid types:
 VIP_STATUS_ACTIVE - VIP status: true if the player is a VIP or false if not
 VIP_STATUS_EXPIRE - VIP expire timestamp if the player is VIP or 0 if not
 VIP_STATUS_REMAINING - VIP time remaining in seconds

NOTE: This command is only available if the VIP System is enabled.

---------------------------------------

*vip_time <time>,{"<character name>"};

Changes a player's VIP time (in minutes). A positive value will increase time, and a
negative value will decrease time.

NOTE: This command is only available if the VIP System is enabled.

---------------------------------------

*addspiritball <count>,<duration>{,<char_id>};

Adds spirit ball to player for 'duration' in milisecond.

---------------------------------------

*delspiritball <count>{,<char_id>};

Deletes the spirit ball(s) from player.

---------------------------------------

*countspiritball {<char_id>};

Counts the spirit ball that player has.

---------------------------------------

*ignoretimeout <flag>{,<char_id>};

Disables the SECURE_NPCTIMEOUT function on the character invoking the script,
or by the given character ID/character name.

Valid flag:
 0 - Enabled SECURE_NPCTIMEOUT.
 1 - Disable SECURE_NPCTIMEOUT.

Note: SECURE_NPCTIMEOUT must be enabled for this to work.

---------------------------------------
\\
2,2 Item-related commands
\\
---------------------------------------

*getequipid({<equipment slot>,<char_id>})

This function returns the item ID of the item slot that calls the script
on the invoking character or the specified equipment slot. If nothing is
equipped there, it returns -1.
Valid equipment slots are:

EQI_COMPOUND_ON (-1)      - Item slot that calls this script (In context of item script) - exclusive to getequipid
EQI_ACC_L (0)             - Accessory 1
EQI_ACC_R (1)             - Accessory 2
EQI_SHOES (2)             - Footgear (shoes, boots)
EQI_GARMENT (3)           - Garment (mufflers, hoods, manteaux)
EQI_HEAD_LOW (4)          - Lower Headgear (beards, some masks)
EQI_HEAD_MID (5)          - Middle Headgear (masks, glasses)
EQI_HEAD_TOP (6)          - Upper Headgear
EQI_ARMOR (7)             - Armor (jackets, robes)
EQI_HAND_L (8)            - Left hand (weapons, shields)
EQI_HAND_R (9)            - Right hand (weapons)
EQI_COSTUME_HEAD_TOP (10) - Upper Costume Headgear
EQI_COSTUME_HEAD_MID (11) - Middle Costume Headgear
EQI_COSTUME_HEAD_LOW (12) - Lower Costume Headgear
EQI_COSTUME_GARMENT (13)  - Costume Garment
EQI_AMMO (14)    		  - Arrow/Ammunition
EQI_SHADOW_ARMOR (15)     - Shadow Armor
EQI_SHADOW_WEAPON (16)    - Shadow Weapon
EQI_SHADOW_SHIELD (17)    - Shadow Shield
EQI_SHADOW_SHOES (18)     - Shadow Shoes
EQI_SHADOW_ACC_R (19)     - Shadow Accessory 2
EQI_SHADOW_ACC_L (20)     - Shadow Accessory 1

Notice that a few items occupy several equipment slots, and if the character is
wearing such an item, 'getequipid' will return its ID number for either slot.

Can be used to check if you have something equipped, or if you haven't got
something equipped:

	if (getequipid(EQI_HEAD_TOP) == 2234)
		mes "What a lovely Tiara you have on";
	else
		mes "Come back when you have a Tiara on";
	close;

You can also use it to make sure people don't pass a point before removing an
item totally from them. Let's say you don't want people to wear Legion Plate
armor, but also don't want them to equip if after the check, you would do this:

	if (getequipid(EQI_ARMOR) == 2341 || getequipid(EQI_ARMOR) == 2342) {
		mes "You are wearing some Legion Plate Armor, please drop that in your stash before continuing";
		close;
	}
	// the || is used as an or argument, there is 2341 and 2342 cause there are
	// two different legion plate armors, one with a slot one without.

	if (countitem(2341) > 0 || countitem(2432) > 0) {
		mes "You have some Legion Plate Armor in your inventory, please drop that in your stash before continuing";
		close;
	}
	mes "I will lets you pass.";
	close2;
	warp "place",50,50;
	end;

---------------------------------------

*getequipuniqueid(<equipment slot>{,<char_id>})

This function returns the unique ID (as a string) of the item equipped in the equipment slot
specified on the invoking character. If nothing is equipped there, it returns an empty string.
See 'getequipid' for a full list of valid equipment slots.

---------------------------------------

*getequipname(<equipment slot>{,<char_id>})

Returns the jname of the item equipped in the specified equipment slot on the
invoking character, or an empty string if nothing is equipped in that position.
Does the same thing as getitemname(getequipid()). Useful for an NPC to state
what your are wearing, or maybe saving as a string variable.
See 'getequipid' for a full list of valid equipment slots.

        if ( getequipname(EQI_HEAD_TOP) != "" )
	        mes "So you are wearing a " + getequipname(EQI_HEAD_TOP) + " on your head";
	else
	        mes "You are not wearing any head gear";

---------------------------------------

*getitemname(<item id>)
*getitemname(<aegis item name>)

Given the database ID number of an item, this function will return the text
stored in the 'Name' field in item_db_*.yml for text version
or 'name_english' field for SQL version. The function returns "null" if the item doesn't exist.

---------------------------------------

*getbrokenid(<number>{,<char_id>})

This function will search the invoking character's inventory for any broken
items, and will return their item ID numbers. Since the character may have
several broken items, 1 given as an argument will return the first one found, 2
will return the second one, etc. Will return 0 if no such item is found.

	// Let's see if they have anything broken:
	if (getbrokenid(1) == 0)
		mes "You don't have anything broken, quit bothering me.";
	else
	// They do, so let's print the name of the first broken item:
		mes "Oh, I see you have a broken " + getitemname(getbrokenid(1)) + " here!";
	end;

---------------------------------------

*getequipisequiped(<equipment slot>{,<char_id>})

This functions will return 1 if there is an equipment placed on the specified
equipment slot and 0 otherwise. For a list of equipment slots
see 'getequipid'. Function originally used by the refining NPCs:

    if (getequipisequiped(EQI_HEAD_TOP)) {
        mes "[Refiner]";
        mes "That's a fine hat you are wearing there...";
        close;
	} else {
		mes "[Refiner]";
		mes "Do you want me to refine your dumb head?";
		close;
	}

---------------------------------------

*getequipisenableref(<equipment slot>{,<char_id>})

Will return 1 if the item equipped on the invoking character in the specified
equipment slot is refinable, and 0 if it isn't. For a list of equipment slots
see 'getequipid'.

	if (getequipisenableref(EQI_HEAD_TOP)) {
		mes "[Refiner]";
		mes "Ok I can refine this";
		close;
	} else {
		mes "[Refiner]";
		mes "I can't refine this hat!...";
		close;
	}

---------------------------------------

*getequiprefinerycnt(<equipment slot>{,<char_id>})

Returns the current number of pluses for the item in the specified equipment
slot. For a list of equipment slots see 'getequipid'.

Can be used to check if you have reached a maximum refine value, default for
this is +10:

	if (getequiprefinerycnt(EQI_HEAD_TOP) < 10)
		mes "I will now upgrade your " + getequipname(EQI_HEAD_TOP);
	else
		mes "Sorry, it's not possible to refine hats better than +10";
	close;

---------------------------------------

*getequipweaponlv({<equipment slot>{,<char_id>}})

This function returns the weapon level for the weapon equipped in the specified
equipment slot on the invoking character. For a list of equipment slots see
'getequipid'.

Only EQI_HAND_L and EQI_HAND_R normally make sense, since only weapons have
a weapon level.

If no item is equipped in this slot, or if it doesn't have a weapon level
according to the database, 0 will be returned.

Examples:

    switch (getequipweaponlv(EQI_HAND_R)) {
      case 1: mes "You are holding a lvl 1 weapon."; break;
      case 2: mes "You are holding a lvl 2 weapon."; break;
      case 3: mes "You are holding a lvl 3 weapon."; break;
      case 4: mes "You are holding a lvl 4 weapon."; break;
      case 5: mes "You are holding a lvl 5 weapon."; break;
      case 6: mes "You are holding a lvl 6 weapon, hm, must be a custom design..."; break;
      default: mes "Seems you don't have a weapon on."; break;
    }

    if (getequipid(EQI_HAND_L) == 0) {
        mes "Seems you have nothing equipped here.";
        close;
    }
    switch (getequipweaponlv(EQI_HAND_L)) {
      case 0: mes "You are not holding a weapon, so it doesn't have a level."; break;
      case 1: mes "You are holding a lvl 1 weapon."; break;
      case 2: mes "You are holding a lvl 2 weapon."; break;
      case 3: mes "You are holding a lvl 3 weapon."; break;
      case 4: mes "You are holding a lvl 4 weapon."; break;
      case 5: mes "You are holding a lvl 5 weapon."; break;
      case 6: mes "You are holding a lvl 6 weapon, hm, must be a custom design..."; break;
    }

---------------------------------------

*getequiparmorlv({<equipment slot>{,<char_id>}})

This function returns the armor level for the item equipped in the specified
equipment slot on the invoking character. For a list of equipment slots see
'getequipid'.

If no item is equipped in this slot, or if it doesn't have an armor level
according to the database, 0 will be returned.

    if (getequipid(EQI_ARMOR) == 0) {
        mes "Seems you have nothing equipped here.";
        close;
    }
    switch (getequiparmorlv(EQI_ARMOR)) {
      case 1: mes "You are wearing a lvl 1 armor."; break;
      case 2: mes "You are wearing a lvl 2 armor."; break;
      case 3: mes "You are wearing a lvl 3 armor, hm, must be a custom design..."; break;
    }

---------------------------------------

*getequippercentrefinery(<equipment slot>,<type>{,<char_id>})

This function calculates and returns the percent value chance to successfully
refine the item found in the specified equipment slot of the invoking character
by +1. There is no actual formula, the success rate for a given weapon level of
a certain refine level is found in the db/(pre-)re/refine_db.yml file. For a list of
equipment slots see 'getequipid'.

For 'type'  values, see the valid types in 'getequiprefinecost' below.
(As backward compatibility, if this value is unset, below +10 will use 
REFINE_COST_NORMAL and above +10 is using REFINE_COST_OVER10).

These values can be displayed for the player to see, or used to calculate the
random change of a refine succeeding or failing and then going through with it
(which is what the official NPC refinery scripts use it for)

// This will find a random number from 0 - 99 and if that is equal to or more
// than the value recovered by this command it will go to L_Fail
    if (getequippercentrefinery(EQI_HAND_L)<=rand(100)) goto L_Fail;

---------------------------------------

*getequiprefinecost(<equipment slot>,<type>,<information>{,<char id>})

This function returns refine cost for equipment in <equipment slot> based on
passed arguments <type> and <information>.

Valid cost types are:

REFINE_COST_NORMAL     - For normal refining
REFINE_COST_HD         - For refining with HD ores
REFINE_COST_ENRICHED   - For refining with enriched ores
REFINE_COST_EVENT      - For refining with event ores

This function will return required cost for refining based on <information> argument.

Valid information types are:

REFINE_ZENY_COST       - Zeny
REFINE_MATERIAL_ID     - Material Item ID

This function will return -1 on failure. The function fails if the cost type
is invalid or if there is no item in the equipment slot.

---------------------------------------

*getblacksmithblessing(<type>,<refine>{,<var>})

Get info about 'Blacksmith Blessing' item used for specified <type> and
<refine>. The info will be stored in .@refinebb array.

    .@refinebb[0] = Item ID acknowledged as Blacksmith Blessing
    .@refinebb[1] = Amount needed

<type> is can be 0 for armor type, 1-4 for weapons level 1 to 4 or
	REFINE_TYPE_ARMOR    = Armor
	REFINE_TYPE_WEAPON1  = Weapon Lv 1
	REFINE_TYPE_WEAPON2  = Weapon Lv 2
	REFINE_TYPE_WEAPON3  = Weapon Lv 3
	REFINE_TYPE_WEAPON4  = Weapon Lv 4
	REFINE_TYPE_SHADOW   = Shadowgear
	REFINE_TYPE_COSTUME  = Costume

If <var> is specified, it will replaces .@refinebb as default array. This
script also returns 1 on success and 0 on failure or no info.

---------------------------------------

*getareadropitem("<map name>",<x1>,<y1>,<x2>,<y2>,<item>)

This function will count all the items with the specified ID number lying on the
ground on the specified map within the x1/y1-x2/y2 square on it and return that
number.

This is the only function around where a parameter may be either a string or a
number! If it's a number, it means that only the items with that item ID number
will be counted. If it is a string, it is assumed to mean the 'english name'
field from the item database.

---------------------------------------

*getequipcardcnt(<equipment slot>)

This function will return the number of cards that have been compounded onto a
specific equipped item for the invoking character. See 'getequipid' for a list
of possible equipment slots.

---------------------------------------

*getinventorylist {<char_id>};

This command sets a bunch of arrays with a complete list of whatever the
invoking character has in their inventory, including all the data needed to
recreate these items perfectly if they are destroyed. Here's what you get:

@inventorylist_id[]                - array of item ids.
@inventorylist_idx[]               - array of item inventory index.
@inventorylist_amount[]            - their corresponding item amounts.
@inventorylist_equip[]             - on which position the item is equipped (see EQP_* constants)
                                     It will contain 0 if the item is not equipped.
@inventorylist_refine[]            - for how much it is refined.
@inventorylist_identify[]          - whether it is identified.
@inventorylist_attribute[]         - whether it is broken.
@inventorylist_card1[]             - These four arrays contain card data for the items.
@inventorylist_card2[]               These data slots are also used to store names
@inventorylist_card3[]               inscribed on the items, so you can explicitly check
@inventorylist_card4[]               if the character owns an item made by a specific
                                     craftsman.
@inventorylist_expire[]            - expire time (Unix time stamp). 0 means never expires.
@inventorylist_bound[]             - the bound type of the items (see BOUND_* constants)
@inventorylist_enchantgrade[]      - the enchantgrade of the items
@inventorylist_count               - the number of items in these lists.
@inventorylist_option_id1[]        - first array of random option IDs
@inventorylist_option_value1[]     - first array of random option values
@inventorylist_option_parameter1[] - first array of random option parameters
@inventorylist_option_id2[]        - second array of random option IDs
@inventorylist_option_value2[]     - second array of random option values
@inventorylist_option_parameter2[] - second array of random option parameters
@inventorylist_option_id3[]        - third array of random option IDs
@inventorylist_option_value3[]     - third array of random option values
@inventorylist_option_parameter3[] - third array of random option parameters
@inventorylist_option_id4[]        - fourth array of random option IDs
@inventorylist_option_value4[]     - fourth array of random option values
@inventorylist_option_parameter4[] - fourth array of random option parameters
@inventorylist_option_id5[]        - fifth array of random option IDs
@inventorylist_option_value5[]     - fifth array of random option values
@inventorylist_option_parameter5[] - fifth array of random option parameters
@inventorylist_tradable            - Returns if an item is tradable or not (Pass item_db.yml, bound, and rental restrictions).
@inventorylist_favorite            - Returns if an item is favorite or not

This could be handy to save/restore a character's inventory, since no other
command returns such a complete set of data, and could also be the only way to
correctly handle an NPC trader for carded and named items who could resell them
- since NPC objects cannot own items, so they have to store item data in
variables and recreate the items.

Notice that the variables this command generates are all temporary, attached to
the character, and integer.

Be sure to use @inventorylist_count to go through these arrays, and not
'getarraysize', because the arrays are not automatically cleared between runs
of 'getinventorylist'.

---------------------------------------

*cardscnt()

This function will return the number of cards inserted into the equipment
from which the function is called.

This function is intended for use in item scripts.

---------------------------------------

*getrefine()

This function will return the refine count of the equipment from which the
function is called.

This function is intended for use in item scripts.

---------------------------------------

*getnameditem(<item id>,"<name to inscribe>"|<char id>);
*getnameditem("<item name>","<name to inscribe>"|<char id>);

This function is equivalent to using 'getitem', however, it will not just give
the character an item object, but will also inscribe it with a specified
character's name. You may not inscribe items with arbitrary strings, only with
names of characters that actually exist. While this isn't said anywhere
specifically, apparently, named items may not have cards in them, slots or no -
these data slots are taken by the character ID who's name is inscribed. Only one
remains free and it's not quite clear if a card may be there.

This function will return 1 if an item was successfully created and 0 if it
wasn't for whatever reason. Like 'getitem', this function will also accept an
'english name' from the item database as an item name and will return 0 if no
such item exists.

---------------------------------------

*getitemslots(<item ID>)

This function will look up the item with the specified ID number in the database
and return the number of slots this kind of items has - 0 if they are not
slotted. It will also be 0 for all non-equippable items, naturally, unless
someone messed up the item database. It will return -1 if there is no such item.

Example:

//.@slots now has the amount of slots of the item with ID 1205.
	.@slots = getitemslots(1205);

---------------------------------------

*getiteminfo(<item ID>,<type>)
*getiteminfo(<item name>,<type>)
*getiteminfo(<aegis item name>,<type>)

This function will look up the item with the specified ID number in the database
and return the info set by TYPE argument.
It will return -1 if there is no such item or "" if the aegis item name is requested.

Valid types are:
	ITEMINFO_BUY             (0)   -  Buy Price
	ITEMINFO_SELL            (1)   -  Sell Price
	ITEMINFO_TYPE            (2)   -  Type
	ITEMINFO_MAXCHANCE       (3)   -  maxchance (max drop chance of this item, e.g. 1 = 0.01%)
		                        if = 0, then monsters don't drop it at all (rare or a quest item)
		                        if = 10000, then this item is sold in NPC shops only
	ITEMINFO_GENDER          (4)   -  Gender
	ITEMINFO_LOCATIONS       (5)   -  Location(s)
	ITEMINFO_WEIGHT          (6)   -  Weight
	ITEMINFO_ATTACK          (7)   -  ATK
	ITEMINFO_DEFENSE         (8)   -  DEF
	ITEMINFO_RANGE           (9)   -  Range
	ITEMINFO_SLOT           (10)   -  Slot
	ITEMINFO_VIEW           (11)   -  View
	ITEMINFO_EQUIPLEVELMIN  (12)   -  equipment LV
	ITEMINFO_WEAPONLEVEL    (13)   -  weapon LV
	ITEMINFO_ALIASNAME      (14)   -  AliasName
	ITEMINFO_EQUIPLEVELMAX  (15)   -  equipment LV Max
	ITEMINFO_MAGICATTACK    (16)   -  matk if RENEWAL is defined
	ITEMINFO_ID             (17)   -  item ID
	ITEMINFO_AEGISNAME      (18)   -  aegis item name
	ITEMINFO_ARMORLEVEL     (19)   -  armor LV
	ITEMINFO_SUBTYPE        (20)   -  Subtype

See the sample in 'doc/sample/getiteminfo.txt'.

---------------------------------------

*getequipcardid(<equipment slot>,<card slot>)

Returns value from equipped item slot in the indicated slot (0, 1, 2, or 3).

This function returns CARD ID, CARD0_FORGE, CARD0_CREATE, or CARD0_PET (for card 0, if the item is produced).
It's useful for when you want to check whether an item contains cards or if it's signed.

---------------------------------------

*mergeitem({,<char_id>});

Open merge item window to merge available item can be merged.

Examples
1. See the NPC 'npc/re/other/merge_item.txt'.
2. Simple usage:
    mes "Let's check if any item can be merged.";
    close2;
    mergeitem;
    end;

---------------------------------------

*mergeitem2({<item_id>{,<char_id>}});
*mergeitem2({"<item name>"{,<char_id>}});

Merge all stackable items that separated by GUID flags
(UniqueId in item_db or in item_group).
If no item ID/name given, all possible items in player's inventory will be merged.

---------------------------------------

*getequiptradability(<equipment slot>{,<char id>});

Returns true if the item in <equipment slot> is tradable.
Returns false otherwise.

---------------------------------------

*identifyall({<type>{,<account_id>}});

Returns the count of unidentified items in the player inventory.
If <type> is true the command will identify all the unidentified items as well (default).
If <type> is false the command only returns the count of unidentified items.

---------------------------------------

*getenchantgrade({<equipment slot>,<char_id>})

This function will return the enchantgrade of the equipment from which the
function is called or the specified equipment slot. If nothing is
equipped there, it returns -1.

Valid equipment slots are:

EQI_COMPOUND_ON      - Item slot that calls this script (In context of item script) (default)

For a list of others equipment slots see 'getequipid'.

---------------------------------------

*getitempos()

This function will return the equip position of the equipment from which the
function is called. (see EQP_* constants)

This function is intended for use in item scripts.

---------------------------------------
//
2,1.- End of item-related commands.
//
---------------------------------------

*getmapxy("<variable for map name>",<variable for x>,<variable for y>{,<type>,"<search value>"})

This function will locate a character object, NPC object or pet's coordinates
and place their coordinates into the variables specified when calling it. It
will return 0 if the search was successful, and -1 if the parameters given were
not variables or the search was not successful.

Type is the type of object to search for:

	BL_PC   - Character object (default)
	BL_NPC  - NPC object
	BL_PET  - Pet object
	BL_HOM  - Homunculus object
	BL_MER  - Mercenary object
	BL_ELEM - Elemental object

The search value is optional. If it is not specified, the location of the
invoking character will always be returned for types BL_PC and BL_PET,
the location of the NPC running this function for type BL_NPC.

If a search value is specified, for types BL_PC and BL_NPC, the
character or NPC with the specified name or GID will be located.

If type is BL_PET/BL_HOM/BL_MER/BL_ELEM, the search
will locate the current object of the character who's name/GID is given in the
search value, it will NOT locate the object by name.

Example:

    prontera,164,301,3%TAB%script%TAB%Meh%TAB%730,{
        mes "My name is Meh. I'm here so that Nyah can find me.";
        close;
    }

    prontera,164,299,3%TAB%script%TAB%Nyah%TAB%730,{
        mes "My name is Nyah.";
        mes "I will now search for Meh all across the world!";
        if (getmapxy(.@mapname$, .@mapx, .@mapy, BL_NPC, "Meh") != 0) {
                mes "I can't seem to find Meh anywhere!";
                close;
        }
        mes "And I found him on map " + .@mapname$ + " at X:" + .@mapx + " Y:" + .@mapy + " !";
        close;
   }

Notice that NPC objects disabled with 'disablenpc' will still be located.

---------------------------------------

*mapid2name(<map ID>)

Returns the map name of the given map ID. Returns an empty string if given
map ID doesn't exist.

---------------------------------------

*getgmlevel({<char_id>})

This function will return the (GM) level associated with the player group to which
the invoking character belongs. If this is somehow executed from a console command,
99 will be returned, and 0 will be returned if the account has no GM level.

This allows you to make NPC's only accessible for certain GM levels, or behave
specially when talked to by GMs.

   if (getgmlevel()) mes "What is your command, your godhood?";

---------------------------------------

*getgroupid({<char_id>})

This function will return the group id to which the invoking player belongs.

---------------------------------------

*gettimetick(<tick type>)

This function will return a tick depending on <tick type>:
 0: The server's tick, a measurement in milliseconds used by the server's timer
    system. This tick is an unsigned int which loops every ~50 days.
 1: The time, in seconds, since the start of the current day.
 2: The system time in UNIX epoch time, or the number of seconds elapsed since
    January 1st, 1970. Useful for reliably measuring time intervals.

---------------------------------------

*gettime(<type>)

This function will return specified information about the current system time.

DT_SECOND - Seconds (of the current minute)
DT_MINUTE - Minutes (of the current hour)
DT_HOUR - Hour (of the current day)
DT_DAYOFWEEK - Week day (constants for MONDAY to SUNDAY are available)
DT_DAYOFMONTH - Day of the current month
DT_MONTH - Month (constants for JANUARY to DECEMBER are available)
DT_YEAR - Year
DT_DAYOFYEAR - Day of the year
DT_YYYYMMDD - current date in the form YYYYMMDD

It will only return numbers. If another type is supplied -1 will be returned.

	if (gettime(DT_DAYOFWEEK) == SATURDAY) mes "It's a Saturday. I don't work on Saturdays.";

---------------------------------------

*gettimestr(<"time format">,<max length>{,<time_tick>})

This function will return a string containing time data as specified by the
time format.

This uses the C function 'strfmtime', which obeys special format characters. For
a full description see, for example, the description of 'strfmtime' at
http://www.delorie.com/gnu/docs/glibc/libc_437.html
All the format characters given in there should properly work.
Max length is the maximum length of a time string to generate.

The example given in rAthena sample scripts works like this:

  mes gettimestr("%Y-%m/%d %H:%M:%S",21);

The example above will print the current date and time like 'YYYY-MM/DD HH:MM:SS'.
The following example will print the date and time when the player's VIP status
expires by the given <time_tick>:

  mes gettimestr("%Y-%m/%d %H:%M:%S",21,vip_status(VIP_STATUS_EXPIRE));

---------------------------------------

*getusers(<type>)

This function will return a number of users on a map or the whole server. What
it returns is specified by Type.

Type can be one of the following values, which control what will be returned:

    0 - Count of all characters on the map of the invoking character.
    1 - Count of all characters in the entire server.
    8 - Count of all characters on the map of the NPC the script is
        running in.

---------------------------------------

*getmapusers("<map name>")

This function will return the number of users currently located on the specified
map.

This is used officially in PVP scripts to check whether a room is filled to capacity.

---------------------------------------

*getareausers("<map name>",<x1>,<y1>,<x2>,<y2>)

This function will return the count of connected characters which are located
within the specified area - an x1/y1-x2/y2 square on the specified map.

This is useful for maps that are split into many buildings, such as all the
"*_in" maps, due to all the shops and houses.

---------------------------------------

*getunits(<type>{,<array_variable>[<first value>]})
*getmapunits(<type>,<"map name">{,<array_variable>[<first value>]})
*getareaunits(<type>,<"map name">,<x1>,<y1>,<x2>,<y2>{,<array_variable>[<first value>]})

The 'getunits' command will return the number of <type> objects active on the server.

The 'getmapunits' command will return the number of <type> objects active on the
specified <"map name">.

The 'getareaunits' command will return the number of <type> objects actively located
within the specified area where <x1>, <y1>, <x2>, <y2> form the area.

Type is the type of object to search for:

	BL_PC   - Character objects
	BL_MOB  - Monster objects
	BL_PET  - Pet objects
	BL_HOM  - Homunculus objects
	BL_MER  - Mercenary objects
	BL_NPC  - NPC objects
	BL_ELEM - Elemental objects

If <array_variable> is provided:
	- An int variable will return the list of GID.
	- A string variable will return the list of names.

Example 1:
	// getting the players count and building a string array of the names.
	.@num = getunits(BL_PC,.@array$[0]);

	mes "the number of Users Connected to the server is " + .@num + " .";
	mes "list of Players names :";
	freeloop(1);	// for if the list was too big.
	for(.@i=0;.@i<getarraysize(.@array$);.@i++)
		mes (.@i + 1) + " " + .@array$[.@i];
	freeloop(0);
	end;

Example 2:
	// getting the npc count in Prontera and building a string array of the names.
	.@num = getmapunits(BL_NPC,"prontera",.@array$[0]);

	mes "the number of NPCs in Prontera is " + .@num + " .";
	mes "list of NPCs name :";
	freeloop(1);	// for if the list was too big.
	for(.@i=0;.@i<getarraysize(.@array$);.@i++)
		mes (.@i + 1) + " " + .@array$[.@i];
	freeloop(0);
	end;

Example 3:
	// getting the monster count in Prontera with specific coordinates and building a int array of the GIDs.
	.@num = getareaunits(BL_MOB,"prontera",154,186,159,182,.@array[0]);

	mes "the number of Monsters in Prontera in that Coordinates is " + .@num + " .";
	mes "list of Monsters GID :";
	freeloop(1);	// for if the list was too big.
	for(.@i=0;.@i<getarraysize(.@array);.@i++)
		mes (.@i + 1) + " " + .@array[.@i];
	freeloop(0);
	end;

---------------------------------------
\\
2,2.- Guild-related commands
\\
---------------------------------------

*getguildname(<guild id>)

This function returns a guild's name given an ID number. If there is no such
guild, "null" will be returned.

Example:
	mes "The guild " + getguildname(10007) + " are all nice people.";

---------------------------------------

*getguildmember <guild id>{,<type>{,<array_variable>}};

This command will find all members of a specified guild and returns their names
(or character id or account id depending on the value of "type") into an array
of temporary global variables.

Upon executing this,

$@guildmembername$[] is a global temporary string array which contains all the
                     names of these guild members.
                     (only set when type is 0 or not specified)

$@guildmembercid[]   is a global temporary number array which contains the
                     character id of these guild members.
                     (only set when type is 1)

$@guildmemberaid[]   is a global temporary number array which contains the
                     account id of these guild members.
                     (only set when type is 2)

$@guildmembercount   is the number of guild members that were found.

The guild members will be found regardless of whether they are online or offline.
Note that the names come in no particular order.

Be sure to use $@guildmembercount to go through this array, and not
'getarraysize', because it is not cleared between runs of 'getguildmember'.

If 'array_variable' is set, the result will be stored to that variable instead
using global variable.

For usage examples, see 'getpartymember'.

---------------------------------------

*getguildmaster(<guild id>)

This function return the name of the master of the guild which has the specified
ID number. If there is no such guild, "null" will be returned.

Example 1:
	// Prints the guild master of guild 10007, whoever that might be.
	mes getguildmaster(10007) + " runs " + getguildname(10007);

Example 2:
	// Checks if the character is the guild master of the specified guild.
	.@GID = getcharid(2);
	if (.@GID == 0) {
		mes "Sorry, you are not in a guild.";
		close;
	}
	if (strcharinfo(0) != getguildmaster(.@GID)) {
		mes "Sorry, you don't own the guild you are in.";
		close;
	}
	mes "Welcome, guild master of " + getguildname(.@GID);
	close;

---------------------------------------

*getguildmasterid(<guild id>)

This function will return the character ID number of the guild master of the
guild specified by the ID. 0 if the character is not a guild master of any guild.

---------------------------------------

*is_guild_leader({<guild ID>})

This command will return true if the player attached to the script is the leader
of his/her guild, or, if a guild ID is specified, of that guild.

---------------------------------------

*getcastlename("<map name>")

This function returns the name of the castle when given the map name for that
castle. The data is read from 'db/castle_db.yml'.

---------------------------------------

*getcastledata("<map name>",<type of data>)
*setcastledata "<map name>",<type of data>,<value>;

This function returns the castle ownership information for the castle referred
to by its map name. Castle information is stored in `guild_castle` SQL table.

Types of data correspond to `guild_castle` table columns:

CD_GUILD_ID          - Guild ID.
CD_CURRENT_ECONOMY   - Castle Economy score.
CD_CURRENT_DEFENSE   - Castle Defense score.
CD_INVESTED_ECONOMY  - Number of times the economy was invested in today.
CD_INVESTED_DEFENSE  - Number of times the defense was invested in today.
CD_NEXT_TIME         - unused
CD_PAY_TIME          - unused
CD_CREATE_TIME       - unused
CD_ENABLED_KAFRA     - Is 1 if a Kafra was hired for this castle, 0 otherwise.
CD_ENABLED_GUARDIAN0 - Is 1 if the 1st guardian is present (Soldier Guardian)
CD_ENABLED_GUARDIAN1 - Is 1 if the 2nd guardian is present (Soldier Guardian)
CD_ENABLED_GUARDIAN2 - Is 1 if the 3rd guardian is present (Soldier Guardian)
CD_ENABLED_GUARDIAN3 - Is 1 if the 4th guardian is present (Archer Guardian)
CD_ENABLED_GUARDIAN4 - Is 1 if the 5th guardian is present (Archer Guardian)
CD_ENABLED_GUARDIAN5 - Is 1 if the 6th guardian is present (Knight Guardian)
CD_ENABLED_GUARDIAN6 - Is 1 if the 7th guardian is present (Knight Guardian)
CD_ENABLED_GUARDIAN7 - Is 1 if the 8th guardian is present (Knight Guardian)

All types of data have their meaning determined by War of Emperium scripts,
with exception of:
 - CD_GUILD_ID that is always considered ID of the guild that owns the castle,
 - CD_CURRENT_DEFENSE that is used in Guardians & Emperium HP calculations,
 - CD_ENABLED_GUARDIANX that is always considered to hold guardian presence bits.

The 'setcastledata' command will behave identically, but instead of returning
values for the specified types of accessible data, it will alter them and cause
them to be sent to the char-server for storage.

Changing Guild ID or Castle Defense will trigger additional actions, like
recalculating guardians' HP.

---------------------------------------

*getgdskilllv(<guild id>,<skill id>)
*getgdskilllv(<guild id>,"<skill name>")

This function returns the level of the skill <skill id> of the guild <guild id>.
If the guild does not have that skill, 0 is returned.
If the guild does not exist, -1 is returned.
Refer to 'db/(pre-)re/skill_db.yml' for the full list of skills. (GD_* are guild skills)

---------------------------------------

*requestguildinfo <guild id>{,"<event label>"};

This command requests the guild data from the char server and merrily continues
with the execution. Whenever the guild information becomes available (which
happens instantly if the guild information is already in memory, or later, if it
isn't and the map server has to wait for the char server to reply) it will run
the specified event as in a 'donpcevent' call.

---------------------------------------

*getmapguildusers("<map name>",<guild id>)

Returns the amount of characters from the specified guild on the given map.

Example:

mes "You have " + getMapGuildUsers("prontera",getcharid(2)) + " guild members in Prontera.";

---------------------------------------
//
2,2.- End of guild-related commands
//
---------------------------------------

*getskilllv(<skill id>)
*getskilllv("<skill name>")

This function returns the level of the specified skill that the invoking
character has. If they don't have the skill, 0 will be returned. The full list
of character skills is available in 'db/(pre-)re/skill_db.yml'.

There are two main uses for this function, it can check whether the character
has a skill or not, and it can tell you if the level is high enough.

Example 1:
	if (getskilllv(152))
		mes "You have got the skill Throw Stone";
	else
		mes "You don't have Throw Stone";
	close;

Example 2:
	if (getskilllv(28) >= 5)
		mes "Your heal lvl is 5 or more";
	else if (getskilllv(28) == 10)
		mes "Your heal lvl has been maxed";
	else
		mes "You heal skill is below lvl 5";
	close;

---------------------------------------

*getskilllist({<char_id>});

This command sets a bunch of arrays with a complete list of skills the
invoking character has. Here's what you get:

@skilllist_id[]   - skill ids.
@skilllist_lv[]   - skill levels.
@skilllist_flag[] - see 'skill' for the meaning of skill flags.
@skilllist_count  - number of skills in the above arrays.

While 'getskillv' is probably more useful for most situations, this is the
easiest way to store all the skills and make the character something else for a
while. Advanced job for a day? This could also be useful to see how many
skills a character has.

This command does not count skills which are set as flag 4 (permament granted) (ALL_BUYING_STORE/ALL_INCCARRY)

---------------------------------------

*getrandmobid(<type>{,<flag>{,<level>}})

This command returns a random monster ID from the random monster group.
With <flag> you can apply certain restrictions which monsters of the group can be returned.
Returns 0 if one of the parameters is invalid or no monster could be found with the given parameters.

Valid <type> are:
	MOBG_BRANCH_OF_DEAD_TREE
	MOBG_PORING_BOX
	MOBG_BLOODY_DEAD_BRANCH
	MOBG_RED_POUCH_OF_SURPRISE
	MOBG_CLASSCHANGE
	MOBG_TAEKWON_MISSION
	
Valid <flag> are:
	RMF_NONE            = 0x00 - Apply no flags
	RMF_DB_RATE         = 0x01 - Apply the summon success chance found in the list (otherwise get any monster from the db)
	RMF_CHECK_MOB_LV    = 0x02 - Apply a monster level check
	RMF_MOB_NOT_BOSS    = 0x04 - Selected monster should not be a Boss type (default)
	                           - (except those from MOBG_BLOODY_DEAD_BRANCH)
	RMF_MOB_NOT_SPAWN   = 0x08 - Selected monster must have normal spawn
	RMF_MOB_NOT_PLANT   = 0x10 - Selected monster should not be a Plant type
	RMF_ALL             = 0xFF - Apply all flags
	
---------------------------------------

*getmonsterinfo(<mob ID>,<type>)
*getmonsterinfo(<mob name>,<type>)

This function will look up the monster with the specified <mob ID> or <mob name> in the
mob database and return the info set by <type> argument.
It will return -1 if there is no such monster (or the type value is invalid),
or "null" if you requested the monster's name.

Valid types are:
	MOB_NAME - monster's japanese name, if there is no such monster "null" is returned
	MOB_LV - monster's level
	MOB_MAXHP - monster's maximum hp
	MOB_BASEEXP - monster's base experience
	MOB_JOBEXP - monster's job experience
	MOB_ATK1 - monster's atk
	MOB_ATK2 - monster's atk2
	MOB_DEF - monster's def
	MOB_MDEF - monster's mdef
	MOB_RES - monster's res
	MOB_MRES - monster's mres
	MOB_STR - monster's str
	MOB_AGI - monster's agi
	MOB_VIT - monster's vit
	MOB_INT - monster's int
	MOB_DEX - monster's dex
	MOB_LUK - monster's luk
	MOB_RANGE - monster's range
	MOB_RANGE2 - monster's range2
	MOB_RANGE3 - monster's range3
	MOB_SIZE - monster's size
	MOB_RACE - monster's race
	MOB_ELEMENT - monster's element(doesn't return the element level, only the element ID)
	MOB_MODE - monster's mode
	MOB_MVPEXP - monster's mvp experience
	MOB_ID - monster's ID

For more details, see the sample in 'doc/sample/getmonsterinfo.txt'.

---------------------------------------

*getmobdrops(<mob id>)

This command will find all drops of the specified mob and return the item IDs
and drop percentages into arrays of temporary global variables.
'getmobdrops' returns 1 if successful and 0 if the mob ID doesn't exist.

Upon executing this,

$@MobDrop_item[] is a global temporary number array which contains the
                 item IDs of the monster's drops.

$@MobDrop_rate[] is a global temporary number array which contains the
                 drop percentages of each item. (1 = .01%)

$@MobDrop_nosteal[] is a global temporary number array which contains the
                 StealProtected flag of each item. (default false)

$@MobDrop_randomopt[] is a global temporary number array which contains the
                 random option group ID of each item. (default 0)

$@MobDrop_count is the number of item drops found.

Be sure to use $@MobDrop_count to go through the arrays, and not
'getarraysize', because the temporary global arrays are not cleared between
runs of 'getmobdrops'. If a mob with 7 item drops is looked up, the arrays would
have 7 elements. But if another mob is looked up and it only has 5 item drops,
the server will not clear the arrays for you, overwriting the values instead. So
in addition to returning the 5 item drops, the 6th and 7th elements from the
last call remain, and you will get 5+2 item drops, of which the last 2 don't
belong to the new mob. $@MobDrop_count will always contain the correct number
(5), unlike 'getarraysize()' which would return 7 in this case.

Example:

	// get a Mob ID from the user
	input .@mob_id;

	if (getmobdrops(.@mob_id)) {	// 'getmobdrops' returns 1 on success
		// immediately copy global temporary variables into scope variables,
		// since we don't know when 'getmobdrops' will get called again for
		// another mob, overwriting your global temporary variables
		.@count = $@MobDrop_count;
		copyarray .@item[0],$@MobDrop_item[0],.@count;
		copyarray .@rate[0],$@MobDrop_rate[0],.@count;

		mes getmonsterinfo(.@mob_id,MOB_NAME) + " - " + .@count + " drops found:";
		for( .@i = 0; .@i < .@count; .@i++ ) {
			mes .@item[.@i] + " (" + getitemname(.@item[.@i]) + ") " + .@rate[.@i]/100 + ((.@rate[.@i]%100 < 10) ? ".0":".") + .@rate[.@i]%100 + "%";
		}
	} else {
		mes "Unknown monster ID.";
	}
	close;

---------------------------------------

*skillpointcount({<char_id>})

Returns the total amount of skill points a character possesses (SkillPoint+SP's used in skills)
This command can be used to check the currently attached characters total amount of skill points.
This means the skill points used in skill are counted, and added to SkillPoints (number of skill points not used).
This command does not count skills which are set as flag 4 (permament granted) (ALL_BUYING_STORE/ALL_INCCARRY)

Example 1:
	.@skillPoints = skillpointcount();
	mes "You have " + .@skillPoints + " skill points in total!";

Example 2:
	if (skillpointcount() > 20)
		mes "Wow, you have more then 20 Skill Points in total!";

---------------------------------------

*getscrate(<effect type>,<base rate>{,<GID>})

This function will return the chance of a status effect affecting the invoking
character, in percent, modified by the their current defense against said
status. The 'base rate' is the base chance of the status effect being inflicted,
in percent.

    if (rand(100) > getscrate(Eff_Blind, 50)) goto BlindHimNow;

You can see the full list of available effect types you can possibly inflict in
'src/map/script_constants.hpp' under 'Eff_'.

---------------------------------------

========================
|3.- Checking commands.|
========================
---------------------------------------

*playerattached()

Returns the ID of the player currently attached to the script. It will return
0 if no one is attached, or if the attached player no longer exists on the map
server. It is wise to check for the attached player in script functions that
deal with timers as there's no guarantee the player will still be logged on
when the timer triggers. Note that the ID of a player is actually their
account ID.

---------------------------------------

*getattachedrid();

Returns RID from running script. Script may not be attached to any RID like
a floating script or function and will return 0.

---------------------------------------

*isloggedin(<account id>{,<char id>})

This function returns 1 if the specified account is logged in and 0 if they
aren't. You can also pass the char id to check for both account and char id.

---------------------------------------

*checkweight(<item id>,<amount>{,<item id>,<amount>,<item id>,<amount>,...});
*checkweight("<item name>",<amount>{,"<item name>",<amount>,"<item name>",<amount>,...});
*checkweight2(<id_array>,<amount_array>);

These functions will compute and return 1 if the total weight of the specified
number of specific items does not exceed the invoking character's carrying
capacity, and 0 otherwise. It is important to see if a player can carry the
items you expect to give them, failing to do that may open your script up to
abuse or create some very unfair errors.

The second function will check an array of items and amounts, and also
returns 1 on success and 0 on failure.

The functions, in addition to checking to see if the player is capable of
holding a set amount of items, also ensure the player has room in their
inventory for the item(s) they will be receiving.

Like 'getitem', this function will also accept an 'english name' from the
database as an argument.

Example 1:

	if (checkweight(512,10)) {
		getitem 512,10;
	} else {
		mes "Sorry, you cannot hold this amount of apples!";
	}

Example 2:

	setarray .@item[0],512,513,514;
	setarray .@amount[0],10,5,5;
	if (!checkweight2(.@item,.@amount)) {
		mes "Sorry, you cannot hold this amount of fruit!";
	}

---------------------------------------

*basicskillcheck()

This function will return the state of the configuration option
'basic_skill_check' in 'battle_athena.conf'. It returns 1 if the option is
enabled and 0 if it isn't. If the 'basic_skill_check' option is enabled, which
it is by default, characters must have a certain number of basic skill levels to
sit, request a trade, use emotions, etc. Making your script behave differently
depending on whether the characters must actually have the skill to do all these
things might in some cases be required.

---------------------------------------

*checkoption(<option number>{,<char_id>})
*checkoption1(<option number>{,<char_id>})
*checkoption2(<option number>{,<char_id>})
*setoption <option number>{,<flag>{,<char_id>}};

The 'setoption' series of functions check for a so-called option that is set on
the invoking character. 'Options' are used to store status conditions and a lot
of other non-permanent character data of the yes-no kind. For most common cases,
it is better to use 'checkcart','checkfalcon','checkriding' and other similar
functions, but there are some options which you cannot get at this way. They
return 1 if the option is set and 0 if the option is not set.

Option numbers valid for the first (option) version of this command are:

0x1       - Sight in effect.
0x2       - Hide in effect.
0x4       - Cloaking in effect.
0x8       - Cart number 1 present.
0x10      - Falcon present.
0x20      - Peco Peco present.
0x40      - GM Perfect Hide in effect.
0x80      - Cart number 2 present.
0x100     - Cart number 3 present.
0x200     - Cart number 4 present.
0x400     - Cart number 5 present.
0x800     - Orc head present.
0x1000    - The character is wearing a wedding sprite.
0x2000    - Ruwach is in effect.
0x4000    - Chasewalk in effect.
0x8000    - Flying or Xmas suit.
0x10000   - Sighttrasher.
0x100000  - Warg present.
0x200000  - The character is riding a warg.

Option numbers valid for the second version (opt1) of this command are:

1 - Petrified.
2 - Frozen.
3 - Stunned.
4 - Sleeping.
6 - Petrifying (the state where you can still walk)

Option numbers valid for the third version (opt2) of this command are:

0x1  - Poisoned.
0x2  - Cursed.
0x4  - Silenced.
0x8  - Signum Crucis (plays a howl-like sound effect, but otherwise no visible effects are displayed)
0x10 - Blinded.
0x80 - Deadly poisoned.

Option numbers (except for opt1) are bit-masks - you can add them up to check
for several states, but the functions will return true if at least one of them
is in effect.

'setoption' will set options on the invoking character. There are no second and
third versions of this command, so you can only change the values in the first
list (cloak, cart, ruwach, etc). if flag is 1 (default when omitted),
the option will be added to what the character currently has; if 0, the option is removed.

This is definitely not a complete list of available option flag numbers. Ask a
core developer (or read the source: src/map/status.hpp) for the full list.

---------------------------------------

*setcart {<type>{,<char_id>}};
*checkcart({<char_id>});

If <type> is 0 this command will remove the cart from the character.
Otherwise it gives the invoking character a cart. The cart given will be
cart number <type> and will work regardless of whether the character is a
merchant class or not.
Note: the character needs to have the skill MC_PUSHCART to gain a cart

The accompanying function will return 1 if the invoking character has a cart
(any kind of cart) and 0 if they don't.

    if (checkcart()) mes "But you already have a cart!";

---------------------------------------

*setfalcon {<flag>{,<char_id>}};
*checkfalcon({<char_id>});

If <flag> is 0 this command will remove the falcon from the character.
Otherwise it gives the invoking character a falcon. The falcon will be there
regardless of whether the character is a hunter or not. It will (probably) not
have any useful effects for non-hunters though.
Note: the character needs to have the skill HT_FALCON to gain a falcon

The accompanying function will return 1 if the invoking character has a falcon
and 0 if they don't.

    if (checkfalcon()) mes "But you already have a falcon!";

---------------------------------------

*setriding {<flag>{,<char_id>}};
*checkriding({<char_id>});

If <flag> is 0 this command will remove the mount from the character.
Otherwise it gives the invoking character a PecoPeco (if they are a Knight
series class), a GrandPeco (if they are a Crusader series class), or
a Gryphon (if they are a Royal Guard). Unlike 'setfalcon' and 'setcart'
this will not work at all if they aren't of a class which can ride.
Note: the character needs to have the skill KN_RIDING to gain a mount

The accompanying function will return 1 if the invoking character is riding a
bird and 0 if they aren't.

    if (checkriding()) mes "PLEASE leave your bird outside! No riding birds on the floor here!";

---------------------------------------

*setdragon {<color>{,<char_id>}};
*checkdragon({<char_id>});

The 'setdragon' function toggles mounting a dragon for the invoking character.
It will return 1 if successful, 0 otherwise.

The available colors are:
 1 - Green Dragon (default)
 2 - Brown Dragon
 3 - Gray Dragon
 4 - Blue Dragon
 5 - Red Dragon

Note: the character must be a Rune Knight and have the skill RK_DRAGONTRAINING to gain a mount

The accompanying function will return 1 if the invoking character is riding a
dragon and 0 if they aren't.

---------------------------------------

*setmadogear {<flag>{,<type>{,<char_id>}}};
*checkmadogear({<char_id>});

If <flag> is false this command will remove the mount from the character.
Otherwise it gives the invoking character a Mado (if they are a Mechanic and have the skill NC_MADOLICENCE).

When using client version PACKETVER_MAIN_NUM >= 20191120 or PACKETVER_RE_NUM >= 20191106
the <type> flag can be used to specify a specific madogear.
Types:
	MADO_ROBOT (default)
	MADO_SUIT

The accompanying function will return 1 if the invoking character has a
Mado and 0 if they don't.

---------------------------------------

*setmounting {<char_id>};
*ismounting({<char_id>});

The 'setmounting' function toggles cash mount for the invoking character.
It will return 1 if successful, 0 otherwise.

Note: Character must not be mounting a non-cash mount (eg. dragon, peco, wug, etc.)

The accompanying function will return 1 if the invoking character has a
cash mount and 0 if they don't.

---------------------------------------

*checkwug({<char_id>});

This function will return 1 if the invoking character has a
warg and 0 if they don't.

---------------------------------------

*checkvending({"<Player Name>"})

Checks if the player is vending or has has a buyingstore. Additionally
it gives you the information whether the player uses autotrade or not.
Name is optional, and defaults to the attached player if omitted.

The returned value is bitmask of.
  0 = doesn't have a vending or buyingstore (which also means he can't use autotrade)
  1 = normal vending
  2 = using @autotrade
  4 = has a buyingstore

Examples:
	//This will check Aaron's state
	.@state = checkvending("Aaron");
	if (.@state&1)
		mes "Aaron is currently vending!";
	if (.@state&4)
		mes "Aaron has a buying store!";
	if (.@state&2)
		mes "Aaron is autotrading!";

---------------------------------------

*checkchatting({"<Player Name>"})

Checks if the player is in a chatroom.
Name is optional, and defaults to the attached player if omitted.
Returns 1 if they are in a chat room, 0 if they are not.

Examples:
	//This will check if the attached player in a chat room or not.
	if (checkchatting())
		mes "You are currently in a chat room!";

---------------------------------------

*checkidle({"<Player Name>"})

Returns the time, in seconds, that the specified player has been idle.
Name is optional, and defaults to the attached player if omitted.

---------------------------------------

*checkidlehom({"<Player Name>"})

Returns the time, in seconds, that the specified player has been idle for homunculus item/exp share.
Name is optional, and defaults to the attached player if omitted.
This will only work if 'hom_idle_no_share' and 'idletime_hom_option' are enabled (see '/conf/battle/homunc.conf').

---------------------------------------

*checkidlemer({"<Player Name>"})

Returns the time, in seconds, that the specified player has been idle for mercenary item share.
Name is optional, and defaults to the attached player if omitted.
This will only work if 'mer_idle_no_share' and 'idletime_mer_option' are enabled (see '/conf/battle/drops.conf').

---------------------------------------

*agitcheck()
*agitcheck2()
*agitcheck3()

These function will let you check whether the server is currently in WoE:FE mode
(agitcheck()), WoE:SE mode (agitcheck2()), or WoE:TE mode (agitcheck3()) and will
return true if War of Emperium is on and false if it isn't.

---------------------------------------

*isnight()
*isday()

These functions will return 1 or 0 depending on whether the server is in night
mode or day mode. 'isnight' returns 1 if it's night and 0 if it isn't, 'isday'
the other way around. They can be used interchangeably, pick the one you like
more:

    // These two are equivalent:
    if (isday()) mes "I only prowl in the night.";
    if (isnight() != 1) mes "I only prowl in the night.";

---------------------------------------

*checkre(<type>)

Checks if a renewal feature is enabled or not in renewal.hpp, and returns 1 if
enabled and 0 for disabled.

The renewal feature to check is determined by the number <type>.
 0 - RENEWAL enabled (game renewal server mode)
 1 - RENEWAL_CAST (renewal cast time)
 2 - RENEWAL_DROP (renewal drop rate algorithms)
 3 - RENEWAL_EXP (renewal exp rate algorithms)
 4 - RENEWAL_LVDMG (renewal level modifier on damage)
 5 - RENEWAL_ASPD (renewal ASPD)

---------------------------------------
\\
3,1.- Item-related commands
\\
---------------------------------------

*isequipped(<id>{,<id>{,..}})

This function will return 1 if the invoking character has all of the item
IDs given equipped (if item/card IDs are passed, then it checks if the items/cards are
inserted into slots in the equipment they are currently wearing). Theoretically
there is no limit to the number of items that may be tested for at the same time.
If even one of the items given is not equipped, 0 will be returned.

    // (Poring,Santa Poring,Poporing,Marin)
    if (isequipped(4001,4005,4033,4196)) mes "Wow! You're wearing a full complement of possible poring cards!";
    // (Poring)
    if (isequipped(4001)) mes "A poring card is useful, don't you think?";

The function was meant for item scripts to support the cards released by Gravity
in February 2005, but it will work just fine in normal NPC scripts.

---------------------------------------

*isequippedcnt(<id>{,<id>{,..}})

This function is similar to 'isequipped', but instead of 1 or 0, it will return
the amount of item/card equipped that were found on the invoking character from the given list.

Example:
    if (isequippedcnt(4001,4005,4033,4196) == 5)
		mes "Finally got 5 cards from poring monsters type?";

---------------------------------------

*checkequipedcard(<item id>)

This function will return 1 if the item/card specified by its item ID number is
inserted into any equipment they have in their inventory, currently equipped or
not.

---------------------------------------
//
3,1.- End of item-related commands
//
---------------------------------------

==============================
|4.- Player-related commands.|
==============================
---------------------------------------

*attachrid(<account ID>{,force})
*detachrid;

These commands allow the manipulation of the script's currently attached player.
While 'attachrid' allows attaching of a different player by using its account id
for the parameter RID, 'detachrid' makes the following commands run as if the
script was never invoked by a player.

The command returns false if the player cannot be attached (if the account is offline
or does not exist), and true upon success.

By default the command is executed with force, which causes to attach the player
even if he is currently attached to another script. Since this is not always the
desired behavior you can also specify false to the command and it will only return 
true if the player is online and was not attached to another script.

---------------------------------------

*addrid(<type>{,<flag>{,<parameters>}});

This command will attach other RIDs to the current script without detaching the
invoking RID. It returns 1 if successful and 0 upon failure.

<type> determines what RIDs are attached:
 0: All players in the server.
 1: All players in the map of the invoking player, or the invoking NPC if no player is attached.
 2: Party members of a specified party ID.
    [ Parameters: <party id> ]
 3: Guild members of a specified guild ID.
    [ Parameters: <guild id> ]
 4: All players in a specified area of the map of the invoking player (or NPC).
    [ Parameters: <x0>,<y0>,<x1>,<y1> ]
 5: All players in the map.
    [ Parameters: "<map name>" ]
 Account ID: If type is Account ID, attach the specified account ID.

<flag> can prevent certain players from being attached:
 0: Players are always attached. (default)
 1: Players currently running another script will not be attached.

---------------------------------------

*rid2name(<rid>)

Converts rid to name. Note: The player/monster/NPC must be online/enabled.
Good for PCKillEvent where you can convert 'killedrid' to the name of the player.

Note: rid2name may not produce correct character names since rid = account id.
      It will return the current online character of the account only.

---------------------------------------

*message "<character name>","<message>";

That command will send a message to the chat window of the character specified
by name. The text will also appear above the head of that character. It will not
be seen by anyone else.

---------------------------------------

*dispbottom "<message>"{,<color>{,<char_id>}};

This command will send the given message with color into the invoking character's chat
window. The color format is in RGB (0xRRGGBB). The color is
by default green

---------------------------------------

*showscript "<message>"{,<GID>, <flag>};

Makes attached player or GID says a message like shouting a skill name, the message
will be seen to everyone around but not in chat window.
flag: Specify target
   AREA - Message is sent to players in the vicinity of the source (default).
   SELF - Message is sent only to player attached.

---------------------------------------

*warp "<map name>",<x>,<y>{,<char id>};

This command will take the invoking character or <char id>, if specified, to the specified map, and if
wanted, specified coordinates too, but these can be random.

	warp "place",50,55;

This would take them to X 50 Y 55 on the map called "place". If your X and Y
coordinates land on an unwalkable map square, it will send the warped character
to a random place. Same will happen if they are both zero:

	warp "place",0,0;

Notice that while warping people to coordinates 0,0 will normally get them into
a random place, it's not certain to always be so. Darned if I know where this is
actually coded, it might be that this happens because square 0,0 is unwalkable
on all official maps. If you're using custom maps, beware.

There are also three special 'map names' you can use.

"Random" will warp the player randomly on the current map.
"Save" and "SavePoint" will warp the player back to their save point.

---------------------------------------

*areawarp "<from map name>",<x1>,<y1>,<x2>,<y2>,"<to map name>",<x3>,<y3>{,<x4>,<y4>};

This command is similar to 'warp', however, it will not refer to the invoking
character, but instead, all characters within a specified area, defined by the
x1/y1-x2/y2 square, will be warped. Nobody outside the area will be affected,
including the activating character, if they are outside the area.

	areawarp "place",10,10,120,120,"place2",150,150;

Everyone that is in the area between X 10 Y 10 and X 120 Y 120, in a square
shape, on the map called "place", will be affected, and warped to "place2" X 150
Y 150

	areawarp "place",10,10,120,120,"place2",0,0;

By using ,0,0; as the destination coordinates it will take all the characters in
the affected area to a random set of co-ordinates on "place2".

	areawarp "place",10,10,120,120,"place2",150,150,200,200;

By using the optional x4 and y4 parameters, the destination coordinates will be a
random place within the defined x3/y3-x4/y4 square.

Like 'warp', areawarp will also explicitly warp characters randomly into the
current map if you give the 'to map name' as "Random".

See also 'warp'.

---------------------------------------

*warpparty "<to_mapname>",<x>,<y>,<party_id>,{"<from_mapname>",<range x>,<range y>};

Warps a party to specified map and coordinate given the party ID, which you can get with
getcharid(1). You can also request another party id given a member's name with getcharid(1,<player_name>).

You can use the following "map names" for special warping behavior:
Random:       All party members are randomly warped in their current map (as if they
              all used a fly wing)
SavePointAll: All party members are warped to their respective save point.
SavePoint:    All party members are warped to the save point of the currently
              attached player (will fail if there's no player attached).
Leader:       All party members are warped to the leader's position. The leader must
              be online and in the current map-server for this to work.
RandomAll:    All party members are warped to the same random position in their current map

If you specify a from_mapname, 'warpparty' will only affect those on that map.

The <range x> and <range y> optional values allow for a randomization with the
player's warp point. The values will randomly add or subtract from the given <x>
and <y> coordinates.

Example:
	mes "[Party Warper]";
	mes "Here you go!";
	close2;
	.@party_id = getcharid(1);
	warpparty "prontera",150,100,.@party_id;
	close;

---------------------------------------

*warpguild "<map name>",<x>,<y>,<guild_id>;

Warps a guild to specified map and coordinate given the guild id, which you can get with
getcharid(2). You can also request another guild id given the member's name with getcharid(2,<player_name>).

You can use the following "map names" for special warping behavior:
Random:       All guild members are randomly warped in their current map (as if they
              all used a fly wing)
SavePointAll: All guild members are warped to their respective save point.
SavePoint:    All guild members are warped to the save point of the currently
              attached player (will fail if there's no player attached).

Example:

warpguild "prontera",x,y,Guild_ID;

---------------------------------------

*warppartner("<map name>",<x>,<y>);

This function will find the invoking character's marriage partner, if any, and
warp them to the map and coordinates given. It will return 1 upon success and
0 if the partner is not online, the character is not married, or if there's no
invoking character (no RID). 0,0 will, as usual, normally translate to random coordinates.

---------------------------------------

*savepoint "<map name>",<x>,<y>{,{<range x>,<range y>,}<char_id>};
*save "<map name>",<x>,<y>{,{<range x>,<range y>,}<char_id>};

These commands save where the invoking character will return to upon clicking
"Return to Save Point", after death and in some other cases. The two versions are
equivalent. They ignore any and all mapflags, and can make a character respawn where
no teleportation is otherwise possible.

The <range x> and <range y> optional values allow for a randomization with the
player's save point. The values will randomly add or subtract from the given <x>
and <y> coordinates.

	savepoint "place",350,75;
	savepoint "place",350,75,2,2; // Randomly save the character between 348,73 and 352,77

---------------------------------------

*heal <hp>,<sp>{,<char_id>};

This command will heal a set amount of HP and/or SP on the invoking character.

	heal 30000,0; // This will heal 30,000 HP
	heal 0,30000; // This will heal 30,000 SP
	heal 300,300; // This will heal 300 HP and 300 SP

This command just alters the hit points and spell points of the invoking
character and produces no other output whatsoever.

---------------------------------------

*healap <ap>{,<char_id>};

This command will heal a set amount of AP on the invoking character.

	healap 10;  // This will give 10 AP
	healap -10; // This will remove 10 AP

This command just alters the activity points of the invoking
character and produces no other output whatsoever.

---------------------------------------

*itemheal <hp>,<sp>{,<char_id>};

This command heals relative amounts of HP and/or SP on the invoking character.
Unlike heal, this command is intended for use in item scripts. It applies
potion-related bonuses, such as alchemist ranking, cards, and status changes.
When used inside an NPC script, certain bonuses are omitted.

The command also applies a SP/VIT-related bonus:
	heal = heal * [(100 + STATUS*2) / 100]

Example:
	// If the player has 50 vit and no bonuses, this will heal
	// anything from 200 to 300 HP and 5 SP
	itemheal rand(100,150),5;

---------------------------------------

*percentheal <hp>,<sp>{,<char_id>};

This command will heal the invoking character. It heals the character, but not
by a set value - it adds percent of their maximum HP/SP.

	percentheal 100,0; // This will heal 100% HP
	percentheal 0,100; // This will heal 100% SP
	percentheal 50,50; // This will heal 50% HP and 50% SP

So the amount that this will heal will depend on the total amount of HP or SP
you have maximum. Like 'heal', this will not call up any animations or effects.

---------------------------------------

*recovery <type>{,<option>,<revive_flag>{,<map name>}};

This command will revive and fully restore the HP/SP of the selected characters.
It returns 1 upon successful use.

<type> is the target, and determines the <option> parameter:
 0: Player  -> Character ID number
 1: Party   -> Party ID number
 2: Guild   -> Guild ID number
 3: Map     -> Map name (a string)
 4: All     -> None (takes <revive_flag> as option)

If no option is specified, the invoking player's character ID, party ID, guild ID,
or map will be used.

<revive_flag> determines the action:
 1: Revive and heal all players (default)
 2: Heal living players only
 4: Revive dead players only

<map name> can optionally be used to define a single map to execute the command on
for types 1 (party) and 2 (guild).

Examples:
	// Only revive characters in invoking party on map "morocc"
	recovery 1,getcharid(1),4,"morocc";

	// Fully heal (don't revive) all members of invoking character's guild
	recovery 2,getcharid(2),2;

	// Revive and fully heal everyone in map "prontera"
	recovery 3,"prontera";

	// Only revive all dead characters on server
	recovery 4,4;

---------------------------------------

*jobchange <job number>{,<upper flag>,<char_id>};

This command will change the job class of the invoking character.

	jobchange 1; // This would change your player into a Swordman
	jobchange 4002; // This would change your player into a Swordman High

This command does work with numbers, but you can also use job names. The full
list of job names and the numbers they correspond to can be found in
'src/map/script_constants.hpp'.

	// This would change your player into a Swordman
	jobchange Job_Swordman;
	// This would change your player into a Swordman High
	jobchange Job_Swordman_High;

'upper flag' can alternatively be used to specify the type of job one changes
to. For example, jobchange Job_Swordman,1; will change the character to a high
swordsman. The upper values are:
-1 (or when omitted): preserves the current job type.
0: Normal/standard classes
1: High/Advanced classes
2: Baby classes

This command will also set a permanent character-based variable
'jobchange_level' which will contain the job level at the time right before
changing jobs, which can be checked for later in scripts.

---------------------------------------

*jobname(<job number>)

This command retrieves the name of the given job using the map_msg entries 550->655.

	mes "[Kid]";
	mes "I never thought I'd met a " + jobname(Class) + " here of all places.";
	close;

---------------------------------------

*eaclass({<job number>,<char_id>})

This commands returns the "eA job-number" corresponding to the given class, and
uses the invoking player's class if none is given. The eA job-number is also a
class number system, but it's one that comes with constants which make it easy
to convert among classes. The command will return -1 if you pass it a job number
which doesn't have an eA job-number equivalent.

	.@eac = eaclass();
	if ((.@eac&EAJ_BASEMASK) == EAJ_SWORDMAN)
		mes "Your base job is Swordman.";
	if (.@eac&EAJL_UPPER)
		mes "You are a rebirth job.";
	if ((.@eac&EAJ_UPPERMASK) == EAJ_SWORDMAN)
		mes "You must be a Swordman, Baby Swordman or High Swordman.";

For more information on the eA Job System, see the docs/ea_job_system.txt file.

---------------------------------------

*roclass(<job number>{,<gender>})

Does the opposite of eaclass. That is, given an eA job-number, it returns the
corresponding RO class number. A gender is required because both Bard and Dancers
share the same eA job-number (EAJ_BARDDANCER), and uses the invoking player's
gender if none is given (if no player is attached, male will be used by default).
The command will return -1 if there is no valid class to represent the specified
job (for example, if you try to get the baby version of a Taekwon class).

	.@eac = eaclass();
	//Check if class is already rebirth
	if (.@eac&EAJL_UPPER) {
		mes "You look strong.";
		close;
	}
	.@eac = roclass(.@eac|EAJL_UPPER);
	//Check if class has a rebirth version
	if (.@eac != -1) {
		mes "Bet you can't wait to become a " + jobname(.@eac) + "!";
		close;
	}

---------------------------------------

*changebase <job ID number>{,<account ID>};

This command will change a character's appearance to that of the specified job
class. Nothing but appearance will change.

The command will run for the invoking character unless an account ID is given.

	changebase Job_Novice; // Changes player to Novice sprite.
	changebase Class; // Changes player back to default sprite.

---------------------------------------

*classchange(<view id>{,"<NPC name>","<flag>"});

This command is very ancient, its origins are clouded in mystery.
It will send a 'display id change' packet to everyone in the immediate area of
the NPC object, which will supposedly make the NPC look like a different sprite,
an NPC sprite ID, or a monster ID. This effect is not stored anywhere and will
not persist (Which is odd, cause it would be relatively easy to make it do so)
and most importantly, will not work at all since this command was broken with
the introduction of advanced classes. The code is written with the assumption
that the lowest sprite IDs are the job sprites and the anything beyond them is
monster and NPC sprites, but since the advanced classes rolled in, they got the
ID numbers on the other end of the number pool where monster sprites float.

As a result it is currently impossible to call this command with a valid view
id. It will do nothing whatsoever if the view ID is below 4047. Getting it to
run will actually just crash the client.

It could be a real gem if it can be gotten to actually do what it's supposed to
do, but this will only happen in a later SVN revision.

Empty <NPC name> means attached NPC.

Target for <flag>:
- bc_area : Sprite is sent to players in the vicinity of the source (default value).
- bc_self : Sprite is sent only to player attached.

---------------------------------------

*changesex({<char_id>});

This command will change the gender for the attached character's account. If it
was male, it will become female, if it was female, it will become male. The
change will be written to the character server, the player will receive the
message: "Need disconnection to perform change-sex request..." and the player
will be immediately kicked to the login screen. When they log back in, they will
be the opposite sex.

If there are any Dancer/Gypsy or Bard/Clown characters on the account,
they will also have their skills reset upon 'changesex'.

---------------------------------------

*changecharsex({<char_id>});

This command will change the gender of the attached character. If it
was male, it will become female, if it was female, it will become male. The
change will be written to the character server, the player will receive the
message: "Need disconnection to perform change-sex request..." and the player
will be immediately kicked to the login screen. When they log back in, they will
be the opposite sex.

If the character being changed is a Dancer/Gypsy or Bard/Clown class type,
the character will also have their skills reset upon 'changecharsex'.

---------------------------------------

*getexp <base_exp>,<job_exp>{,<char_id>};

This command will give the invoking character a specified number of base and job
experience points. Used for a quest reward. Negative values won't work.

The EXP values are adjustted by 'quest_exp_rate' config value, VIP bonus, Guild
Tax and EXP boost items such Battle Manual, Bubble Gum, or items that have
SC_EXPBOOST or SC_ITEMBOOST.

	getexp 10000,5000;

---------------------------------------

*getexp2 <base_exp>,<job_exp>{,<char_id>};

This command is safety version of 'set' command for BaseExp and JobExp. If using
'set' while the BaseExp or JobExp value is more than 2,147,483,647 (INT_MAX) will
causing overflow error.

Unlike 'getexp', this command ignores the adjustment factors!

---------------------------------------

*getbaseexp_ratio(<percent>{,<base_level>{,char_id});

Returns the amount of base experience representing the given <percent> of the
required base experience at <base_level>. If no base level is specified the base
level of the attached character will be used.

---------------------------------------

*getjobexp_ratio(<percent>{,<job_level>{,char_id});

Returns the amount of job experience representing the given <percent> of the
required job experience at <job_level>. If no job level is specified the job
level of the attached character will be used.

---------------------------------------

*setlook <look type>,<look value>{,<char_id>};
*changelook <look type>,<look value>{,<char_id>};

'setlook' will alter the look data for the invoking character. It is used
mainly for changing the palette used on hair and clothes: you specify which look
type you want to change, then the palette you want to use. Make sure you specify
a palette number that exists/is usable by the client you use.
'changelook' works the same, but is only client side (it doesn't save the look value).

	// This will change your hair color, so that it uses palette 8, what ever your
	// palette 8 is, your hair will use that color

	setlook LOOK_HAIR_COLOR,8;

	// This will change your clothes color, so they are using palette 1, whatever
	// your palette 1 is, your clothes will then use that set of colors.

	setlook LOOK_CLOTHES_COLOR,1;

Here are the possible look types:

 LOOK_BASE - Base sprite
 LOOK_HAIR - Hairstyle
 LOOK_WEAPON - Weapon
 LOOK_HEAD_BOTTOM - Head bottom
 LOOK_HEAD_TOP - Head top
 LOOK_HEAD_MID - Head mid
 LOOK_HAIR_COLOR - Hair color
 LOOK_CLOTHES_COLOR - Clothes color
 LOOK_SHIELD - Shield
 LOOK_SHOES - Shoes
 LOOK_BODY2 - Body style

Whatever 'shoes' means is anyone's guess, ask Gravity - the client does nothing
with this value. It still wants it from the server though, so it is kept, but
normally doesn't do a thing.

Only the look data for hairstyle, hair color and clothes color are saved to the
char server's database and will persist. Body style will also persist if 'save_body_style'
configuration is enabled in '/conf/battle/client.conf'. The rest freely change as the character
puts on and removes equipment, changes maps, logs in and out and otherwise you
should not expect to set them. In fact, messing with them is generally
hazardous, do it at your own risk, it is not tested what will this actually do -
it won't cause database corruption and probably won't cause a server crash, but
it's easy to crash the client with just about anything unusual.

However, it might be an easy way to quickly check for empty view IDs for
sprites, which is essential for making custom headgear.

Since a lot of people have different palettes for hair and clothes, it's
impossible to tell you what all the color numbers are. If you want a serious
example, there is a Stylist script inside the default rAthena installation that
you can look at: 'npc/custom/stylist.txt'

---------------------------------------

*pushpc <direction>,<cells>;

This command will push the currently attached player to given direction by given
amount of square cells. Direction is the same as used when declaring NPCs, and
can be specified by using one of the DIR_* constants (src/map/script_constants.hpp).

The knock-back is not restricted by items or map flags, only obstacles are taken
into account. If there is not enough space to perform the push (e.g. due to a
wall), the character is pushed only up to the obstacle.

	// pushes the character 5 cells in 3 o'clock direction from its
	// current position.
	pushpc DIR_EAST, 5;

---------------------------------------

*recalculatestat;

This command will force a stat recalculation for the attached player.

---------------------------------------

*needed_status_point(<type>,<val>{,<char id>});

Returns the number of stat points needed to change the specified stat <type> by <val>.
If <val> is negative, returns the number of stat points that would be needed to
raise the specified stat from (current value - <val>) to current value.

---------------------------------------

*jobcanentermap("<mapname>"{,<JobID>});

Return true if player (decided by job) can enter the map, false otherwise.

For optional 'JobID', see constant of Job_*, or use player's Class, BaseJob,
and BaseClass. If no player is attached, this param must have a value.

See also db/[pre-]re/job_noenter_map.txt

---------------------------------------

*get_revision()

This command will return the SVN revision number that the server is currently
running on.

	if (get_revision() >= 15000)
		mes "Welcome to rAthena!";

---------------------------------------

*get_githash()

This command will return the Git Hash that the server is currently running on.

	mes "Welcome to rAthena! Git Hash: " + get_githash();

---------------------------------------
\\
4,1.- Item-related commands
\\
---------------------------------------

*getitem <item id>,<amount>{,<account ID>};
*getitem "<item name>",<amount>{,<account ID>};

This command will give an amount of specified items to the invoking character.
If an optional account ID is specified, and the target character is currently
online, items will be created in their inventory instead. If they are not
online, nothing will happen.

In the first and most commonly used version of this command, items are
referred to by their database ID number found inside 'db/item_db.yml'.

	getitem 502,10 // The person will receive 10 apples
	getitem 617,1  // The person will receive 1 Old Violet Box

This transaction is logged if the log script generated transactions option is
enabled.

You may also create an item by its name in the 'english name' field in the
item database:

	getitem "RED_POTION",10;

Which will do what you'd expect. If it can't find that name in the database,
apples will be created anyway. It is often a VERY GOOD IDEA to use it like this.

This is used in pretty much all NPC scripts that have to do with items and
quite a few item scripts. For more examples check just about any official script.

---------------------------------------

*getitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*getitem2 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*getitem3 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*getitem3 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*getitem4 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*getitem4 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};

This command will give an amount of specified items to the invoking character.
If an optional account ID is specified, and the target character is currently
online, items will be created in their inventory instead. If they are not
online, nothing will happen. It works essentially the same as 'getitem' but is
a lot more flexible.

Those parameters that are different from 'getitem' are:

identify    - Whether you want the item to be identified (1) or not (0).
refine      - For how many pluses will it be refined.
              It will not let you refine an item higher than the max refine.
attribute   - Whether the item is broken (1) or not (0).
card1,2,3,4 - If you want a card compound to it, place the card ID number into
              the specific card slot.

Card1-card4 values are also used to store name information for named items, as
well as the elemental property of weapons and armor. You can create a named item
in this manner, however, if you just need a named piece of standard equipment,
it is much easier to the 'getnameditem' function instead.

You will need to keep these values if you want to destroy and then perfectly
recreate a named item, for this see 'getinventorylist'.

If you still want to try creating a named item with this command because
'getnameditem' won't do it for you cause it's too limited, you can do it like
this. Careful, minor magic ahead.

	// First, let's get an ID of a character who's name will be on the item.
	// Only an existing character's name may be there.
	// Let's assume our character is 'Adam' and find his ID.
	.@charid = getcharid(0,"Adam");

	// Now we split the character ID number into two portions with a binary
	// shift operation. If you don't understand what this does, just copy it.
	.@card3 = .@charid & 65535;
	.@card4 = .@charid >> 16;

	// If you're inscribing non-equipment, .@card1 must be 254.
	// Arrows are also not equipment.
	.@card1 = 254;

	// For named equipment, card2 means the Star Crumbs and elemental
	// crystals used to make this equipment. For everything else, it's 0.
	.@card2 = 0;

	// Now, let's give the character who invoked the script some
	// Adam's Apples:
	getitem2 512,1,1,0,0,.@card1,.@card2,.@card3,.@card4;

This wasn't tested with all possible items, so I can't give any promises,
experiment first before relying on it.

To create equipment, continue this example it like this:

	// We've already have card3 and card4 loaded with correct
	// values so we'll just set up card1 and card2 with data
	// for an Ice Stiletto.

	// If you're inscribing equipment, .@card1 must be 255.
	.@card1 = 255;

	// That's the number of star crumbs in a weapon.
	.@sc = 2;

	// That's the number of elemental property of the weapon.
	.@ele = 1;

	// And that's the wacky formula that makes them into
	// a single number.
	.@card2 = .@ele+((.@sc*5)<<8);

	// That will make us an Adam's +2 VVS Ice Stiletto:
	getitem2 1216,1,1,2,0,.@card1,.@card2,.@card3,.@card4;

Experiment with the number of star crumbs - I'm not certain just how much will
work most and what it depends on. The valid element numbers are:

 1 - Ice, 2 - Earth 3 - Fire 4 - Wind.

You can, apparently, even create duplicates of the same pet egg with this
command, creating a pet which is the same, but simultaneously exists in two
eggs, and may hatch from either, although, I'm not sure what kind of a mess will
this really cause.

'getitem3' is advance version of 'getitem2' that also use Item Random Option as additional values.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'getitem4' is advance version of 'getitem3' that also use the grade as additional values.
Valid grades are:
	ENCHANTGRADE_NONE		- No grade
	ENCHANTGRADE_D			- Grade D
	ENCHANTGRADE_C			- Grade C
	ENCHANTGRADE_B			- Grade B
	ENCHANTGRADE_A			- Grade A

Example to get Crimson Weapon with Ghost property:
	// +9 Crimson Dagger [2]
	setarray .@OptID[0],RDMOPT_WEAPON_ATTR_TELEKINESIS;
	setarray .@OptVal[0],0;
	setarray .@OptParam[0],0;
	getitem3 28705,1,1,9,0,0,0,0,0,.@OptID,.@OptVal,.@OptParam;

---------------------------------------

*getitembound <item id>,<amount>,<bound type>{,<account ID>};
*getitembound "<item name>",<amount>,<bound type>{,<account ID>};

This command behaves identically to 'getitem', but the items created will be
bound to the target character as specified by the bound type. All items created
in this manner cannot be dropped, sold, vended, auctioned, or mailed, and in
some cases cannot be traded or stored.

Valid bound types are:
 Bound_Account : Account Bound item
 Bound_Guild   : Guild Bound item
 Bound_Party   : Party Bound item
 Bound_Char    : Character Bound item

---------------------------------------

*getitembound2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>{,<account ID>};
*getitembound2 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>{,<account ID>};
*getitembound3 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*getitembound3 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*getitembound4 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*getitembound4 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<bound type>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};

This command behaves identically to 'getitem2', but the items created will be
bound to the target character as specified by the bound type. All items created
in this manner cannot be dropped, sold, vended, auctioned, or mailed, and in
some cases cannot be traded or stored.

For a list of bound types see 'getitembound'.

'getitembound3' is advance version of 'getitembound2' that also use Item Random Option as additional values.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'getitembound4' is advance version of 'getitembound3' that also use the grade as additional values.
Valid grades are:
	ENCHANTGRADE_NONE		- No grade
	ENCHANTGRADE_D			- Grade D
	ENCHANTGRADE_C			- Grade C
	ENCHANTGRADE_B			- Grade B
	ENCHANTGRADE_A			- Grade A

Example to get Crimson Weapon with Ghost property:
	// +9 Crimson Dagger [2]
	setarray .@OptID[0],RDMOPT_WEAPON_ATTR_TELEKINESIS;
	setarray .@OptVal[0],0;
	setarray .@OptParam[0],0;
	getitembound3 28705,1,1,9,0,0,0,0,0,BOUND_CHAR,.@OptID,.@OptVal,.@OptParam;

---------------------------------------

*getnameditem <item id>,<character name|character ID>;
*getnameditem "<item name>",<character name|character ID>;

Create an item signed with the given character's name.

The command returns 1 when the item is created successfully, or 0 if it fails.
Failure occurs when:
- There is no player attached.
- Item name or ID is not valid.
- The given character ID/name is offline.

Example:

//This will give the currently attached player a Aaron's Apple (if Aaron is online).
	getnameditem "Apple","Aaron";

//Self-explanatory (I hope).
	if (getnameitem("Apple","Aaron")) {
		mes "You now have a Aaron's Apple!";
	}

---------------------------------------

*rentitem <item id>,<time>{,<account_id>};
*rentitem "<item name>",<time>{,<account_id>};

Creates a rental item in the attached character's inventory. The item will expire
in <time> seconds and be automatically deleted. When receiving a rental item,
the character will receive a message in their chat window. The character will
also receive warning messages in their chat window before the item disappears.

When rentals expire it will call the UnEquipScript of the item. This can be used
for special cases such as removing a status change or resetting a variable or state
of the player.

This command can not be used to rent stackable items. Rental items cannot be
dropped, traded, or placed in guild storage. (i.e. trade mask 67)
Note: 'delitem' in an NPC script can still remove rental items.
Note: 'countitem' will not count any item with a rental timer. Use 'rentalcountitem' instead.

---------------------------------------

*rentitem2 <item id>,<time>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account_id>};
*rentitem2 "<item name>",<time>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account_id>};
*rentitem3 <item id>,<time>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account_id>};
*rentitem3 "<item name>",<time>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account_id>};
*rentitem4 <item id>,<time>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account_id>};
*rentitem4 "<item name>",<time>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account_id>};

Creates a rental item in the attached character's inventory. The item will expire
in <time> seconds and be automatically deleted. See 'rentitem' for further details.

See 'getitem2' for an explanation of the expanded parameters.

'rentitem3' is advance version of 'rentitem2' that also use Item Random Option as additional values.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'rentitem4' is advance version of 'rentitem3' that also use the grade as additional values.
Valid grades are:
	ENCHANTGRADE_NONE		- No grade
	ENCHANTGRADE_D			- Grade D
	ENCHANTGRADE_C			- Grade C
	ENCHANTGRADE_B			- Grade B
	ENCHANTGRADE_A			- Grade A

Example to get Crimson Weapon with Ghost property:
	// +9 Crimson Dagger [2]
	setarray .@OptID[0],RDMOPT_WEAPON_ATTR_TELEKINESIS;
	setarray .@OptVal[0],0;
	setarray .@OptParam[0],0;
	rentitem3 28705,(24*60*60),1,9,0,0,0,0,0,.@OptID,.@OptVal,.@OptParam;

---------------------------------------

*makeitem <item id>,<amount>,"<map name>",<X>,<Y>{,<canShowEffect>};
*makeitem "<item name>",<amount>,"<map name>",<X>,<Y>{,<canShowEffect>};

This command will create an item on the specified cell of a map.

As with any dropped items, the items created with this command will disappear after
a period of time. Using an amount greater than 1 will create a single stack of the
given amount, not multiple stacks of 1.

Like 'getitem', it also accepts an 'english name' field from the database and creates
Apples if the name isn't found.
If the map name is given as "this", the map the invoking character is on will be used.
If <canShowEffect> flag is set to true, it will show a pillar effect on the ground when dropped, depending on the item database's DropEffect flag.

---------------------------------------

*makeitem2 <item id>,<amount>,"<map name>",<X>,<Y>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<canShowEffect>};
*makeitem2 "<item name>",<amount>,"<map name>",<X>,<Y>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<canShowEffect>};
*makeitem3 <item id>,<amount>,"<map name>",<X>,<Y>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<canShowEffect>};
*makeitem3 "<item name>",<amount>,"<map name>",<X>,<Y>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<canShowEffect>};
*makeitem4 <item id>,<amount>,"<map name>",<X>,<Y>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<canShowEffect>};
*makeitem4 "<item name>",<amount>,"<map name>",<X>,<Y>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<canShowEffect>};

This command will create an item on the specified cell of a map. See 'makeitem' for
further details.

See 'getitem2' for an explanation of the expanded parameters.

'makeitem3' is advance version of 'makeitem2' that also use Item Random Option as additional values.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'makeitem4' is advance version of 'makeitem3' that also use the grade as additional values.
Valid grades are:
	ENCHANTGRADE_NONE		- No grade
	ENCHANTGRADE_D			- Grade D
	ENCHANTGRADE_C			- Grade C
	ENCHANTGRADE_B			- Grade B
	ENCHANTGRADE_A			- Grade A

Example to get Crimson Weapon with Ghost property:
	// 0.5% chance to get +0 Valkyrie Shield [1]
	// with Neutral Resistance +10% and 5% damage reduction from Demi-Human or Player
	// when Valkyrie Randgris killed
	OnNPCKillEvent:
		if (killedrid == 1751 && rand(0,10000) > 9950) { // Valkyrie Randgris
			getmapxy(.@map$,.@x,.@y,BL_PC);
			setarray .@OptID[0],RDMOPT_ATTR_TOLERACE_NOTHING,RDMOPT_RACE_TOLERACE_HUMAN;
			setarray .@OptVal[0],10,5;
			setarray .@OptParam[0],0;
			makeitem3 2115,1,.@map$,.@x,.@y,0,0,0,0,0,0,0,.@OptID,.@OptVal,.@OptParam;
		}
		end;

---------------------------------------

*cleanarea "<map name>",<x1>,<y1>,<x2>,<y2>;
*cleanmap "<map name>";

These commands will clear all items lying on the ground on the specified map, either
within the x1/y1-x2/y2 rectangle or across the entire map.

---------------------------------------

*searchitem <array name>,"<item name>";

This command will fill the given array with the ID of items whose name matches
the given one. It returns the number of items found. For performance reasons,
the results array is limited to 10 items.

	mes "What item are you looking for?";
	input .@name$;
	.@qty = searchitem(.@matches[0],.@name$);
	mes "I found " + .@qty + " items:";
	for (.@i = 0; .@i < .@qty; .@i++)
		// Display name (eg: "Apple[0]")
		mes getitemname(.@matches[.@i]) + "[" + getitemslots(.@matches[.@i]) + "]";

---------------------------------------

*delitem <item id>,<amount>{,<account ID>};
*delitem "<item name>",<amount>{,<account ID>};

This command will remove a specified amount of items from the invoking/target character.
Like all the item commands, it uses the item ID found inside 'db/item_db.yml'.

    delitem 502,10; // The person will lose 10 apples
    delitem 617,1;  // The person will lose 1 Old Violet Box

It is always a good idea to check if the player actually has the items before you delete them.
If you try to delete more items that the player has, the player will lose the ones he/she has
and the script will terminate with an error.

Like 'getitem', this command will also accept an 'english name' field from the
database. If the name is not found, nothing will be deleted.

---------------------------------------

*cartdelitem <item id>,<amount>{,<account ID>};
*cartdelitem "<item name>",<amount>{,<account ID>};
*storagedelitem <item id>,<amount>{,<account ID>};
*storagedelitem "<item name>",<amount>{,<account ID>};
*guildstoragedelitem <item id>,<amount>{,<account ID>};
*guildstoragedelitem "<item name>",<amount>{,<account ID>};

This command behaves identically to 'delitem', but deletes items from the player's
cart, storage, or guild storage.

If no cart is mounted, 'cartdelitem' will return -1.
If player is not in a guild or storage is open, 'guildstoragedelitem' will return -1.

---------------------------------------

*delitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*delitem2 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*delitem3 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*delitem3 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*delitem4 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};
*delitem4 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<account ID>};

This command will remove a specified amount of items from the invoking/target character.
See 'getitem2' for an explanation of the expanded parameters.

'delitem3' is advance version of 'delitem2' that also use Item Random Option as criteria.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'delitem4' is advance version of 'delitem3' that also use the grade as criteria.

---------------------------------------

*delitemidx <index>{,<amount>{,<char id>}}

This command will remove an item at the given inventory index.

If <amount> is not specified, this will remove all of the items at the specified index.

The only way to get the inventory index is by using 'getinventorylist()'. After deleting
an item at the given index, that index can remain empty until the player relogs, requiring
'getinventorylist()' to be called again. If an item is deleted with an invalid index, the
script will terminate with an error.

This command returns true on success and false if the item at the given index could not be deleted or if
not enough items were available at the given index.

Example:

	// This will remove all Red Potions from player's inventory
	getinventorylist();
	for (.@i = 0; .@i < @inventorylist_count; ++.@i)
		if (@inventorylist_id[.@i] == 501)
			delitemidx @inventorylist_idx[.@i];

---------------------------------------

*cartdelitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*cartdelitem2 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*storagedelitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*storagedelitem2 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*guildstoragedelitem2 <item id>,<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};
*guildstoragedelitem2 "<item name>",<amount>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<account ID>};

This command behaves identically to 'delitem2', but deletes items from the player's
cart, storage, or guild storage.

If no cart is mounted, 'cartdelitem2' will return -1.
If player is not in a guild or storage is open, 'guildstoragedelitem2' will return -1.

---------------------------------------

*countitem(<item id>{,<accountID>})
*countitem("<item name>"{,<accountID>})

This function will return the number of items for the specified item ID that the
invoking character has in the inventory.

	mes "[Item Checker]";
	mes "Hmmm, it seems you have " + countitem(502) + " apples";
	close;

Like 'getitem', this function will also accept an 'english name' from the
database as an argument.

If you want to state the number at the end of a sentence, you can do it by
adding up strings:

	mes "[Item Checker]";
	mes "Hmmm, the total number of apples you are holding is " + countitem("APPLE");
	close;

---------------------------------------

*cartcountitem(<item id>{,<accountID>})
*cartcountitem("<item name>"{,<accountID>})
*storagecountitem(<item id>{,<accountID>})
*storagecountitem("<item name>"{,<accountID>})
*guildstoragecountitem(<nameID>{,<accountID>})
*guildstoragecountitem("<item name>"{,<accountID>})

This command behaves identically to 'countitem', but counts items from the player's
cart, storage, or guild storage.

If no cart is mounted, 'cartcountitem' will return -1.
If player is not in a guild or storage is open, 'guildstoragecountitem' will return -1.

---------------------------------------

*countitem2(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*countitem2("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*countitem3(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*countitem3("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*countitem4(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*countitem4("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})

Expanded version of 'countitem' function, used for created/carded/forged items.

This function will return the number of items for the specified item ID and
other parameters that the invoking character has in the inventory.
See 'getitem2' for an explanation of the expanded parameters.

'countitem3' is advance version of 'countitem2' that also use Item Random Option as criteria.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'countitem4' is advance version of 'countitem3' that also use the grade as criteria.

---------------------------------------

*cartcountitem2(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*cartcountitem2("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*storagecountitem2(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*storagecountitem2("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*guildstoragecountitem2(<nameID>,<Identified>,<Refine>,<Attribute>,<Card0>,<Card1>,<Card2>,<Card3>{,<accountID>})
*guildstoragecountitem2("<item name>",<Identified>,<Refine>,<Attribute>,<Card0>,<Card1>,<Card2>,<Card3>{,<accountID>})

This command behaves identically to 'countitem2', but counts items from the player's
cart, storage, or guild storage.

If no cart is mounted, 'cartcountitem2' will return -1.
If player is not in a guild or storage is open, 'guildstoragecountitem2' will return -1.

---------------------------------------

*rentalcountitem(<item id>{,<accountID>})
*rentalcountitem("<item name>"{,<accountID>})

This function will return the number of rental items for the specified item ID that the
invoking character has in the inventory.

---------------------------------------

*rentalcountitem2(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*rentalcountitem2("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>{,<accountID>})
*rentalcountitem3(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*rentalcountitem3("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*rentalcountitem4(<item id>,<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})
*rentalcountitem4("<item name>",<identify>,<refine>,<attribute>,<card1>,<card2>,<card3>,<card4>,<grade>,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>{,<accountID>})

Expanded version of 'rentalcountitem' function, used for created/carded/forged items.

This function will return the number of rental items for the specified item ID and
other parameters that the invoking character has in the inventory.
See 'getitem2' for an explanation of the expanded parameters.

'rentalcountitem3' is advance version of 'rentalcountitem2' that also use Item Random Option as criteria.
<RandomIDArray>    : Array variable of ID for item random option, see db/[pre-]re/item_randomopt_db.yml
<RandomValueArray> : Array variable of item random option's value.
<RandomParamArray> : Array variable of item random option's param.

'rentalcountitem4' is advance version of 'rentalcountitem3' that also use the grade as criteria.

---------------------------------------

*countbound({<bound type>{,<char_id>}})

This function will return the number of different bounded items in the character's
inventory, and sets the arrays @bound_items[] and @bound_amount[] containing all item IDs of the
counted items and their respective amount. If a bound type is specified, only those items will be counted.

For a list of bound types see 'getitembound'.

Example:
	.@total_type = countbound();
	mes "You currently have " + .@total_type + " different type of bounded items.";
	next;
	mes "The list of bounded items include:";
	for(.@i = 0; .@i < .@total_type; .@i++)
		mes "x" + @bound_amount[.@i] + " " + getitemname(@bound_items[.@i]);
	close;

---------------------------------------

*groupranditem <group id>{,<sub_group>};

Returns the item_id of a random item picked from the group specified. The
different groups and their group number are specified in 'db/(pre-)re/item_group_db.yml'.

When used in conjunction with other functions, you can get a random item. For
example, for a random pet lure:

getitem groupranditem(IG_Taming),1;

'sub_group' is used to get the available random items of item group from specified random
group. 0 for 'must' item group, and random item group is 1 until 5 (MAX_ITEMGROUP_RANDGROUP+1).

More info, see doc/item_group.txt.

---------------------------------------

*getrandgroupitem <group_id>{,<quantity>{,<sub_group>{,<identify>{,<char_id>}}}};

Similar to the above example, this command allows players to obtain the specified
quantity of a random item from the group "<group id>". The different groups and
their group number are specified in db/(pre-)re/item_group_db.yml

If 'quantity' is not defined or 0, it will uses defined amount from Item Group list.

If 'sub_group' is not defined the value will be 1 (since random group is 1 ~ 5, and 0 is
'must' item group).

For item with type IT_WEAPON, IT_ARMOR, IT_PETARMOR, and IT_SHADOWGEAR will be given
as unidentified item (as defined by itemdb_isidentified in src/map/itemdb.cpp) except
if 'identify' is defined with value 1.

More info, see doc/item_group.txt.

---------------------------------------

*getgroupitem <group_id>{,<identify>{,<char_id>}};

Gives item(s) to the attached player based on item group contents.
This is not working like 'getrandgroupitem' which only give 1 item for specified
item group & sub_group.

For item with type IT_WEAPON, IT_ARMOR, IT_PETARMOR, and IT_SHADOWGEAR will be given
as unidentified item (as defined by itemdb_isidentified in src/map/itemdb.cpp) except
if 'identify' is defined with value 1.

More info, see doc/item_group.txt.

---------------------------------------

*enable_items;
*disable_items;

These commands toggle the ability to change equipment while interacting with
an NPC. To avoid possible exploits, the commands affect the particular script
instance only. Note that if a different script also calls enable_items, it
will override the last call (so you may want to call this command at the start
of your script without assuming it is still in effect).

The default setting, 'item_enabled_npc', is defined in 'conf/battle/items.conf'.

---------------------------------------

*itemskill <skill id>,<skill level>{,<keep requirement>};
*itemskill "<skill name>",<skill level>{,<keep requirement>};

This command is meant for item scripts to replicate single-use skills in usable
items. It will not work properly if there is a visible dialog window or menu or if the item is not type 'Delayconsume'.
If the skill is self or auto-targeting, it will be used immediately; otherwise a
target cursor is shown.

If <keep requirement> parameter is set to true, the skill's requirements will be checked.
By default, the requirements for item skills are not checked, and therefore the default value is false.

// When Anodyne is used, it will cast Endure (8), Level 1, as if the actual skill has been used from skill tree.
  - Id: 605
    AegisName: Anodyne
    Name: Anodyne
    Type: Delayconsume
    Buy: 2000
    Weight: 100
    Flags:
      BuyingStore: true
    Script: |
      itemskill "SM_ENDURE",1;

// When Sienna_Execrate_Scroll_1_5 is used, it will cast Sienna Execrate Level 5 and consume 2 Red_Gemstones.
  - Id: 23194
    AegisName: Sienna_Execrate_Scroll_1_5
    Name: Level 5 Sienna Execrate
    Type: Delayconsume
    Buy: 10
    Weight: 10
    Script: |
      itemskill "WL_SIENNAEXECRATE",5,true;

---------------------------------------

*consumeitem <item id>{,<char_id>};
*consumeitem "<item name>"{,<char_id>};

This command will run the item script of the specified item on the invoking
character. The character does not need to possess the item, and the item will
not be deleted. While this command is intended for usable items, it will run
for any item type.

This command does not currently work with the 'itemskill' script command.

---------------------------------------

*produce <item level>;

This command will open a crafting window on the client connected to the invoking
character. The 'item level' is a number which determines what kind of a crafting
window will pop-up.

You can see the full list of such item levels in 'db/produce_db.txt' which determines
what can actually be produced. The window will not be empty only if the invoking
character can actually produce the items of that type and has the appropriate raw
materials in their inventory.

The success rate to produce the item is the same as the success rate of the skill
associated with the item level. If there is no skill id, the success rate will be 50%.

Valid item levels are:

 1   - Level 1 Weapons
 2   - Level 2 Weapons
 3   - Level 3 Weapons
 21  - Blacksmith's Stones and Metals
 22  - Alchemist's Potions, Holy Water, Assassin Cross's Deadly Poison
 23  - Elemental Converters

---------------------------------------

*cooking <dish level>;

This command will open a produce window on the client connected to the invoking
character. The 'dish level' is the number which determines what kind of dish
level you can produce. You can see the full list of dishes that can be produced in
'db/produce_db.txt'.

The window will be shown empty if the invoking character does not have enough of
the required incredients to cook a dish.

Valid dish levels are:

11 - Level 1 Dish
12 - Level 2 Dish
13 - Level 3 Dish
14 - Level 4 Dish
15 - Level 5 Dish
16 - Level 6 Dish
17 - Level 7 Dish
18 - Level 8 Dish
19 - Level 9 Dish
20 - Level 10 Dish

Although it's required to set a dish level, it doesn't matter if you set it to 1
and you want to cook a level 10 dish, as long as you got the required incredients
to cook the dish the command works.

---------------------------------------

*makerune <% success bonus>{,<char_id>};

This command will open a rune crafting window on the client connected to the
invoking character. Since this command is officially used in rune ores, a bonus
success rate must be specified (which adds to the base formula).

You can see the full list of runes that can be produced in 'db/produce_db.txt'.
The window will not be empty only if the invoking character can actually produce
a rune and has the appropriate raw materials in their inventory.

---------------------------------------

*successremovecards <equipment slot>;

This command will remove all cards of the cards slots defined in db/item_db.yml
from the item found in the specified equipment slot of the invoking character,
create new card items and give them to the character.
If any cards were removed in this manner, it will also show a success effect.

---------------------------------------

*failedremovecards <equipment slot>,<type>;

This command will remove all cards from the item found in the specified
equipment slot of the invoking character. 'type' determines what happens to the
item and the cards:

 0 - will destroy both the item and the cards.
 1 - will keep the item, but destroy the cards.
 2 - will keep the cards, but destroy the item.

Whatever the type is, it will also show a failure effect on screen.

---------------------------------------

*repair <broken item number>{,<char_id>};

This command repairs a broken piece of equipment, using the same list of broken
items as available through 'getbrokenid'.

---------------------------------------

*repairall {<char_id>};

This command repairs all broken equipment in the attached player's inventory.
A repair effect will be shown if any items are repaired, else the command will
end silently.

---------------------------------------

*successrefitem <equipment slot>{,<count>{,<char_id>}};

This command will refine an item in the specified equipment slot of the invoking
character by +1, or a count if given. For a list of equipment slots see 'getequipid'.
This command will also display a 'refine success' effect on the character and put
appropriate messages into their chat window. It will also give the character fame
points if a weapon reached +10 this way, even though these will only take effect for
blacksmith who will later forge a weapon.

---------------------------------------

*failedrefitem <equipment slot>{,<char_id>};

This command will fail to refine an item in the specified equipment slot of the
invoking character. The item will be destroyed. This will also display a 'refine
failure' effect on the character and put appropriate messages into their chat
window.

---------------------------------------

*downrefitem <equipment slot>{,<count>{,<char_id>}};

This command will downgrade an item in the specified equipment slot of the invoking
character by -1, or a count if given. For a list of equipment slots see 'getequipid'.
This command will also display a 'refine failure' effect on the character and put
appropriate messages into their chat window.

---------------------------------------

*unequip <equipment slot>{,<char_id>};

This command will unequip whatever is currently equipped in the invoking
character's specified equipment slot. For a full list of possible equipment
slots see 'getequipid'.

If an item occupies several equipment slots, it will get unequipped from all of
them.

---------------------------------------

*delequip <equipment slot>{,<char_id>};

This command will destroy whatever is currently equipped in the invoking
character's specified equipment slot. For a full list of possible equipment
slots see 'getequipid'.

This command will return 1 if an item was deleted and 0 otherwise.

---------------------------------------

*breakequip <equipment slot>{,<char_id>};

This command will break and unequip whatever is currently equipped in the
invoking character's specified equipment slot. For a full list of possible
equipment slots see 'getequipid'.

This command will return 1 if an item was broken and 0 otherwise.

---------------------------------------

*clearitem {<char_id>};

This command will destroy all items the invoking character has in their
inventory (including equipped items). It will not affect anything else, like
storage or cart.

---------------------------------------

*equip <item id>{,<char_id>};
*autoequip <item id>,<option>;

These commands are to equip a equipment on the attached character.
The equip function will equip the item ID given when the player has
this item in his/her inventory, while the autoequip function will
equip the given item ID when this is looted. The option parameter of
the autoequip is 1 or 0, 1 to turn it on, and 0 to turn it off.

Examples:

//This will equip a 1104 (falchion) on the character if this is in the inventory.
	equip 1104;

//The invoked character will now automatically equip a falchion when it's looted.
	autoequip 1104,1;

//The invoked character will no longer automatically equip a falchion.
	autoequip 1104,0;

---------------------------------------

*buyingstore <slots>;

Invokes buying store preparation window like the skill 'Open Buying Store',
without the item requirement. Amount of slots is limited by the server to
a maximum of 5 slots by default.

Example:
	// Gives the player opportunity to buy 4 different kinds of items.
	buyingstore 4;

---------------------------------------

*searchstores <uses>,<effect>;

Invokes the store search window, which allows to search for both vending
and buying stores. Parameter uses indicates, how many searches can be
started, before the window has to be reopened. Effect value affects,
what happens, when a result item is double-clicked and can be one of the
following:

	0 = Shows the store's position on the mini-map and highlights the
	    shop sign with yellow color, when the store is on same map
	    as the invoking player.
	1 = Directly opens the shop, regardless of distance.

Example:
	// Item Universal_Catalog_Gold (10 uses, effect: open shop)
	searchstores 10,1;

---------------------------------------

*enable_command;
*disable_command;

These commands toggle the ability to use atcommand while interacting with an NPC.

The default setting, 'atcommand_disable_npc', is defined in 'conf/battle/gm.conf'.

---------------------------------------
//
4,1.- End of item-related commands
//
---------------------------------------

*openstorage;

This will open character's Kafra storage window on the client connected to the
invoking character. It can be used from any kind of NPC or item script, not just
limited to Kafra Staff.

The storage window opens regardless of whether there are open NPC dialogs or
not, but it is preferred to close the dialog before displaying the storage
window, to avoid any disruption when both windows overlap.

    mes "Close this window to open your storage.";
    close2;
    openstorage;
    end;

---------------------------------------

*openstorage2 <storage_id>,<mode>{,<account_id>};

Just like the 'openstorage' command, except this command can open additional storages
by the specified <storage_id>. For <storage_id>, please read the conf/inter_server.yml
for storage groups.

Values for <mode> are:
	STOR_MODE_NONE : Player only can read the storage entries.
	STOR_MODE_GET  : Player can get items from the storage.
	STOR_MODE_PUT  : Player can put items in the storage.

Example:
	if (vip_status(VIP_STATUS_ACTIVE)) {
		mes "I will open your Premium storage.";
		mes "Thank you for using our service.";
		close2;
		openstorage2 1,STOR_MODE_GET|STOR_MODE_PUT;
	} else {
		mes "Sorry, your Premium status is expired.";
		mes "Storage will be opened but you can't put any item into it.";
		close2;
		openstorage2 1,STOR_MODE_GET;
	}
	end;

---------------------------------------

*openmail({<char_id>});

This will open a character's Mail window on the client connected to the
invoking character.

This command is not supported for PACKETVER 20150513 or newer.

	mes "Close this window to open your mail inbox.";
	close2;
	openmail;
	end;

---------------------------------------

*mail <destination id>,"<sender name>","<title>","<body>"{,<zeny>{,<item id array>,<item amount array>{,refine{,bound{,<item card0 array>{,<item card1 array>{,<item card2 array>{,<item card3 array>
		{,<random option id0 array>, <random option value0 array>, <random option paramter0 array>{,<random option id1 array>, <random option value1 array>, <random option paramter1 array>
		{,<random option id2 array>, <random option value2 array>, <random option paramter2 array>{,<random option id3 array>, <random option value3 array>, <random option paramter3 array>
		{,<random option id4 array>, <random option value4 array>, <random option paramter4 array>}}}}}}}}};

This command will send mail to the <destination id> which is a character ID.
A <sender name> can be specified but does not have to be from the direct creator
of the mail and is limited to NAME_LENGTH (24) characters. Mail <title> is limited
to MAIL_TITLE_LENGTH (40) characters. Mail <body> is limited to MAIL_BODY_LENGTH
(200) characters for PACKETVER < 20150513 or 500 characters for later clients.

Optional <zeny> and item data can be added to the mail as well. PACKETVER < 20150513
is limited to 1 item while later clients are limited to MAIL_MAX_ITEM (5).

The <item id array>, <item amount array>, <item card0 array>, <item card1 array>,
<item card2 array>, and <item card3 array> should all be integer arrays.

For random options there can be 5 arrays in pairs of 3 (ids, values, parameters) right after the cards.
All of these arrays shall be integer arrays as well.

Example of sending mail with zeny:
	.@charid = getcharid(0);
	.@sender$ = "Poring";
	.@title$ = "Welcome";
	.@body$ = "Hi! I'm a simple Poring from the Prontera fields! Welcome to Ragnarok!";
	.@zeny = 5000;
	mail .@charid, .@sender$, .@title$, .@body$, .@zeny;

Example of sending mail with items:
	.@charid = getcharid(0);
	.@sender$ = "Angeling";
	.@title$ = "Welcome";
	.@body$ = "Hi! I'm a simple Angeling from the Prontera fields! Welcome to Ragnarok!";
	.@zeny = 0;
	setarray .@mailitem[0], 504, 505, 2220, 1214; // White Potion, Blue Potion, Hat, Dagger
	setarray .@mailamount[0], 10, 5, 1, 1; // 10 White Potions, 5 Blue Potions, 1 Hat, 1 Dagger
	setarray .@mailrefine[0], 0, 0, 3, 10; // +3 Hat, +10 Dagger
	setarray .@mailbound[0], 0, 0, Bound_Account, Bound_Char; // Account bounded Hat, Char bounded Dagger
	setarray .@mailcard0[0], 0, 0, 4198, 4092; // Attach Maya Purple Card to the Hat, Attach Skeleton Worker Card to Dagger
	setarray .@mailcard1[0], 0, 0, 0, 4092; // Attach Skeleton Worker Card to Dagger
	setarray .@mailcard2[0], 0, 0, 0, 4092; // Attach Skeleton Worker Card to Dagger
	mail .@charid, .@sender$, .@title$, .@body$, .@zeny, .@mailitem, .@mailamount, .@mailrefine, .@mailbound, .@mailcard0, .@mailcard1, .@mailcard2;
	
Example of sending mail with items and random options:
	.@charid = getcharid(0);
	.@sender$ = "Angeling";
	.@title$ = "Welcome";
	.@body$ = "Hi! I'm a simple Angeling from the Prontera fields! Welcome to Ragnarok!";
	.@zeny = 0;
	setarray .@mailitem[0], 504, 505, 2220, 1214; // White Potion, Blue Potion, Hat, Dagger
	setarray .@mailamount[0], 10, 5, 1, 1; // 10 White Potions, 5 Blue Potions, 1 Hat, 1 Dagger
	setarray .@mailrefine[0], 0, 0, 3, 10; // +3 Hat, +10 Dagger
	setarray .@mailbound[0], 0, 0, Bound_Account, Bound_Char; // Account bounded Hat, Char bounded Dagger
	setarray .@mailcard0[0], 0, 0, 4198, 4092; // Attach Maya Purple Card to the Hat, Attach Skeleton Worker Card to Dagger
	setarray .@mailcard1[0], 0, 0, 0, 4092; // Attach Skeleton Worker Card to Dagger
	setarray .@mailcard2[0], 0, 0, 0, 4092; // Attach Skeleton Worker Card to Dagger
	setarray .@mailcard3[0], 0, 0, 0, 0; // Empty last slot
	setarray .@mailrndopt_id0[0], 0, 0, 0, RDMOPT_VAR_MAXHPAMOUNT; // Enchant the Dagger with increased HP option
	setarray .@mailrndopt_val0[0], 0, 0, 0, 1000; // Enchant the Dagger with increased HP option by 1000 points
	setarray .@mailrndopt_prm0[0], 0, 0, 0, 0; // Enchant the Dagger with increased HP option - does not need any parameter
	mail .@charid, .@sender$, .@title$, .@body$, .@zeny, .@mailitem, .@mailamount, .@mailrefine, .@mailbound, .@mailcard0, .@mailcard1, .@mailcard2, .@mailcard3, .@mailrndopt_id0, .@mailrndopt_val0, .@mailrndopt_prm0;

---------------------------------------

*openauction({<char_id>});

This will open the Auction window on the client connected to the invoking character.

	mes "Close this window to open the Auction window.";
	close2;
	openauction;
	end;

---------------------------------------
\\
4,2.- Guild-related commands
\\
---------------------------------------

*guildopenstorage()

This function works the same as 'openstorage' but will open a guild storage
window instead for the guild storage of the guild the invoking character belongs
to.

Return values:
 GSTORAGE_OPEN - Successfully opened.
 GSTORAGE_STORAGE_ALREADY_OPEN - Player storage is already open.
 GSTORAGE_ALREADY_OPEN - Guild storage is already open.
 GSTORAGE_NO_GUILD - Player is not in a guild.
 GSTORAGE_NO_STORAGE - Guild hasn't invested in the Guild Storage Expansion skill (only if OFFICIAL_GUILD_STORAGE is enabled).
 GSTORAGE_NO_PERMISSION - Player doesn't have permission to use the guild storage.

---------------------------------------

*guildopenstorage_log({<char id>})

Opens the guild storage log window for the attached character or the given character id.

Possible return values:
GUILDSTORAGE_LOG_FINAL_SUCCESS	Window was opened successfully.
GUILDSTORAGE_LOG_EMPTY			Window was not opened, because no entries exist.
GUILDSTORAGE_LOG_FAILED			Some database error occurred.

---------------------------------------

*guild_has_permission(<permission>{,<char id>})

Checks if the attached player or the player with the given character id has the given permission(s).
Permission can be a bitmask and allows to use multiple values at the same time.
Returns true if the player has all of the given permissions or false if the player does at least
miss one of the given permissions or is not in a guild at all.

Available permissions are:
GUILD_PERM_INVITE	If a player is allowed to invite other players.
GUILD_PERM_EXPEL	If a player is allowed to expel other guild members.
GUILD_PERM_STORAGE	If a player is allowed to access the guild storage.
GUILD_PERM_ALL		A combination of all permissions above.

---------------------------------------

*guildchangegm(<guild id>,<new master's name>)

This function will change the Guild Master of a guild. The ID is the guild's
id, and the new guild master's name must be passed.

Returns 1 on success, 0 otherwise.

---------------------------------------

*guildgetexp <amount>;

This will give the specified amount of guild experience points to the guild the
invoking character belongs to. It will silently fail if they do not belong to
any guild.

---------------------------------------

*guildskill <skill id>,<level>
*guildskill "<skill name>",<level>

This command will bump up the specified guild skill by the specified number of
levels. This refers to the invoking character and will only work if the invoking
character is a member of a guild AND its guild master, otherwise no failure
message will be given and no error will occur, but nothing will happen - same
about the guild skill trying to exceed the possible maximum. The full list of
guild skills is available in 'db/(pre-)re/skill_db.yml', these are all the GD_ skills at
the end.

// This would give your character's guild one level of Approval (GD_APPROVAL ID
// 10000). Notice that if you try to add two levels of Approval, or add
// Approval when the guild already has it, it will only have one level of
// Approval afterwards.
	guildskill 10000,1,0;

You might want to make a quest for getting a certain guild skill, make it hard
enough that all the guild needs to help or something. Doing this for the Glory
of the Guild skill, which allows your guild to use an emblem, is a good idea for
a fun quest.

---------------------------------------
//
4,2 End of guild-related commands.
//
---------------------------------------

*resetlvl <action type>{,<char_id>};

This is a character reset command, meant mostly for rebirth script supporting
Advanced jobs, which will reset the invoking character's stats and level
depending on the action type given. Valid action types are:

 1 - Base level 1, Job level 1, 0 skill points, 0 base exp, 0 job exp, wipes the
     status effects (only the ones settable by 'setoption'), sets all stats to 1.
     If the new job is 'Novice High', give 100 status points, give First Aid and
     Play Dead skills.
 2 - Base level 1, Job level 1, 0 skill points, 0 base exp, 0 job exp.
     Skills and attribute values are not altered.
 3 - Base level 1, base exp 0. Nothing else is changed.
 4 - Job level 1, job exp 0. Nothing else is changed.

In all cases everything the character has on will be unequipped.

Even though it doesn't return a value, it is used as a function in the official
rebirth scripts. Ask AppleGirl why.

---------------------------------------

*resetstatus({<char_id>});

This is a character reset command, which will reset the stats on the invoking
character and give back all the stat points used to raise them previously.
Nothing will happen to any other numbers about the character.

Used in reset NPC's (duh!)

---------------------------------------

*resetskill({<char_id>});

This command takes off all the skill points on the invoking character, so they
only have Basic Skill blanked out (lvl 0) left, and returns the points for them
to spend again. Nothing else will change but the skills. Quest skills will also
reset if 'quest_skill_reset' option is set to Yes in 'battle_athena.conf'. If
the 'quest_skill_learn' option is set in there, the points in the quest skills
will also count towards the total.

Used in reset NPC's (duh!)

---------------------------------------

*resetfeel({<char_id>});

This command will reset the Star Gladiator's designated maps on the invoking character.
Only works on Star Gladiator and Star Emperor classes.

---------------------------------------

*resethate({<char_id>});

This command will reset the Star Gladiator's designated monsters on the invoking character.
Only works on Star Gladiator and Star Emperor classes.

---------------------------------------

*sc_start <effect type>,<ticks>,<value 1>{,<rate>,<flag>{,<GID>}};
*sc_start2 <effect type>,<ticks>,<value 1>,<value 2>{,<rate>,<flag>{,<GID>}};
*sc_start4 <effect type>,<ticks>,<value 1>,<value 2>,<value 3>,<value 4>{,<rate>,<flag>{,<GID>}};
*sc_end <effect type>{,<GID>};
*sc_end_class {<char_id>{,<job_id>}};

These commands will bestow a status effect on a character.

The <effect type> determines which status is invoked. This can be either a number
or constant, with the common statuses (mostly negative) found in 'src/map/script_constants.hpp'
with the 'SC_' prefix. A full list is located in 'src/map/status.hpp', though
they are not currently documented.

The duration of the status is given in <ticks>, or milleseconds.
Use INFINITE_TICK for infinite duration.

Certain status changes take an additional parameter <value 1>, which typically
modifies player stats by the given number or percentage. This differs for each
status, and is sometimes zero.

Optional value <rate> is the chance that the status will be invoked (100 = 1%).
This is used primarily in item scripts. When used in an NPC script, a flag MUST
be defined for the rate to work.

Optional value <flag> is how the status change start will be handled (a bitmask).
 SCSTART_NOAVOID   : Status change cannot be avoided.
 SCSTART_NOTICKDEF : Tick cannot be reduced by stats (default).
 SCSTART_LOADED    : sc_data loaded, so no value will be altered.
 SCSTART_NORATEDEF : Rate cannot be reduced.
 SCSTART_NOICON    : Status icon won't be sent to client

If a <GID> is given, the status change will be invoked on the specified character
instead of the one attached to the script. This can only be defined after setting
a rate and flag.

'sc_start2' and 'sc_start4' allow extra parameters to be passed, and are used only
for effects that require them. The meaning of the extra values vary depending on the
effect type. For more infos, read status_change.txt containing a list of all Status Changes
and theirs val1, val2, val3, and val4 usage in source.

'sc_end' will remove a specified status effect. If SC_ALL (-1) is given, it will
perform a complete removal of all statuses (although permanent ones will re-apply).

'sc_end_class' works like 'sc_end' but will remove all status effects from any learned
skill on the invoking character. If <job_id> is provided it will end the effect for that job.

Examples:
	// This will poison the invoking character for 10 minutes at 50% chance.
	sc_start SC_POISON,600000,0,5000;

	// This will bestow the effect of Level 10 Blessing.
	sc_start SC_BLESSING,240000,10;

	// Adjust element resistance by percentage. Sample with Resist_Fire item script:
	// val1: Water resistance
	// val2: Earth resistance
	// val3: Fire resistance
	// val4: Wind resistance
	sc_start4 SC_ARMOR_ELEMENT,1200000,-15,0,20,0;

	// This will end the Freezing status for the invoking character.
	sc_end SC_FREEZE;
	
	// This will end the effect of any learned skill for the invoking character.
	sc_end_class;
	
	// This will end the effect of any learned skill for the character with the <char_id> 150000.
	// val1: <char_id>
	sc_end_class(150000);
	
	// This will end the effect of any Arch Bishop skill for the invoking character.
	// val1: <char_id>
	// val2: <job_id> of Arch Bishop
	sc_end_class(getcharid(0),Job_Arch_Bishop);

Note: to use SC_NOCHAT you should alter Manner
	set Manner, -5;	// Will mute a user for 5 minutes
	set Manner, 0;	// Will unmute a user
	set Manner, 5;	// Will unmute a user and prevent the next use of 'Manner'

---------------------------------------

*getstatus(<effect type>{,<type>{,<char_id>}})

Retrieve information about a specific status effect when called. Depending on <type>
specified the function will return different information.

Possible <type> values:
	- 0 or undefined: whether the status is active
	- 1: the val1 of the status
	- 2: the val2 of the status
	- 3: the val3 of the status
	- 4: the val4 of the status
	- 5: the amount of time in milliseconds that the status has remaining

If <type> is not defined or is set to 0, then the script function will either
return 1 if the status is active, or 0 if the status is not active. If the status
is not active when any of the <type> fields are provided, this script function
will always return 0.

---------------------------------------

*skilleffect <skill id>,<number>;
*skilleffect "<skill name>",<number>;

This command displays visual and aural effects of given skill on currently
attached character. The number parameter is for skill whose visual effect
involves displaying of a number (healing or damaging). Note, that this command
will not actually use the skill, it is intended for scripts, which simulate
skill usage by the NPC, such as buffs, by setting appropriate status and
displaying the skill's effect.

	mes "Be blessed!";
	// Heal of 2000 HP
	heal 2000,0;
	skilleffect 28,2000;
	// Blessing Level 10
	sc_start SC_BLESSING,240000,10;
	skilleffect 34,0;
	// Increase AGI Level 5
	sc_start SC_INCREASEAGI,140000,5;
	skilleffect 29,0;

This will heal the character with 2000 HP, buff it with Blessing Lv 10 and
Increase AGI Lv 5, and display appropriate effects.

---------------------------------------

*npcskilleffect <skill id>,<number>,<x>,<y>;
*npcskilleffect "<skill name>",<number>,<x>,<y>;

This command behaves identically to 'skilleffect', however, ground type skill
effects will be centered at the map coordinates given on the same map as the
attached character and all other skill types will be centered on the attached
character.

---------------------------------------

*specialeffect <effect number>{,<send_target>{,"<NPC Name>"}};

This command will display special effect with the given number, centered on the
specified NPCs coordinates, if any. For a full list of special effect numbers
known see 'doc/effect_list.txt'. Some effect numbers are known not to work in
some client releases. (Notably, rain is absent from any client executables
released after April 2005.)

<NPC name> parameter will display <effect number> on another NPC. If the NPC
specified does not exist, the command will do nothing. When specifying an NPC,
<send_target> must be specified when specifying an <NPC Name>, specifying AREA
will retain the default behavior of the command.

	// this will make the NPC "John Doe#1"
	// show the effect "EF_HIT1" specified by
	// Jane Doe. I wonder what John did...
	mes "[Jane Doe]";
	mes "Well, I never!";
	specialeffect EF_HIT1,AREA,"John Doe#1";
	close;

---------------------------------------

*specialeffect2 <effect number>{,<send_target>{,"<Player Name>"}};

This command behaves identically to 'specialeffect', but the effect will be
centered on the invoking character's sprite.

<Player name> parameter will display <effect number> on another Player than the
one currently attached to the script. Like with specialeffect, when specifying
a player, <send_target> must be supplied, specifying AREA will retain the default
behavior of the command.

---------------------------------------

*removespecialeffect <effect number>{,<send_target>{,"<NPC Name>"}};

Work for 2018-10-02+
This command behaves parameter same as 'specialeffect', but use for remove effect with <effect number>
from invoking NPC.

---------------------------------------

*removespecialeffect2 <effect number>{,<send_target>{,"<Player Name>"}};

Work for 2018-10-02+
This command behaves parameter same as 'specialeffect2', but use for remove effect with <effect number>
from invoking character.

---------------------------------------

*statusup <stat>{,<char_id>};

This command will change a specified stat of the invoking character up by one
permanently. Stats are to be given as number, but you can use these constants to
replace them:

bStr -  Strength
bVit -  Vitality
bInt -  Intelligence
bAgi -  Agility
bDex -  Dexterity
bLuk -  Luck

---------------------------------------

*statusup2 <stat>,<amount>{,<char_id>};

This command will change a specified stat of the invoking character by the
specified amount permanently. The amount can be negative. See 'statusup'.

	// This will decrease a character's Vit forever.
	statusup2 bVit,-1;
---------------------------------------

*traitstatusup <stat>{,<char_id>};

This command will change a specified trait stat of the invoking character up by one
permanently. Trait stats are to be given as number, but you can use these constants to
replace them:

bPow -  Power
bSta -  Stamina
bWis -  Wisdom
bSpl -  Spell
bCon -  Concentration
bCrt -  Creative

---------------------------------------

*traitstatusup2 <stat>,<amount>{,<char_id>};

This command will change a specified trait stat of the invoking character by the
specified amount permanently. The amount can be negative. See 'statusup'.

	// This will decrease a character's Sta forever.
	traitstatusup2 bSta,-1;

---------------------------------------

*bonus <bonus type>,<val1>;
*bonus2 <bonus type>,<val1>,<val2>;
*bonus3 <bonus type>,<val1>,<val2>,<val3>;
*bonus4 <bonus type>,<val1>,<val2>,<val3>,<val4>;
*bonus5 <bonus type>,<val1>,<val2>,<val3>,<val4>,<val5>;

These commands are meant to be used in item scripts. They will probably work
outside item scripts, but the bonus will not persist for long. They, as
expected, refer only to an invoking character.

You can find the full list of possible bonuses and which command to use for each
kind in 'doc/item_bonus.txt'.

---------------------------------------

*autobonus <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};
*autobonus2 <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};
*autobonus3 <bonus script>,<rate>,<duration>,<skill id>,{<other script>};
*autobonus3 <bonus script>,<rate>,<duration>,"<skill name>",{<other script>};

These commands are meant to be used in item scripts only! See 'petautobonus' for pet usage.

What these commands do is 'attach' a script to the player which will get
executed on attack (or when attacked in the case of autobonus2).

Rate is the trigger rate of the script (1000 = 100%).

Duration is the time in milliseconds that the bonus will last for since the script has triggered.

Skill ID/skill name the skill which will be used as trigger to start the bonus. (autobonus3)

The optional argument 'flag' is used to classify the type of attack where the script
can trigger (it shares the same flags as the bAutoSpell bonus script):

Range criteria:
	BF_SHORT:  Trigger on melee attack
	BF_LONG:   Trigger on ranged attack
	Default:   BF_SHORT+BF_LONG
Attack type criteria:
	BF_WEAPON: Trigger on weapon skills
	BF_MAGIC:  Trigger on magic skills
	BF_MISC:   Trigger on misc skills
	Default:   BF_WEAPON
Skill criteria:
	BF_NORMAL: Trigger on normal attacks
	BF_SKILL:  Trigger on skills
	default:   If the attack type is BF_WEAPON (only) BF_NORMAL is used,
		   otherwise BF_SKILL+BF_NORMAL is used.

The difference between the optional argument 'other script' and the 'bonus script' is that,
the former one triggers only when attacking(or attacked) and the latter one runs on
status calculation as well, which makes sure, within the duration, the "bonus" that get
lost on status calculation is restored. So, 'bonus script' is technically supposed to accept
"bonus" command only. And we usually use 'other script' to show visual effects.

In all cases, when the script triggers, the attached player will be the one
who holds the bonus. There is currently no way of knowing within this script
who was the other character (the attacker in autobonus2, or the target in
autobonus and autobonus3).

//Grants a 1% chance of starting the state "all stats +10" for 10 seconds when
//using weapon or misc attacks (both melee and ranged skills) and shows a special
//effect when the bonus is active.
	autobonus "{ bonus bAllStats,10; }",10,10000,BF_WEAPON|BF_MISC,"{ specialeffect2 EF_FIRESPLASHHIT; }";

---------------------------------------

*bonus_script "<script code>",<duration>{,<flag>{,<type>{,<status_icon>{,<char_id>}}}};

This command will attach a script to a player for a given duration, in seconds.
After that time, the script will automatically expire. The same bonus cannot be
stacked. By default, this bonus will be stored on `bonus_script` table when player
logs out.

Flags (bitmask):
	1   : Remove when dead.
	2   : Removable by Dispell.
	4   : Removable by Clearance.
	8   : Remove when player logs out.
	16  : Removeable by Banishing Buster.
	32  : Removable by Refresh.
	64  : Removable by Lux Anima.
	128 : Remove when Madogear is activated or deactivated.
	256 : Remove when receive damage.
	512 : Script is permanent, cannot be cleared by bonus_script_clear.
	1024: Force to replace duplicated script by expanding the duration.
	2048: Force to add duplicated script. This flag cannot be stacked with 1024,
	      if both are defined, 1024 will be checked first and ignore this flag.

Types:
	This will be used to decide negative or positive buff for 'debuff_on_logout'.
	0: Ignore the buff type and won't be removed if the flag is not &8 (Default)
	1: Buff
	2: Debuff

Status_icon: See "Status Icon" section in 'src/map/script_constants.hpp'. Default is SI_BLANK (-1).

Example:
  - Id: 512
    AegisName: Apple
    Name: Apple
    Type: Healing
    Buy: 15
    Weight: 20
    Flags:
      BuyingStore: true
    Script: |
      bonus_script "{ bonus bStr,5; }",60;

---------------------------------------

*bonus_script_clear {<flag>,{<char_id>}};

Removes attached bonus_script from player. If no 'char_id' given, it will removes
from the invoker.

If 'flag' is 1, means will clears all scripts even it's Permanent effect. By default,
it just removes non-permanent script.

---------------------------------------

*plagiarizeskill <skill_id>,<level>;

Enable the player to plagiarize specific skills that are copyable.
Return 1 on success, 0 otherwise.

Note:
 - Plagiarism only able to copy skill while SC_PRESERVE is not active and skill is copyable by Plagiarism.
 - Reproduce can copy skill if SC__REPRODUCE is active and the skill is copyable by Reproduce.

---------------------------------------

*plagiarizeskillreset <flag>;

Remove a plagiarized skill from the player.
Return 1 on success, 0 otherwise.

Flag constants:
	1 - Use for Plagiarism Skill
	2 - Use for Reproduce Skill

---------------------------------------

*skill <skill id>,<level>{,<flag>};
*skill "<skill name>",<level>{,<flag>};
*addtoskill <skill id>,<level>{,<flag>};
*addtoskill "<skill name>",<level>{,<flag>};

These commands will give the invoking character a specified skill. This is also
used for item scripts.

Level is obvious. Skill id is the ID number of the skill in question as per
'db/(pre-)re/skill_db.yml'. It is not known for certain whether this can be used to give
a character a monster's skill, but you're welcome to try with the numbers given
in 'db/(pre-)re/mob_skill_db.txt'.

Flag is 0 if the skill is given permanently (will get written with the character
data) or 1 if it is temporary (will be lost eventually, this is meant for card
item scripts usage.).  The flag parameter is optional, and defaults to 1 in
'skill' and to 2 in 'addtoskill'.

Flag 2 means that the level parameter is to be interpreted as a stackable
additional bonus to the skill level. If the character did not have that skill
previously, they will now at 0+the level given.

Flag 3 is the same as flag 1 in that it saves to the database.  However, these skills
are ignored when any action is taken that adjusts the skill tree (reset/job change).

Flag constants:
	0 - SKILL_PERM
	1 - SKILL_TEMP
	2 - SKILL_TEMPLEVEL
	3 - SKILL_PERM_GRANT

// This will permanently give the character Stone Throw (TF_THROWSTONE,152), at
// level 1.
    skill 152,1,0;

---------------------------------------

*nude {<char_id>};

This command will unequip anything equipped on the invoking character.

It is not required to do this when changing jobs since 'jobchange' will unequip
everything not equippable by the new job class anyway.

---------------------------------------

*sit {"<character name>"};
*stand {"<character name>"};

These commands will make a character sit or stand.
If no character is specified, the command will run for the invoking character.

Additionnally Sitting constant is true when the character is sitting, false otherwise.

---------------------------------------

*disguise <Monster ID>{,<char_id>};
*undisguise {<char_id>};

This command disguises the current player with a monster sprite.
The disguise lasts until 'undisguise' is issued or the player logs out.

Example:

disguise 1002; // Disguise character as a Poring.
next;
undisguise; // Return to normal character sprite.

---------------------------------------

*transform <monster ID>,<duration>{,<sc type>,<val1>,<val2>,<val3>,<val4>};
*transform "<monster name>",<duration>{,<sc type>,<val1>,<val2>,<val3>,<val4>};
*active_transform <monster ID>,<duration>{,<sc type>,<val1>,<val2>,<val3>,<val4>};
*active_transform "<monster name>",<duration>{,<sc type>,<val1>,<val2>,<val3>,<val4>};

This command will turn a player into a monster for a given duration and can grant
a SC attribute effect while transformed. Note that players cannot be transformed
during War of Emperium or if already disguised.
Can only be removed when you die or the duration ends.

'transform' and 'active_transform' can stack on each other but using 'transform' or
'active_transform' twice will not stack (it will cancel the previous bonus for the new).
'active_transform' will take priority over transform for its duration.

---------------------------------------
\\
4,3 Marriage-related commands
\\
---------------------------------------

*marriage("<spouse name>");

This function will marry two characters, the invoking character and the one
referred to by name given, together, setting them up as each other's marriage
partner. No second function call has to be issued (in current SVN at least) to
make sure the marriage works both ways. The function returns 1 upon success, or
0 if the marriage could not be completed, either because the other character
wasn't found or because one of the two characters is already married.

This will do nothing else for the marriage except setting up the spouse ID for
both of these characters. No rings will be given and no effects will be shown.

---------------------------------------

*wedding;

This command will call up wedding effects - the music and confetti - centered on
the invoking character. Example can be found in the wedding script.

---------------------------------------

*divorce({<char_id>})

This function will "un-marry" the invoking character from whoever they were
married to. Both will no longer be each other's marriage partner, (at least in
current SVN, which prevents the cases of multi-spouse problems). It will return
1 upon success or 0 if the character was not married at all.

This function will also destroy both wedding rings and send a message to both
players, telling them they are now divorced.

---------------------------------------

*adopt("<parent_name>","<baby_name>");
*adopt(<parent_id>,<baby_id>);

This function will send the client adoption request to the specified baby
character. The parent value can be either parent. Both parents and the baby
need to be online in order for adoption to work.

Return values:
 ADOPT_ALLOWED - Sent message to Baby to accept or deny.
 ADOPT_ALREADY_ADOPTED - Character is already adopted.
 ADOPT_MARRIED_AND_PARTY - Parents need to be married and in a party with the baby.
 ADOPT_EQUIP_RINGS - Parents need wedding rings equipped.
 ADOPT_NOT_NOVICE - Baby is not a Novice.
 ADOPT_CHARACTER_NOT_FOUND - A parent or Baby was not found.
 ADOPT_MORE_CHILDREN - You cannot adopt more than 1 child. (client message)
 ADOPT_LEVEL_70 - Parents need to be at least level 70 in order to adopt someone. (client message)
 ADOPT_MARRIED - You cannot adopt a married person. (client message)

---------------------------------------
//
4,3.- End of marriage-related commands
//
---------------------------------------

*pcfollow <id>,<target id>;
*pcstopfollow <id>;

Makes a character follow or stop following someone. This command does the same
as the @follow command. The main difference is that @follow can use character
names, and this commands needs the account ID for the target.

Examples:
	// This will make Aaron follow Bullah, when both of these characters are online.
	pcfollow getCharID(3,"Aaron"),getCharID(3,"Bullah");

	// Makes Aaron stop following whoever he is following.
	pcstopfollow getCharID(3,"Aaron");

---------------------------------------

*pcblockmove <id>,<option>;
*unitblockmove <id>,<option>;

Prevents the given GID from moving when the option is 1, and enables the ID to
move again when the option is 0. This command will run for the attached unit
if the given GID is zero.

Examples:
	// Prevents the current char from moving away.
	pcblockmove getcharid(3),1;

	// Enables the current char to move again.
	pcblockmove getcharid(3),0;

---------------------------------------

*pcblockskill <id>,<option>;
*unitblockskill <id>,<option>;

Prevents the given GID from casting skills when the option is 1, and enables
the ID to cast skills again when the option is 0. This command will run for
the attached unit if the given GID is zero.

Examples:
	// Prevents the current char from casting skills.
	pcblockskill getcharid(3),1;

	// Enables the current char to cast skills again.
	pcblockskill getcharid(3),0;

---------------------------------------

*setpcblock <type>,<state>{,<account ID>};
*getpcblock {<account ID>};

'setpcblock' command prevents/allows the player from doing the given <type> of action according
to the <state> during the player session (note: @reloadscript removes all <type> except PCBLOCK_IMMUNE).
The <type> values are bit-masks, multiples of <type> can be added to change the player action.

The action is blocked when the <state> is true, while false allows the action again.

'getpcblock' command return the bit-mask value of the currently
enabled block flags.

Available <type>:
	PCBLOCK_MOVE				Prevent the player from moving.
	PCBLOCK_ATTACK				Prevent the player from attacking.
	PCBLOCK_SKILL				Prevent the player from using skills/itemskills.
	PCBLOCK_USEITEM				Prevent the player from using usable items.
	PCBLOCK_CHAT				Prevent the player from sending global/guild/party/whisper messages.
	PCBLOCK_IMMUNE				Prevent the player from being hit by monsters.
	PCBLOCK_SITSTAND			Prevent the player from sitting/standing.
	PCBLOCK_COMMANDS			Prevent the player from using atcommands/charcommands.
	PCBLOCK_NPCCLICK			Prevent the player from clicking/touching any NPC/shop/warp.
	PCBLOCK_EMOTION				Prevent the player from using emotions.
	PCBLOCK_NPC				Simulate NPC interaction. Useful for NPC with no mes window. Sum of PCBLOCK_MOVE|PCBLOCK_SKILL|PCBLOCK_USEITEM|PCBLOCK_COMMANDS|PCBLOCK_NPCCLICK.
	PCBLOCK_ALL				Sum of all the flags.

Examples:

// Make the attached player invulnerable to monster (same as @monsterignore)
	setpcblock PCBLOCK_IMMUNE, true;

// Prevents the attached player from attacking and using skills
	setpcblock PCBLOCK_ATTACK|PCBLOCK_SKILL, true;

// Re-enables attack, skills and item use
	setpcblock PCBLOCK_ATTACK|PCBLOCK_SKILL|PCBLOCK_USEITEM, false;

// getpcblock related checks
	if (getpcblock() & PCBLOCK_IMMUNE)
		mes "You are invulnerable!";

	if (getpcblock() & (PCBLOCK_MOVE|PCBLOCK_SITSTAND))
		mes "You can't walk or sit.";

	if ((getpcblock() & (PCBLOCK_ATTACK|PCBLOCK_SKILL)) == 0)
		mes "You can attack and use skills.";

	if (getpcblock() & PCBLOCK_CHAT)
		mes "You can't chat.";

---------------------------------------

macro_detector({<account ID>});
macro_detector({"<character name>"});

This command will display the captcha UI challenge onto the invoking character or the given <account ID>/<character name>.

Example:
	// Use 'getareaunits' to gather an area of players to test.
	// Build an int array of the account IDs.
	.@num = getareaunits(BL_PC, "prontera", 150, 150, 160, 160, .@array[0]);

	mes "The number of Players in Prontera in between 150x150 and 160x160 is " + .@num + " .";
	mes "Players to challenge:";
	freeloop(1); // If the list is too big
	for(.@i = 0; .@i < getarraysize(.@array); .@i++) {
		mes (.@i + 1) + " " + convertpcinfo(.@array[.@i], CPC_NAME);
		macro_detector .@array[.@i];
	}
	freeloop(0);
	end;

---------------------------------------

==================================
|5.- Mob / NPC -related commands.|
==================================
---------------------------------------

*monster     "<map name>",<x>,<y>,"<name to show>",<mob id>,<amount>{,"<event label>",<size>,<ai>};
*monster     "<map name>",<x>,<y>,"<name to show>","<mob name>",<amount>{,"<event label>",<size>,<ai>};
*areamonster "<map name>",<x1>,<y1>,<x2>,<y2>,"<name to show>",<mob id>,<amount>{,"<event label>",<size>,<ai>};
*areamonster "<map name>",<x1>,<y1>,<x2>,<y2>,"<name to show>","<mob name>",<amount>{,"<event label>",<size>,<ai>};

This command will spawn <amount> monsters with <mob id> or <mob name> on the specified
coordinates on the specified map. If the script is invoked by a character, a special
<map name>, "this", will be recognized to mean the name of the map the invoking character
is located at. This command works fine in item scripts.

The same command arguments mean the same things as described above in the
beginning of this document when talking about permanent monster spawns. Monsters
spawned in this manner will not respawn upon being killed.

Unlike the permanent monster spawns, if the mob id is -1, a random monster will
be picked from the entire database according to the rules configured in the
server for dead branches. This will work for all other kinds of non-permanent
monster spawns.

The only very special thing about this command is an event label, which is an
optional parameter. This label is written like '<NPC object name>::<label name>'
and upon the monster being killed, it will execute the script inside of the
specified NPC object starting from the label given. The RID of the player
attached at this execution will be the RID of the killing character.
The variable 'killedrid' is set to the Class (mob ID) of the monster killed.
The variable 'killedgid' is set to the ID (unique mob game ID) of the monster killed.

<size> can be:
	Size_Small	(0)		(default)
	Size_Medium	(1)
	Size_Large	(2)

<ai> can be:
	AI_NONE		(0)		(default)
	AI_ATTACK	(1)		(attack/friendly)
	AI_SPHERE	(2)		(Alchemist skill)
	AI_FLORA	(3)		(Alchemist skill)
	AI_ZANZOU	(4)		(Kagerou/Oboro skill)
	AI_LEGION	(5)		(Sera skill)
	AI_FAW		(6)		(Mechanic skill)
	AI_WAVEMODE	(7)		Normal monsters will ignore attack from AI_WAVEMODE monsters

    monster "place",60,100,"Poring",1002,1,"NPCNAME::OnLabel";

The coordinates of 0,0 will spawn the monster on a random place on the map.

The 'areamonster' command works much like the 'monster' command and is not
significantly different, but spawns the monsters within a square defined by
x1/y1-x2/y2.

Returned value is an array with the game ID of the spawned monster(s) depending
on the amount spawned. Array is stored in $@mobid[].

Simple monster killing script:

		<Normal NPC object definition. Let's assume you called him NPCNAME.>
		mes "[Summon Man]";
		mes "Want to start the Poring hunt?";
		next;
		if (select("Yes.:No.") == 2) {
			mes "[Summon Man]";
			mes "Come back later.";
			close;
		}

		// Summon 10 Porings.
		// Using coordinates 0,0 will spawn them in a random location.
		monster "prontera",0,0,"Quest Poring",1002,10,"NPCNAME::OnPoringKilled";

		mes "[Summon Man]";
		mes "Now go and kill all the Porings I summoned.";
		close;

	OnPoringKilled:
		$PoringKilled++;
		if ($PoringKilled >= 10) {
			announce "Summon Man: Well done. All the Porings are dead!",3;
			$PoringKilled = 0;
		}
		end;

For more good examples see just about any official 2-1 or 2-2 job quest script.

---------------------------------------

*areamobuseskill "<map name>",<x>,<y>,<range>,<mob id>,<skill id>,<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;
*areamobuseskill "<map name>",<x>,<y>,<range>,<mob id>,"<skill name>",<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;
*areamobuseskill "<map name>",<x>,<y>,<range>,"<mob name>",<skill id>,<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;
*areamobuseskill "<map name>",<x>,<y>,<range>,"<mob name>","<skill name>",<skill level>,<cast time>,<cancelable>,<emotion>,<target type>;

This command will make all monsters of the specified <mob id> or <mob name> in the specified
area use the specified skill. <map name>, <x>, and <y> define the center of the area,
which extending <range> cells in each direction (ex: a range of 3 would create
a 7x7 square). The skill can be specified by <skill id> or <skill name>. <cast time> is in
milliseconds (1000 = 1 second), and the rest should be self-explanatory.

<target type> can be:
	0 = self
	1 = the mob's current target
	2 = the mob's master
	3 = random target

Example:

	// spawn 1 Shining Plant in the 5x5 area centered on (155,188)
	areamonster "prontera",153,186,157,190,"Shining Plant",1083,1;
	// make the plant cast level 10 Cold Bolt on a random target
	areamobuseskill "prontera",155,188,2,1083,"MG_COLDBOLT",10,3000,1,ET_KEK,3;

---------------------------------------

*killmonster "<map name>","<event label>"{,<type>};

This command will kill all monsters that were spawned with 'monster' or
'addmonster' and have a specified event label attached to them. Commonly used to
get rid of remaining quest monsters once the quest is complete.

If the label is given as "All", all monsters which have their respawn times set
to -1 (like all the monsters summoned with 'monster' or 'areamonster' script
command, and all monsters summoned with GM commands, but no other ones - that
is, all non-permanent monsters) on the specified map will be killed regardless
of the event label value.

As of r12876 killmonster now supports an optional argument type. Using 1 for type
will make the command fire "OnMyMobDead" events from any monsters that do die
as a result of this command.

---------------------------------------

*killmonsterall "<map name>"{,<type>};

This command will kill all monsters on a specified map name, regardless of how
they were spawned or what they are. As of r12873, The behavior has changed slightly.
In light of a label behavior fix for mob spawning commands that will now allow the label to
trigger when there is no player, killmonsterall has also been modified to support this.

Using this the normal/old way means labels don't trigger when a player didn't
attack/kill a monster. This is because it breaks compatibility with older scripts if
forced to use the new method. However, if you wish to use the new label type with this
command, simply use 1 for type. Any other number won't be recognized.

---------------------------------------

*strmobinfo(<type>,<monster id>);

This function will return information about a monster record in the database, as
per 'db/(pre-)re/mob_db.yml'. Type is the kind of information returned. Valid types are:
It will return 0 if there is no such monster (or the type value is invalid),
or an empty string if you requested the monster's name.

 1 - 'english name' field in the database, a string.
 2 - 'japanese name' field in the database, a string.
     All other returned values are numbers:
 3 - Level.
 4 - Maximum HP.
 5 - Maximum SP.
 6 - Experience reward.
 7 - Job experience reward.

---------------------------------------

*mobcount("<map name>","<event label>")

This function will count all the monsters on the specified map that have a given
event label and return the number or 0 if it can't find any. Naturally, only
monsters spawned with 'monster' and 'areamonster' script commands can have non-empty
event label.
If you pass this function an empty string for the event label, it will return
the total count of monster without event label, including permanently spawning monsters.
With the dynamic mobs system enabled, where mobs are not kept
in memory for maps with no actual people playing on them, this will return a 0
for any such map.
If the event label is given as "all", all monsters will be counted, regardless of
having any event label attached.

If the map name is given as "this", the map the invoking character is on will
be used. If the map is not found, or the invoker is not a character while the map
is "this", it will return -1.

---------------------------------------

*clone "<map name>",<x>,<y>,"<event>",<char id>{,<master_id>{,<mode>{,<flag>,<duration>}}}

This command creates a monster which is a copy of another player. The first
four arguments serve the same purpose as in the monster script command, The
<char id> is the character id of the player to clone (player must be online).
If <master id> is given, the clone will be a 'slave/minion' of it. Master_id
must be a character id of another online player.

The mode can be specified to determine the behavior of the clone. Its
values are the same as the ones used for the mode field in the mob_db. The
default mode is aggressive, assists, can move, can attack.

Flag can be either zero or one currently. If zero, the clone is a normal
monster that'll target players, if one, it is considered a summoned monster,
and as such, it'll target other monsters. Defaults to zero.

The duration specifies how long the clone will live before it is auto-removed.
Specified in seconds, defaults to no limit (zero).

Returned value is the monster ID of the spawned clone. If command fails,
returned value is zero.

---------------------------------------

*summon "monster name",<monster id>{,<Time Out>{,"event label"}};

This command will summon a monster. (see also 'monster') Unlike monsters spawned
with other commands, this one will set up the monster to fight to protect the
invoking character. Monster name and mob id obey the same rules as the one given
at the beginning of this document for permanent monster spawns with the
exceptions mentioned when describing 'monster' command.

The effect for the skill 'Call Homunculus' will be displayed centered on the
invoking character.

Timeout is the time in milliseconds the summon lives, and is set default
to 60000 (1 minute). Note that also the value 0 will set the timer to default,
and it is not possible to create a spawn that lasts forever.
If an event label is given, upon the monster being killed, the event label will
run as if by 'donpcevent'.

Returned value is the game ID of the spawned monster.

// Will summon a dead branch-style monster to fight for the character.
summon "--ja--",-1;

---------------------------------------

*addmonsterdrop <monster id>,<item id>,<rate>,{<steal protected>,{<random option group id>}};
*addmonsterdrop "<monster name>",<item id>,<rate>,{<steal protected>,{<random option group id>}};
*delmonsterdrop <monster id>,<item id>;
*delmonsterdrop "<monster name>",<item id>;

These commands will temporarily add or delete a monster drop, which will be reset
when the mob database reloads or the server shuts down. They return true upon success, false otherwise.

If the monster already drops the specified item, its drop rate will be updated with
the given rate (100 = 1%).

If <steal protected> is true the item will be protected from TF_STEAL (default false).
<random option group id> binds the item with the given random option group Id (default 0).
The Id must be valid, like defined in db/[pre-]re/item_randomopt_group.yml

Examples:
	// Makes Owl Baron drop Honey at an 80% rate.
	addmonsterdrop 1295,518,8000;

	// Makes Owl Baron drop Knife_ at an 80% rate, protected from TF_STEAL and with random option group Id 5.
	addmonsterdrop 1295,1202,8000,true,5;

	// Deletes Executioner's Mitten from Rybio.
	delmonsterdrop 1201,7017;

---------------------------------------

*mob_setidleevent <GID>,<event>;

This command will attach an event label to the monster with the given <GID> which will execute
when the <GID> is idle.

Example:
	monster "prontera",0,0,"Quest Poring",1002,1;
	mob_setidleevent $@mobid[0], "NPC NAME::OnIdle";
	end;

OnIdle:
	mobchat getattachedrid(),0,0x00FF00,"I'm IDLE!";
	end;

---------------------------------------

*disablenpc {"<NPC object name>"};
*enablenpc {"<NPC object name>"};

These two commands will disable and enable, respectively, an NPC object
specified by name. The disabled NPC will disappear from sight and will no longer
be triggerable in the normal way. It is not clear whether it will still be
accessible through 'donpcevent' and other triggering commands, but it probably
will be. You can disable even warp NPCs if you know their object names, which is
an easy way to make a map only accessible through walking half the time. Then
you 'enablenpc' them back.

You can also use these commands to create the illusion of an NPC switching
between several locations, which is often better than actually moving the NPC -
create one NPC object with a visible and a hidden part to their name, make a few
copies, and then disable all except one.

---------------------------------------

*hideonnpc {"<NPC object name>"};
*hideoffnpc {"<NPC object name>"};

These commands will make the NPC object specified display as hidden/visible,
even though not actually disabled per se. Hidden as in thief Hide skill, but
unfortunately, not detectable by Ruwach or Sight.

As they are now, these commands are pointless, it is suggested to use
'disablenpc'/'enablenpc', because these two commands actually unload the NPC
sprite location and other accompanying data from memory when it is not used.
However, you can use these for some quest ideas (such as cloaking NPCs talking
while hidden then revealing.... you can wonder around =P

---------------------------------------

*unloadnpc "<NPC object name>";

This command will fully unload a NPC object and all of it's duplicates.

---------------------------------------
 
*duplicate "<NPC name>","<map>",<x>,<y>{,"<Duplicate NPC name>"{,<sprite>{,<dir>{,<xs>{,<xy>}}}}};

This command will duplicate the NPC with the given <NPC name> on <map> at <x>/<y>.
If <Duplicate NPC name>, <sprite>, <dir>, <xs> or <ys> is not provided the value of the original NPC will be used.
The Unique name of the new duplicated NPC is returned on success. An empty string is returned on failure.

NOTE:
	Duplicates will always have the same NPC variables as the original NPC.
	Editing a NPC variable in a duplicate or the original NPC will change it for the others.

---------------------------------------
 
*duplicate_dynamic("<NPC name>"{,<character ID>});

This command will duplicate the NPC with the given <NPC name> near the attached player or the player with the given <character ID>.
The Unique name of the new duplicated NPC is returned on success. An empty string is returned on failure.

NOTE:
	Duplicates will always have the same NPC variables as the original NPC.
	Editing a NPC variable in a duplicate or the original NPC will change it for the others.

---------------------------------------

*cloakonnpc {"<NPC object name>"{,<character ID>}};
*cloakoffnpc {"<NPC object name>"{,<character ID>}};

These commands will make the NPC object specified display as cloaked/uncloaked,
even though not actually disabled.
The player can interact with a NPC cloaked (via NPC click, monster event..)
but the NPC trigger area is disabled.

If <character ID> is given then the NPC will only display to the specified
player until he/she leaves the map, logs out, or the npc option is changed.
If no <character ID> is specified it will display to the area.

---------------------------------------

*cloakonnpcself {"<NPC object name>"};
*cloakoffnpcself {"<NPC object name>"};

Same command as above, but an attached player is required. The NPC will only display to the attached player.

---------------------------------------

*isnpccloaked {"<NPC object name>"{,<character ID>}};

Returns true if the NPC has been cloaked to the attached player or given
<character ID>, false otherwise. This works in association with cloakonnpc
when it is targetting a specific character.

---------------------------------------

*doevent "<NPC object name>::<event label>";

This command will start a new execution thread in a specified NPC object at the
specified label. The execution of the script running this command will not stop,
and the event called by the 'doevent' command will not run until the invoking
script has terminated. No parameters may be passed with a doevent call.

The script of the NPC object invoked in this manner will run as if it's been
invoked by the RID that was active in the script that issued a 'doevent'. As
such, the command will not work if an RID is not attached.

	place,100,100,1%TAB%script%TAB%NPC%TAB%53,{
		mes "This is what you will see when you click me";
		close;
	OnLabel:
		mes "This is what you will see if the doevent is activated";
		close;
	}

	....

	doevent "NPC::OnLabel";

---------------------------------------

*donpcevent "<NPC object name>::<event label>";

This command invokes the event label code within an another NPC or NPCs. It
starts a separate instance of execution, and the invoking NPC will resume
execution its immediately.

If the supplied event label has the form "NpcName::OnLabel", then only given
NPC's event label will be invoked (much like 'goto' into another NPC). If the
form is "::OnLabel" (NPC name omitted), the event code of all NPCs with given
label will be invoked, one after another. In both cases the invoked script
will run without an attached RID, whether or not the invoking script was
attached to a player. The event label name is required to start with "On".

This command can be used to make other NPCs act, as if they were responding to
the invoking NPC's actions, such as using an emotion or talking.

	place,100,100,1%TAB%script%TAB%NPC1%TAB%53,{
		mes "NPC2 copies my actions!";
		close2;
		donpcevent "NPC2::OnEmote";
		end;
	OnEmote:
		emotion rand(1,30);
		end;
	}

	place,102,100,1%TAB%script%TAB%NPC2%TAB%53,{
		mes "NPC1 copies my actions!";
		close2;
		donpcevent "NPC1::OnEmote";
		end;
	OnEmote:
		emotion rand(1,30);
		end;
	}

Whichever of the both NPCs is talked to, both will show a random emotion at the
same time.

As of r16564, command now returns 1 or 0 on success and failure.
A debug message also shows on the console when no events are triggered.

---------------------------------------

*cmdothernpc "<npc name>","<command>";

This is simply "donpcevent <npc name>::OnCommand<command>".
It is an approximation of official server script language's 'cmdothernpc'.

Returns true if the command was executed on the other NPC successfully, false if not.

---------------------------------------

*npctalk "<message>"{,"<NPC name>",<flag>{,<color>}};

This command will display a message as if the NPC object running it was a player
talking - that is, above their head and in the chat window.
The display name of the NPC won't get appended in front of the message.
If the <NPC name> option is given and not empty, then that NPC will display the message,
else the attached NPC will display the message,
the color format is in RGB (0xRRGGBB). The color is White by default.

Target for <flag>:
- bc_all  : Broadcast message is sent server-wide (only in the chat window).
- bc_map  : Message is sent to everyone in the same map as the source of the npc.
- bc_area : Message is sent to players in the vicinity of the source (default value).
- bc_self : Message is sent only to player attached.

	// This will make everyone in the area see the NPC greet the character
	// who just invoked it.
	npctalk "Hello " + strcharinfo(0) + ", how are you?";

---------------------------------------

*chatmes "<message>"{,"<NPC name>"};

This command will display a message in the waitingroom (chat) of the NPC.
If the <NPC name> option is given, then that NPC will display the message, else
the attached NPC will display the message.
If the NPC is not in a waitingroom, nothing happens.

	// Everyone in the waitingroom will see this message:
	chatmes "Waiting 5 minutes until the next match will start";

---------------------------------------

*setnpcdisplay("<npc name>", "<display name>", <class id>, <size>)
*setnpcdisplay("<npc name>", "<display name>", <class id>)
*setnpcdisplay("<npc name>", "<display name>")
*setnpcdisplay("<npc name>", <class id>)

Changes the display name and/or display class of the target NPC.
Returns 0 is successful, 1 if the NPC does not exist.
Size is 0 = normal 1 = small 2 = big.

---------------------------------------
\\
5,1.- Time-related commands
\\
---------------------------------------

*addtimer <ticks>,"NPC::OnLabel";
*deltimer "NPC::OnLabel";
*addtimercount <ticks>,"NPC::OnLabel";

These commands will create, destroy, and delay a countdown timer - 'addtimer' to
create, 'deltimer' to destroy and 'addtimercount' to delay it by the specified
number of ticks. For all three cases, the event label given is the identifier of
that timer. The timer runs on the character object that is attached to the script,
and can have multiple instances. When the label is run, it is run as if the player that
the timer runs on has clicked the NPC.

When this timer runs out, a new execution thread will start in the specified NPC
object at the specified label.

The ticks are given in 1/1000ths of a second.

One more thing. These timers are stored as part of player data. If the player
logs out, all of these get immediately deleted, without executing the script.
If this behavior is undesirable, use some other timer mechanism (like 'sleep').

Example:
<NPC Header> {
	dispbottom "Starting a 5 second timer...";
	addtimer 5000, strnpcinfo(3) + "::On5secs";
	end;
On5secs:
	dispbottom "5 seconds have passed!";
	end;
}

---------------------------------------

*initnpctimer{ "<NPC name>" {, <Attach Flag>} } |
             { "<NPC name>" | <Attach Flag> };
*stopnpctimer{ "<NPC name>" {, <Detach Flag>}  } |
             { "<NPC name>" | <Detach Flag> };
*startnpctimer{ "<NPC name>" {, <Attach Flag>} } |
              { "<NPC name>" | <Attach Flag> };
*setnpctimer <tick>{,"<NPC name>"};
*getnpctimer(<type of information>{,"<NPC name>"})
*attachnpctimer {"<character name>"};
*detachnpctimer {"<NPC name>"};

This set of commands and functions will create and manage an NPC-based timer.
The NPC name may be omitted, in which case the calling NPC is used as target.

Contrary to addtimer/deltimer commands which let you have many different timers
referencing different labels in the same NPC, each with their own countdown,
'initnpctimer' can only have one per NPC object. But it can trigger many labels
and let you know how many were triggered already and how many still remain.

This timer is counting up from 0 in ticks of 1/1000ths of a second each. Upon
creating this timer, the execution will not stop, but will happily continue
onward. The timer will then invoke new execution threads at labels
"OnTimer<time>:" in the NPC object it is attached to.

To create the timer, use the 'initnpctimer', which will start it running.
'stopnpctimer' will pause the timer, without clearing the current tick, while
'startnpctimer' will let the paused timer continue.

By default timers do not have a RID attached, which lets them continue even
if the player that started them logs off. To attach a RID to a timer, you can
either use the optional "attach flag" when using 'initnpctimer/startnpctimer',
or do it manually by using 'attachnpctimer'. Likewise, the optional flag of
stopnpctimer lets you detach any RID after stopping the timer, and by using
'detachnpctimer' you can detach a RID at any time.

Normally there is only a single timer per NPC, but as an exception, as long as
you attach a player to the timer, you can have multiple timers running at once,
because these will get stored on the players instead of the NPC.
NOTE: You need to attach the RID before the timer _before_ you start it to
get a player-attached timer. Otherwise it'll stay a NPC timer (no effect).

If the player that is attached to the npctimer logs out, the "OnTimerQuit:"
event label of that NPC will be triggered, so you can do the appropriate
cleanup (the player is still attached when this event is triggered).

The 'setnpctimer' command will explicitly set the timer to a given tick.
'getnpctimer' provides timer information. Its parameter defines what type:

 0 - Will return the current tick count of the timer.
 1 - Will return 1 if there are remaining "OnTimer<ticks>:" labels in the
     specified NPC waiting for execution.
 2 - Will return the number of times the timer has triggered and will trigger
     an "OnTimer<tick>:"  label in the specified NPC.

Example 1:

	<NPC Header> {
	// We need to use attachnpctimer because the mes command below needs RID attach
		attachnpctimer;
		initnpctimer;
		npctalk "I cant talk right now, give me 10 seconds";
		end;
	OnTimer5000:
		npctalk "Ok 5 seconds more";
		end;
	OnTimer6000:
		npctalk "4";
		end;
	OnTimer7000:
		npctalk "3";
		end;
	OnTimer8000:
		npctalk "2";
		end;
	OnTimer9000:
		npctalk "1";
		end;
	OnTimer10000:
		stopnpctimer;
		mes "[Man]";
		mes "Ok we can talk now";
		detachnpctimer;
		// and remember attachnpctimer and detachnpctimer can only use while the NPC timer is not running !
	}

Example 2:

	OnTimer15000:
		npctalk "Another 15 seconds have passed.";

		// You have to use 'initnpctimer' instead of 'setnpctimer 0'.
		// This is equal to 'setnpctimer 0' + 'startnpctimer'.
		// Alternatively, you can also insert another 'OnTimer15001' label so that the timer won't stop. */
		initnpctimer;
		end;

	// This OnInit label will run when the script is loaded, so that the timer
	// is initialized immediately as the server starts. It is dropped back to 0
	// every time the NPC says something, so it will cycle continuously.
	OnInit:
		initnpctimer;
		end;

Example 3:

	mes "[Man]";
	mes "I have been waiting " + (getnpctimer(0)/1000) + " seconds for you.";
	// We divide the timer returned by 1000 to convert milliseconds to seconds.
	close;

Example 4:

	mes "[Man]";
	mes "Ok, I will let you have 30 more seconds...";
	close2;
	setnpctimer (getnpctimer(0)-30000);
	// Notice the 'close2'. If there were a 'next' there the timer would be
	// changed only after the player pressed the 'next' button.
	end;

---------------------------------------

*sleep {<milliseconds>};
*sleep2 {<milliseconds>};
*awake "<NPC name>";

These commands are used to control the pause of a NPC.
sleep and sleep2 will pause the script for the given amount of milliseconds.
Awake is used to cancel a sleep. When awake is called on a NPC it will run as
if the sleep timer ran out, and thus making the script continue. Sleep and sleep2
basically do the same, but the main difference is that sleep will not keep the rid,
while sleep2 does. Also sleep2 will stop the script if there is no unit attached.

Examples:
	sleep 10000; //pause the script for 10 seconds and ditch the RID (so no player is attached anymore)
	sleep2 5000; //pause the script for 5 seconds, and continue with the RID attached.
	awake "NPC"; //Cancels any running sleep timers on the NPC 'NPC'.

---------------------------------------

*progressbar "<color>",<seconds>;

This command works almost like sleep2, but displays a progress bar
above the head of the currently attached character (like cast bar).
Once the given amount of seconds passes, the script resumes. If the
character moves while the progress bar progresses, it is aborted and
the script ends. The color format is in RGB (RRGGBB). The color is
currently ignored by the client and appears always green.

NOTE:
Ragexe clients are known to randomly crash if a message window is still open.
If possible make sure to close all message windows before triggering the progressbar command.

---------------------------------------

*progressbar_npc "<color>",<seconds>{,<"NPC Name">};

This command works like progressbar, but displays a progress bar
above the head of the currently attached (or given) NPC. Once the
given amount of seconds passes, the script resumes. The color format
is in RGB (RRGGBB). The color is currently ignored by the client and
appears always green.

---------------------------------------
//
5,1.- End of time-related commands
//
---------------------------------------

*announce "<text>",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>{,<char_id>}}}}}};

This command will broadcast a message to all or most players, similar to
@kami/@kamib GM commands.

	announce "This will be shown to everyone at all in yellow.",0;

The region the broadcast is heard in (target), source of the broadcast
and the color the message will come up as is determined by the flags.

The flag values are coded as constants in 'src/map/script_constants.hpp' to make them easier to use.

Target flags:
- bc_all: Broadcast message is sent server-wide (default).
- bc_map: Message is sent to everyone in the same map as the source of the broadcast (see below).
- bc_area: Message is sent to players in the vicinity of the source.
- bc_self: Message is sent only to current player , if the source flag is bc_pc it also can
			be used to send the Message to the character id if it's provided.
You cannot use more than one target flag.

Source flags:
- bc_pc: Broadcast source is the attached player or the character id if it's provided (default).
- bc_npc: Broadcast source is the NPC, not the player attached to the script
  (useful when a player is not attached or the message should be sent to those
  nearby the NPC).
You cannot use more than one source flag.

Special flags:
- bc_yellow: Broadcast will be displayed in yellow color (default).
- bc_blue: Broadcast will be displayed in blue color.
- bc_woe: Indicates that this broadcast is 'WoE Information' that can be disabled client-side.
Due to the way client handles broadcasts, it is impossible to set both bc_blue and bc_woe.

The optional parameters allow usage of broadcasts in custom colors, font-weights, sizes etc.
If any of the optional parameters is used, special flag is ignored.
Optional parameters may not work well (or at all) depending on a game client used.

The color parameter is a single number which can be in hexadecimal notation.
For example:
    announce "This will be shown to everyone at all in green.",bc_all,0x00FF00;
Will display a global announce in green. The color format is in RGB (0xRRGGBB).

In official scripts only two font-weights (types) are used:
 - normal (FW_NORMAL = 400, default),
 - bold (FW_BOLD = 700).

Default font size is 12.

Using this for private messages to players is probably not that good an idea,
but it can be used instead in NPCs to "preview" an announce.

	// This will be a private message to the player using the NPC that made the
	// announcement
	announce "This is my message just for you",bc_blue|bc_self;

	// This will be shown on everyones screen that is in sight of the NPC.
	announce "This is my message just for you people here",bc_npc|bc_area;

	// This will be a private message to the player with character id 150000
	announce "This is my message just for char id 150000",bc_self,0xFFF618,FW_NORMAL,12,0,0,150000;

---------------------------------------

*mapannounce "<map name>","<text>",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}}};

This command will work like 'announce' but will only broadcast to characters
currently residing on the specified map. The flag and optional parameters
parameters are the same as in 'announce', but target and source flags are ignored.

---------------------------------------

*areaannounce "<map name>",<x1>,<y1>,<x2>,<y2>,"<text>",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}}};

This command works like 'announce' but will only broadcast to characters
residing in the specified x1/y1-x2/y2 rectangle on the map given. The flags and
optional parameters are the same as in 'announce', but target and source flags are ignored.

	areaannounce "prt_church",0,0,350,350,"God's in his heaven, all right with the world",0;

---------------------------------------

*callshop "<name>"{,<option>};

These are a series of commands used to create dynamic shops.
The 'callshop' function calls an invisible shop (view -1) as if the player clicked on it.

The options are:
	0 = The normal window (buy, sell and cancel) (default)
	1 = The buy window
	2 = The sell window

Note: The <option> parameter only works on the 'shop' type NPC.

A shop called with this command will trigger the labels "OnBuyItem" and "OnSellItem"
(as long as an npcshop* command is executed from that NPC, see note below). These
labels, if used, will replace how the shop handles the buying and selling of items,
allowing for the creation of dynamic shops.

The label "OnBuyItem" sets the following arrays:
	@bought_nameid   - item ID bought
	@bought_quantity - amount bought

The label "OnSellItem" sets the following arrays:
	@sold_nameid        - item ID sold
	@sold_quantity      - amount sold
	@sold_refine        - refine count
	@sold_attribute     - if the item is broken (1) or not (0)
	@sold_identify      - if the item is identified (1) or not (0)
	@sold_enchantgrade  - enchantgrade
	@sold_card1         - card slot 1
	@sold_card2         - card slot 2
	@sold_card3         - card slot 3
	@sold_card4         - card slot 4
	@sold_option_id1    - random option ID 1
	@sold_option_val1   - random option value 1
	@sold_option_param1 - random option param 1
	@sold_option_id2    - random option ID 2
	@sold_option_val2   - random option value 2
	@sold_option_param2 - random option param 2
	@sold_option_id3    - random option ID 3
	@sold_option_val3   - random option value 3
	@sold_option_param3 - random option param 3
	@sold_option_id4    - random option ID 4
	@sold_option_val4   - random option value 4
	@sold_option_param4 - random option param 4
	@sold_option_id5    - random option ID 5
	@sold_option_val5   - random option value 5
	@sold_option_param5 - random option param 5

Note: These labels will only be triggered if an npcshop* command is executed because these
commands set a special data on the shop NPC, named master_nd in the source. The above labels
are triggered in the NPC whose master_nd is given in the shop.

A full example of a dynamic shop can be found in doc/sample/npc_dynamic_shop.txt.

---------------------------------------

*npcshopitem "<name>",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}};
*npcshopitem "<name>",<item id>,<price>,<stock>{,<item id>,<price>,<stock>{,<item id>,<price>,<stock>{,...}}};

This command lets you override the contents of an existing NPC shop or cashshop. The
current sell list will be wiped, and only the items specified with the price
specified will be for sale.

The function returns 1 if shop was updated successfully, or 0 if not found.

NOTES:
 - That you cannot use -1 to specify default selling price!
 - If the attached shop type is a market shop, notice that there is an extra parameter after price, <stock>. Make sure to not add duplicate items! For unlimited stock use -1.

---------------------------------------

*npcshopadditem "<name>",<item id>,<price>{,<item id>,<price>{,<item id>,<price>{,...}}};
*npcshopadditem "<name>",<item id>,<price>,<stock>{,<item id>,<price>,<stock>{,<item id>,<price>,<stock>{,...}}};

This command will add more items at the end of the selling list for the
specified NPC shop or cashshop. If you specify an item already for sell, that item will
appear twice on the sell list.

The function returns 1 if shop was updated successfully, or 0 if not found.

NOTES:
 - That you cannot use -1 to specify default selling price!
 - If attached shop type is market shop, need an extra param after price, it's <stock>
   and make sure don't add duplication item! For unlimited stock use -1.

---------------------------------------

*npcshopdelitem "<name>",<item id>{,<item id>{,<item id>{,...}}};

This command will remove items from the specified NPC shop or cashshop.
If the item to remove exists more than once on the shop, all instances will be
removed.

Note that the function returns 1 even if no items were removed. The return
value is only to confirm that the shop was indeed found.

---------------------------------------

*npcshopattach "<name>"{,<flag>};

This command will attach the current script to the given NPC shop.
When a script is attached to a shop, the events "OnBuyItem" and "OnSellItem"
of your script will be executed whenever a player buys/sells from the shop.
Additionally, the arrays @bought_nameid[], @bought_quantity[] or @sold_nameid[]
and @sold_quantity[] will be filled up with the items and quantities
bought/sold.

The optional parameter specifies whether to attach ("1") or detach ("0") from
the shop (the default is to attach). Note that detaching will detach any NPC
attached to the shop, even if it's from another script, while attaching will
override any other script that may be already attached.

The function returns 0 if the shop was not found, 1 otherwise.

NOTES:
 - If attached shop type is market shop, will be default to call the 'buy' window.

---------------------------------------

*npcshopupdate "<name>",<item_id>,<price>{,<stock>}

Update an entry from a shop. If the price is 0 it won't be changed. May also be used for
marketshop to update the stock quantity. For unlimited stock, use -1.
For other shop types, the stock value has no effect.

---------------------------------------

*waitingroom "<chatroom name>",<limit>{,"<event label>"{,<trigger>{,<required zeny>{,<min lvl>{,<max lvl>}}}}};

This command will create a chat room, owned by the NPC object running this
script and displayed above the NPC sprite.
The maximum length of a chat room name is 60 letters.

The limit is the maximum number of people allowed to enter the chat room.
The attached NPC is included in this count. If the optional event and trigger
parameters are given, the event label ("<NPC object name>::<label name>")
will be invoked as if with a 'doevent' upon the number of people in the chat
room reaching the given triggering amount.

// The NPC will just show a box above its head that says "Hello World", clicking
// it will do nothing, since the limit is zero.
    waitingroom "Hello World",0;

// The NPC will have a box above its head, it will say "Disco - Waiting Room"
// and will have 8 waiting slots. Clicking this will enter the chat room, where
// the player will be able to wait until 7 players accumulate. Once this happens,
// it will cause the NPC "Bouncer" run the label "OnStart".

    waitingroom "Disco - Waiting Room",8,"Bouncer::OnStart",7;

// The NPC will have a box above its head, it will say "Party - Waiting Room"
// and will have 8 waiting slots. Clicking this will allow a player who has
// 5000 zeny and lvl 50~99 to enter the chat room, where the player will be
// able to wait until 7 players accumulate. Once this happens, it will cause
// the NPC "Bouncer" run the label "OnStart".

	waitingroom "Party - Waiting Room",8,"Bouncer::OnStart",7,5000,50,99;

Creating a waiting room does not stop the execution of the script and it will
continue to the next line.

For more examples see the 2-1 and 2-2 job quest scripts which make extensive use
of waiting rooms.

---------------------------------------

*delwaitingroom {"<NPC object name"};

This command will delete a waiting room. If no parameter is given, it will
delete a waiting room attached to the NPC object running this command, if it is,
it will delete a waiting room owned by another NPC object. This is the only way
to get rid of a waiting room, nothing else will cause it to disappear.

It's not clear what happens to a waiting room if the NPC is disabled with
'disablenpc', by the way.

---------------------------------------

*enablewaitingroomevent {"<NPC object name>"};
*disablewaitingroomevent {"<NPC object name>"};
*enablearena;
*disablearena;

This will enable and disable triggering the waiting room event (see
'waitingroom') respectively. Optionally giving an NPC object name will do that
for a specified NPC object. The chat room will not disappear when triggering is
disabled and enabled in this manner and players will not be kicked out of it.
Enabling a chat room event will also cause it to immediately check whether the
number of users in it exceeded the trigger amount and trigger the event
accordingly.

Normally, whenever a waiting room was created to make sure that only one
character is, for example, trying to pass a job quest trial, and no other
characters are present in the room to mess up the script.

The 'enablearena'/'disablearena' commands are just aliases with no parameter.
These are supposedly left here for compatibility with official server scripts,
but no rAthena script uses these at the moment.

---------------------------------------

*getwaitingroomstate(<information type>{,"<NPC object name>"})

This function will return information about the waiting room state for the
attached waiting room or for a waiting room attached to the specified NPC if
any.

The valid information types are:

 0  - Number of users currently chatting.
 1  - Maximum number of users allowed.
 2  - Will return 1 if the waiting room has a trigger set.
      0 otherwise.
 3  - Will return 1 if the waiting room is currently disabled.
      0 otherwise.
 4  - The Title of the waiting room (string)
 5  - Password of the waiting room, if any. Pointless, since there is no way to
      set a password on a waiting room right now.
 16 - Event name of the waiting room (string)
 32 - Whether or not the waiting room is full.
 33 - Whether the amount of users in the waiting room is higher than the trigger
      number.

---------------------------------------

*warpwaitingpc "<map name>",<x>,<y>{,<number of people>};

This command will warp the amount of characters equal to the trigger number of
the waiting room chat attached to the NPC object running this command to the
specified map and coordinates, kicking them out of the chat. Those waiting the
longest will get warped first. It can also do a random warp on the same map
("Random" instead of map name) and warp to the save point ("SavePoint").

The list of characters to warp is taken from the list of the chat room members.
Those not in the chat room will not be considered even if they are talking to
the NPC in question. If the number of people is given, exactly this much people
will be warped.

This command can also keep track of who just got warped. It does this by setting
special variables:

$@warpwaitingpc[] is an array containing the account_id numbers of the
                  characters who were just warped.
$@warpwaitingpcnum contains the number of the character it just warped.

See also 'getpartymember' for advice on what to do with those variables.

The obvious way of using this effectively would be to set up a waiting room for
two characters to be warped onto a random PVP map for a one-on-one duel, for
example.

---------------------------------------

*waitingroomkick "<NPC object name>" , "<character name>";

This command kicks the given character from the waiting room attached to the given NPC.

---------------------------------------

*getwaitingroomusers "<NPC object name>";

This command get all the characters in the waiting room of the given NPC and stores
their gids in the array .@waitingroom_users[]. Also, stores the number of characters
in the variable .@waitingroom_usercount.

---------------------------------------

*kickwaitingroomall {"<NPC object name>"};

This command kicks everybody out of a specified waiting room chat.

---------------------------------------

*setmapflagnosave "<map name>","<alternate map name>",<x>,<y>;

This command sets the 'nosave' flag for the specified map and also gives an
alternate respawn-upon-relogin point.

It does not make a map impossible to make a save point on as you would normally
think, 'savepoint' will still work. It will, however, make the specified map
kick the reconnecting players off to the alternate map given to the coordinates
specified.

---------------------------------------

*setmapflag "<map name>",<flag>{,<zone>{,<type>}};

This command marks a specified map with the given map flag, which will alter the
behavior of the map. A full list of mapflags is located in 'src/map/script_constants.hpp' with
the 'mf_' prefix, and documentation can be found in 'doc/mapflags.txt'.

The map flags alter the behavior of the map regarding teleporting (mf_nomemo,
mf_noteleport, mf_nowarp, mf_nogo), storing location when disconnected
(mf_nosave), dead branch usage (mf_nobranch), penalties upon death
(mf_nopenalty, mf_nozenypenalty), PVP behavior (mf_pvp, mf_pvp_noparty,
mf_pvp_noguild), WoE behavior (mf_gvg,mf_gvg_noparty), ability to use
skills or open up trade deals (mf_notrade, mf_novending, mf_noskill, mf_noicewall),
current weather effects (mf_snow, mf_fog, mf_sakura, mf_leaves, mf_rain, mf_clouds,
mf_fireworks) and whether night will be in effect on this map (mf_nightenabled).

The optional parameter <zone> is used to set the zone for 'restricted' mapflags,
GM level bypass for 'nocommand', base/job experience for 'bexp'/'jexp', and
flag for 'battleground'.

For 'skill_damage' mapflag:
	- Setting the flag here will adjust the global (all skills) damage on the map.
	- <zone> is the -100 to 100000 damage adjustment value of the skills.
	- See 'getmapflag' for the different <type> values.
For 'skill_duration' mapflag:
	- <zone> is the skill ID to adjust.
	- <type> is the percentage of adjustment from 0 to 100000.

---------------------------------------

*removemapflag "<map name>",<flag>{,<zone>};

This command removes a mapflag from a specified map.
See 'setmapflag' for a list of mapflags.

The optional parameter 'zone' is used to remove the zone from restricted mapflags.

---------------------------------------

*getmapflag("<map name>",<flag>{,<type>})

This command checks the status of a given mapflag and returns the mapflag's state.
0 means OFF, and 1 means ON. See 'setmapflag' for a list of mapflags.

For MF_RESTRICTED, the zone value of the map is returned.

The optional parameter 'type' is used in the 'skill_damage' mapflag:
 SKILLDMG_MAX: if mapflag is set (default)
 SKILLDMG_PC: damage against players
 SKILLDMG_MOB: damage against mobs
 SKILLDMG_BOSS: damage against bosses
 SKILLDMG_OTHER: damage against other
 SKILLDMG_CASTER: caster type

---------------------------------------

*setbattleflag "<battle flag>",<value>{,<reload>};
*getbattleflag("<battle flag>")

Sets or gets the value of the given battle flag.
Battle flags are the flags found in the battle / *.conf files and is also used in Lupus' variable rates script.
If the reload value is given then the server will attempt to reload monster data
to properly apply the new rates. This applies to EXP/Drop type configs. The server
will only attempt to reload specific configs.

Examples:

// Will set the base experience rate to 20x (2000%) - Monster data will continue to use previous rates at server start
	setBattleFlag "base_exp_rate",2000;

// Will set the base experience rate to 20x (2000%) - Monster data will be reloaded to new value
	setBattleFlag "base_exp_rate",2000,true;

// Will return the value of the base experience rate (when used after the above example, it would print 2000).
	mes getBattleFlag("base_exp_rate");

---------------------------------------

*warpportal <source x>,<source y>,"<map name>",<target x>,<target y>;

Creates a warp portal identical to the Acolyte "Warp Portal" skill.
The source coordinates specify the portal's location on the map of the invoking NPC.
The target map and coordinates determine the destination of the portal.

Examples:

// Will create a warp portal on the NPC's map at 150,150 leading to prontera, coords 150,180.
	warpportal 150,150,"prontera",150,180;

---------------------------------------

*mapwarp "<from map>","<to map>",<x>,<y>{,<type>,<ID>};

This command will collect all characters located on the From map and warp them
wholesale to the same point on the To map, or randomly distribute them there if
the coordinates are zero. "Random" is understood as a special To map name and
will mean randomly shuffling everyone on the same map.

Optionally, a type and ID can be specified. Available types are:

 0 - Everyone
 1 - Guild
 2 - Party

Example:

// Will warp all members of guild with ID 63 on map prontera to map alberta.
	mapwarp "prontera","alberta",150,150,1,63;

---------------------------------------
\\
5,2.- Guild-related commands
\\
---------------------------------------

*maprespawnguildid "<map name>",<guild id>,<flag>;

This command goes through the specified map and for each player and monster
found there does stuff.

Flag is a bit-mask (add up numbers to get effects you want)
 1 - warp all guild members to their save points.
 2 - warp all non-guild members (including guildless players) to their save points.
 4 - remove all monsters which are not guardian or Emperium.

Flag 7 will, therefore, mean 'wipe all mobs but guardians and the Emperium and
kick all characters out', which is what the official scripts do upon castle
surrender. Upon start of WoE, the scripts do 2 (warp all intruders out).

For examples, check the WoE scripts in the distribution.

---------------------------------------

*agitstart;
*agitend;
*agitstart2;
*agitend2;
*agitstart3;
*agitend3;

These commands will start and end War of Emperium FE, War of Emperium SE,
or War of Emperium TE.

This is a bit more complex than it sounds, since the commands themselves won't
actually do anything interesting, except causing all 'OnAgitStart:' and
'OnAgitEnd:', 'OnAgitStart2:' and 'OnAgitEnd2:', or 'OnAgitStart3:' and
'OnAgitEnd3:' in the case of latter two commands, events to run everywhere,
respectively. They are used as  simple triggers to run a lot of complex scripts
all across the server, and they, in turn, are triggered by clock with an
'OnClock<time>:' time-triggering label.

---------------------------------------

*gvgon "<map name>";
*gvgoff "<map name>";

These commands will turn GVG mode for the specified maps on and off, setting up
appropriate map flags. In GVG mode, maps behave as if during the time of WoE,
even though WoE itself may or may not actually be in effect.

---------------------------------------

*gvgon3 "<map name>";
*gvgoff3 "<map name>";

Theses commands behave identically to gvgon/gvgoff, but apply GVG_TE mapflag.

---------------------------------------

*flagemblem <guild id>;

This command only works when run by the NPC objects which have sprite id 722,
which is a 3D guild flag sprite. If it isn't, the data will change, but nothing
will be seen by anyone. If it is invoked in that manner, the emblem of the
specified guild will appear on the flag, though, if any players are watching it
at this moment, they will not see the emblem change until they move out of sight
of the flag and return.

This is commonly used in official guildwar scripts with a function call which
returns a guild id:

// This will change the emblem on the flag to that of the guild that owns
// "guildcastle"

    flagemblem GetCastleData("guildcastle",1);

---------------------------------------

*guardian "<map name>",<x>,<y>,"<name to show>",<mob id>{,"<event label>"{,<guardian index>}};

This command is roughly equivalent to 'monster', but is meant to be used with
castle guardian monsters and will only work with them. It will set the guardian
characteristics up according to the castle's investment values and otherwise
set the things up that only castle guardians need.

Since trunk r12524:
Returns the id of the mob or 0 if an error occurred.
When 'guardian index' isn't supplied it produces a temporary guardian.
Temporary guardians are not saved with the castle and can't be accessed by guardianinfo.

---------------------------------------

*guardianinfo("<map name>", <guardian number>, <type>);

This function will return various info about the specified guardian, or -1
if it fails for some reason. It is primarily used in the castle manager NPC.

Map name and guardian number (value between 0 and 7) define the target.
Type indicates what information to return:
 0 - visibility (whether the guardian is installed or not)
 1 - max. hp
 2 - current hp

---------------------------------------

*getguildalliance(<guild id1>, <guild id2>);

This command will return the relation between 2 guilds.

NOTE: This should be used in collaboration with 'requestguildinfo' as the
map-server needs to request for information from the char-server.

Return values:
	-2 - Guild ID1 does not exist
	-1 - Guild ID2 does not exist
	 0 - Both guilds have no relation OR guild ID aren't given
	 1 - Both guilds are allies
	 2 - Both guilds are antagonists

---------------------------------------
//
5,2.- End of guild-related commands
//
---------------------------------------

*npcspeed <speed value>;
*npcwalkto <x>,<y>;
*npcstop;

These commands will make the NPC object in question move around the map. As they
currently are, they are a bit buggy and are not useful for much more than making
an NPC move randomly around the map.

'npcspeed' will set the NPCs walking speed to a specified value. As in the
@speed GM command, 200 is the slowest possible speed while 0 is the fastest
possible (instant motion). 100 is the default character walking speed.

'npcwalkto' will start the NPC sprite moving towards the specified coordinates
on the same map it is currently on. The script proceeds immediately after the
NPC begins moving.

'npcstop' will stop the motion.

While in transit, the NPC will be clickable, but invoking it will cause it to
stop moving, which will make its coordinates different from what the client
computed based on the speed and motion coordinates. The effect is rather
unnerving.

Only a few NPC sprites have walking animations, and those that do, do not get
the animation invoked when moving the NPC, due to the problem in the NPC walking
code, which looks a bit silly. You might have better success by defining a job-
sprite based sprite id in 'db/mob_avail.yml' with this.

---------------------------------------

*movenpc "<NPC name>",<x>,<y>{,<dir>};

This command looks like the NPCWalkToxy function,but is a little different.

While NPCWalkToXY just makes the NPC 'walk' to the coordinates given (which
sometimes gives problems if the path isn't a straight line without objects),
this command just moves the NPC. It basically warps out and in on the current
and given spot. Direction can be used to change the NPC's facing direction.

Example:

// This will move Bugga from it's old coordinates to the new coordinates at 100,20 (if those coordinates are legit).
	moveNPC "Bugga",100,20;

---------------------------------------

=====================
|6.- Other commands.|
=====================
---------------------------------------

*debugmes "<message>";

This command will send a debug message to the server console (map-server window). It
will not be displayed anywhere else.

    // Displays "NAME has clicked me!" in the map-server window.
    debugmes strcharinfo(0) + " has clicked me!";

---------------------------------------

*errormes "<message>";

This command will send an error message to the server console (map-server window). It
will not be displayed anywhere else.

    // Displays "NAME has clicked me!" in the map-server window.
    errormes strcharinfo(0) + " has clicked me!";

---------------------------------------

*logmes "<message>";

This command will write the message given to the map server NPC log file, as
specified in 'conf/log_athena.conf'. In the TXT version of the server, the log
file is 'log/npclog.log' by default. In the SQL version, if SQL logging is
enabled, the message will go to the 'npclog' table, otherwise, it will go to the
same log file.

If logs are not enabled, nothing will happen.

---------------------------------------

*globalmes "<message>"{,"<NPC name>"};

This command will send a message to the chat window of all currently connected
characters.

If NPC name is specified, the message will be sent as if the sender would be
the NPC with the said name.
The display name of the NPC won't get appended in front of the message.

---------------------------------------

*rand(<number>{,<number>});

This function returns a number ...
(if you specify one) ... randomly positioned between 0 and the number you specify -1.
(if you specify two) ... randomly positioned between the two numbers you specify.

rand(10)  would result in 0,1,2,3,4,5,6,7,8 or 9
rand(0,9) would result in 0,1,2,3,4,5,6,7,8 or 9
rand(2,5) would result in 2,3,4 or 5

---------------------------------------

*viewpoint <action>,<x>,<y>,<point number>,<color>{,<Char ID>};

This command will mark places on the mini map in the client connected to the
invoking character. It uses the normal X and Y coordinates from the main map.
The colors of the marks are defined using a hexadecimal number, same as the ones
used to color text in 'mes' output, but are written as hexadecimal numbers in C.
(They look like 0x<six numbers>.)

Action is what you want to do with a point, 1 will set it, while 2 will clear
it. 0 will also set it, but automatically removes the point after 15 seconds.
Point number is the number of the point - you can have several. If more than
one point is drawn at the same coordinates, they will cycle, which can be used
to create flashing marks.

	// This command will show a mark at coordinates X 30 Y 40, is mark number 1,
	// and will be red.

	viewpoint 1,30,40,1,0xFF0000;

This will create three points:

	viewpoint 1,30,40,1,0xFF0000;
	viewpoint 1,35,45,2,0xFF0000;
	viewpoint 1,40,50,3,0xFF0000;

And this is how you remove them:

	viewpoint 2,30,40,1,0xFF0000;
	viewpoint 2,35,45,2,0xFF0000;
	viewpoint 2,40,50,3,0xFF0000;

The client determines what it does with the points entirely, the server keeps no
memory of where the points are set whatsoever.

---------------------------------------

*viewpointmap "<map name>",<action>,<x>,<y>,<point number>,<color>;

This command will mark places on the mini map in the client for all players currently
on the defined map. It uses the normal X and Y coordinates from the main map.
The colors of the marks are defined using a hexadecimal number, same as the ones
used to color text in 'mes' output, but are written as hexadecimal numbers in C.
(They look like 0x<six numbers>.)

Action is what you want to do with a point, 1 will set it, while 2 will clear
it. 0 will also set it, but automatically removes the point after 15 seconds.
Point number is the number of the point - you can have several. If more than
one point is drawn at the same coordinates, they will cycle, which can be used
to create flashing marks.

	// This command will show a mark at coordinates X 30 Y 40, is mark number 1,
	// and will be red for all players currently on the map Prontera.

	viewpointmap "prontera",1,30,40,1,0xFF0000;

This will create three points:
	.@map$ = "prontera";
	viewpointmap .@map$,1,30,40,1,0xFF0000;
	viewpointmap .@map$,1,35,45,2,0xFF0000;
	viewpointmap .@map$,1,40,50,3,0xFF0000;

And this is how you remove them:
	.@map$ = "prontera";
	viewpointmap .@map$,2,30,40,1,0xFF0000;
	viewpointmap .@map$,2,35,45,2,0xFF0000;
	viewpointmap .@map$,2,40,50,3,0xFF0000;

The client determines what it does with the points entirely, the server keeps no
memory of where the points are set whatsoever.

---------------------------------------

*cutin "<filename>",<position>;

This command will display a picture, usually an NPC illustration, also called
cutin, for the currently attached client. The position parameter determines the
placement of the illustration and takes following values:

	0	bottom left corner
	1	bottom middle
	2	bottom right corner
	3	middle of screen in a movable window with an empty title bar
	4	middle of screen without the window header, but still movable
	255	clear all displayed cutins

The picture is read from data\texture\유저인터페이스\illust, from both the GRF archive
and data folder, and is required to be a bitmap. The file extension .bmp can be
omitted. Magenta color (#ff00ff) is considered transparent. There is no limit
placed on the size of the illustrations by the client, although loading of large
pictures (about 700x700 and larger) causes the client to freeze shortly (lag).
Typically the size is about 320x480. New illustrations can be added by just
putting the new file into the location above.

The client is able to display only one cutin at the same time and each new one
will cause the old one to disappear. To delete the currently displayed
illustration without displaying a new one, an empty file name and position 255
must be used.

	// Displays the Comodo Kafra illustration in lower right corner.
	cutin "kafra_07",2;

	// Typical way to end a script, which displayed an illustration during a
	// dialog with a player.
	mes "See you.";
	close2;
	cutin "",255;
	end;

---------------------------------------

*emotion <emotion number>{,<target>};

This command makes an object display an emotion sprite above their own as
if they were doing that emotion. For a full list of emotion numbers,
see 'src/map/script_constants.hpp' under 'ET_'. The not so obvious ones are 'ET_QUESTION'
(a question mark) and 'ET_SURPRISE' (the exclamation mark).

The optional target parameter specifies who will get the emotion on top of
their head. Use the target Game ID (GID).

---------------------------------------

*misceffect <effect number>;

This command, if run from an NPC object that has a sprite, will call up a
specified effect number, centered on the NPC sprite. If the running code does
not have an object ID (a 'floating' NPC) or is not running from an NPC object at
all (an item script) the effect will be centered on the character who's RID got
attached to the script, if any. For usable item scripts, this command will
create an effect centered on the player using the item.

A full list of known effects is found in 'doc/effect_list.txt'. The list of
those that actually work may differ greatly between client versions.

---------------------------------------

*soundeffect "<effect filename>",<type>;
*soundeffectall "<effect filename>",<type>{,"<map name>"}{,<x0>,<y0>,<x1>,<y1>};

These two commands will play a sound effect to either the invoking character
only ('soundeffect') or multiple characters ('soundeffectall'). If the running
code does not have an object ID (a 'floating' NPC) or is not running from an NPC
object at all (an item script) the sound will be centered on the character who's
RID got attached to the script, if any. If it does, it will be centered on that
object. (an NPC sprite)

Effect filename is the filename in a GRF. It must have the .wav extension.

It's not quite certain what the 'type' actually does, it is sent to the client
directly. It probably determines which directory to play the effect from.
It's certain that giving 0 for the number will play sound files from '\data\wav\',
but where the other numbers will read from is unclear.

The sound files themselves must be in the PCM format, and file names should also
have a maximum length of 23 characters including the .wav extension:

soundeffect "1234567890123456789.wav", 0; // this will play the soundeffect
soundeffect "12345678901234567890.wav", 0; // throw gravity error

You can add your own effects this way, naturally.

---------------------------------------

*playBGM "<BGM filename>";
*playBGMall "<BGM filename>"{,"<map name>"{,<x0>,<y0>,<x1>,<y1>}};

These two commands will play a Background Music to either the invoking character
only ('playBGM') or multiple characters ('playBGMall').

BGM filename is the filename in /BGM/ folder. It has to be in .mp3 extension.

It's not required to specify the extension inside the script.
If coordinates are omitted, BGM will be broadcasted on the entire map. If the map name
is omitted as well the BGM will be played for the entire server.

You can add your own BGMs this way, naturally.

---------------------------------------

*pvpon "<map name>";
*pvpoff "<map name>";

These commands will turn PVP mode for the specified maps on and off. Beside
setting the flags referred to in 'setmapflag', 'pvpon' will also create a PVP
timer and ranking as will @pvpon GM command do.

---------------------------------------

*atcommand "<command>";

This command will run the given command line exactly as if it was typed in from
the keyboard by the player connected to the invoking character, and that
character belonged to an account which had GM level 99.

	// This will ask the invoker for a character name and then use the '@nuke'
	// GM command on them, killing them mercilessly.
	input .@player$;
	atcommand "@nuke " + .@player$;

Note that for atcommands bound using 'bindatcmd', this command will execute the
original atcommand, not the script-bound atcommand.

---------------------------------------

*charcommand "<command>";

This command will run the given command line exactly as if it was typed in from
the keyboard from a character that belonged to an account which had GM level 99.

The commands can also run without an attached rid.

	// This would do the same as above, but now
	// it doesn't need a player attached by default.
	charcommand "#option 0 0 0 Roy";

---------------------------------------

*bindatcmd "<command>","<NPC object name>::<event label>"{,<atcommand level>,<charcommand level>};

This command will bind a NPC event label to an atcommand. Upon execution of the
atcommand, the user will invoke the NPC event label. Each atcommand is only allowed
one binding. If you rebind, it will override the original binding.
Note: The default level for atcommand is 0 while the default level for charcommand is 100.

The following variables are set upon execution:
	.@atcmd_command$       =  The name of the @command used.
	.@atcmd_parameters$[]  =  Array containing the given parameters, starting from an index of 0.
	.@atcmd_numparameters  =  The number of parameters defined.

Example:

	When a user types the command "@test", an angel effect will be shown.

	-	script	atcmd_example	-1,{
	OnInit:
		bindatcmd "test",strnpcinfo(3) + "::OnAtcommand";
		end;
	OnAtcommand:
		specialeffect2 EF_ANGEL2;
		end;
	}

---------------------------------------

*unbindatcmd "<command>";

This command will unbind a NPC event label from an atcommand.

---------------------------------------

*useatcmd "<command>";

This command will execute a script-bound atcommand for the attached RID. If the
supplied command is not bound to any script, this command will act like 'atcommand'
and attempt to execute a source-defined command.

The three .@atcmd_***** variables will NOT be set when invoking script-bound atcommands
in this way.

---------------------------------------

*camerainfo <range>,<rotation>,<latitude>{,<char id>};

This command will update the client's camera information with the given values where
the client can be the attached character or the player given by the char id parameter.
Note: This requires 2016-05-25aRagexeRE or newer.

The values given will be divided by 100 and transmitted as floating-point number.

	range		The zoomfactor of the camera.
				Default: 230000 (230.0) when fully zoomed in
				Maximum: 400000 (400.0) when fully zoomed out

	rotation	The rotation of the camera.
				Default: 0 (0.0) when no rotation is applied
				Maximum: 360000 (360.0°) when fully rotated

	latitude	The angle of the camera.
				Default: -50000 (-50.0)
				Maximum: -75000 (-75.0)

---------------------------------------

*refineui({<char id>})

Opens the refine UI for the attached player or the given character id.

This feature requires 2016-10-12aRagexeRE or newer.

---------------------------------------

*openstylist({<char id>})

Opens the stylist UI for the attached player or the given character id.

This feature requires packet version 2015-11-04 or newer.

---------------------------------------

*laphine_synthesis({<item id>})
*laphine_synthesis({<"item name">})

Opens the laphine synthesis UI for <item ID> or <item name> for the attached player.
If run from within an item script <item ID> or <item name> is optional.

This feature requires packet version 2016-06-01 or newer.

---------------------------------------

*laphine_upgrade()

Opens the laphine upgrade UI for the attached player.

This feature requires packet version 2017-07-26 or newer.

This function is intended for use in item scripts.

---------------------------------------

*openbank({<char id>})

Opens the Bank UI for the attached player or the given character ID.

This command requires packet version 2015-12-02 or newer.

---------------------------------------

*enchantgradeui {<char id>};

Opens the enchantgrade UI for the attached character or the player given by the char ID parameter.

This command requires packet version 2020-07-24 or newer.

---------------------------------------

*set_reputation_points(<type>,<points>{,<char id>})

Sets the reputation points via <points> for reputation group <type> for the attached player or the given character ID.
<type> is the client side index as stored in the Id field of the reputation.yml database files.

---------------------------------------

*get_reputation_points(<type>{,<char id>})

Gets the reputation points for reputation group <type> for the attached player or the given character ID.
<type> is the client side index as stored in the Id field of the reputation.yml database files.

---------------------------------------

*add_reputation_points(<type>,<points>{,<char id>})

Adds the reputation points via <points> for reputation group <type> for the attached player or the given character ID.
<type> is the client side index as stored in the Id field of the reputation.yml database files.

---------------------------------------

*item_reform({<item id>{,<char id>}})
*item_reform({<"item name">{,<char id>}})

Opens the item reform UI for <item ID> or <item name> for the attached player or the given character ID.
If run from within an item script <item ID> or <item name> is optional.

This feature requires packet version 2021-11-03 or newer.

---------------------------------------

*item_enchant(<client side LUA index>{,<char ID>});

Opens the enchant UI for the attached character or the player given by the <char ID> parameter.
If the player exceeds 70% weight the client will not open the enchant UI and will trigger an
error message instead.

This command requires packet version 2021-11-03 or newer.

---------------------------------------
\\
6,1.- Unit-related commands
\\
---------------------------------------

*unitwalk <GID>,<x>,<y>{,"<event label>"};
*unitwalkto <GID>,<Target GID>{,"<event label>"};

This command will tell a <GID> to walk to a position, defined either as a set of
coordinates or another object. The command returns a 1 for success and 0 upon failure.

If coordinates are passed, the <GID> will walk to the given x,y coordinates on the
unit's current map. While there is no way to move across an entire map with 1 command
use, this could be used in a loop to move long distances.

If an object ID is passed, the initial <GID> will walk to the <Target GID> (similar to
walking to attack). This is based on the distance from <GID> to <Target ID>. This command
uses a hard walk check, so it will calculate a walk path with obstacles. Sending a bad
target ID will result in an error.

An optional Event Label can be passed as well which will execute when the <GID> has reached
the given coordinates or <Target GID>.

Examples:

// Makes player walk to the coordinates (150,150).
	unitwalk getcharid(3),150,150;

// Performs a conditional check with the command and reports success or failure to the player.
	if (unitwalk(getcharid(3),150,150))
		dispbottom "Walking you there...";
	else
		dispbottom "That's too far away, man.";

// Makes player walk to another character named "WalkToMe".
	unitwalkto getcharid(3),getcharid(3,"WalkToMe");

---------------------------------------

*unitattack <GID>,<Target ID>{,<action type>};
*unitattack <GID>,"<Target Name>"{,<action type>};

This command will make a <GID> attack the specified target. It returns true upon
success and false for all failures.

If <GID> is a player and a non-zero <action type> is given, the unit will perform a
continuous attack instead of a single attack.

Note:
Using unitattack with <GID> 0 means that it will use the currently attached unit.
For players any attack requests will fail, because talking to an NPC prevents attacking a monster.
Therefore you need to detach the player from the NPC before using this command.

---------------------------------------

*unitkill <GID>;

This command will kill a <GID>.

---------------------------------------

*unitwarp <GID>,"<map name>",<x>,<y>;

This command will warp a <GID> to the specified map and coordinates.

If <GID> is zero, the command runs for the unit that invoked the script. This can be
used with "OnTouch" to warp monsters:

OnTouch:
	unitwarp 0,"this",-1,-1;

---------------------------------------

*unitstopattack <GID>;

This command will make a <GID> stop attacking.

---------------------------------------

*unitstopwalk <GID>{,<flag>};

This command will make a <GID> stop moving.

Note: If this is called from OnTouch, then the walktimer attached to the unit is
removed from OnTouch which causes this command to not stop the unit from walking.
Suggest to use 'unitblockmove' to forcefully stop the unit with OnTouch.

The <flag> value affects how the unit is stopped. The following flags are bitwise
values (can be combined using the pipe operator):
	USW_NONE = Unit will keep walking to their original destination.
	USW_FIXPOS = Issue a fixpos packet afterwards.
	USW_MOVE_ONCE = Force the unit to move one cell if it hasn't yet.
	USW_MOVE_FULL_CELL = Enable moving to the next cell when unit was already half-way there (may cause on-touch/place side-effects, such as a scripted map change).
	USW_FORCE_STOP = Force stop moving.

This command will also remove the state tracking used for 'unitwalk' and 'unitwalkto'.

---------------------------------------

*unittalk <GID>,"<text>"{,flag};

This command will make a <GID> say a message. The display name of the <GID> won't get appended in front of the message.
flag: Specify target
   bc_area - Message is sent to players in the vicinity of the source (default).
   bc_self - Message is sent only to player attached.

---------------------------------------

*unitskilluseid <GID>,<skill id>,<skill lvl>{,<target id>,<casttime>,<cancel>,<Line_ID>,<ignore_range>};
*unitskilluseid <GID>,"<skill name>",<skill lvl>{,<target id>,<casttime>,<cancel>,<Line_ID>,<ignore_range>};
*unitskillusepos <GID>,<skill id>,<skill lvl>,<x>,<y>{,<casttime>,<cancel>,<Line_ID>,<ignore_range>};
*unitskillusepos <GID>,"<skill name>",<skill lvl>,<x>,<y>{,<casttime>,<cancel>,<Line_ID>,<ignore_range>};

This is the replacement of the older commands, these use the same values for
GID as the other unit* commands (See 'GID').

Skill ID is the ID of the skill, skill level is the level of the skill.
Cast time is the amount of seconds to add or remove from the skill. Use a positive value to
add and negative value to subtract. Using 0 or no value will use the default skill cast time.
For the position, the x and y are given in the UnitSkillUsePos.

<cancel> defines if the cast can be interrupted when hit (true/false).
CastCancel from skill_db.yml is the default value of <cancel>.

If <Line_ID> is defined (positive number, default 0) the monster will say the message from 'Line_ID'
in mob_chat_db.yml when casting the skill.

If <ignore_range> is true, the unit will ignore the skill range defined by the database. The default value is false.
Attention! this setting does not work for all skills.

---------------------------------------

*unitexists <GID>;

Checks if the given Game ID exists. Returns false if the object doesn't exist, or true if
it does.

---------------------------------------

*getunittype <GID>;

Returns the type of object from the given Game ID. Returns -1 if the given GID does not
exist.

Return values:
	BL_PC   - Character object
	BL_MOB  - Monster object
	BL_PET  - Pet object
	BL_HOM  - Homunculus object
	BL_MER  - Mercenary object
	BL_NPC  - NPC object
	BL_ELEM - Elemental object

---------------------------------------

*getunitname <GID>;

Gets the name of the given unit. Supported types are monster, homunculus, pet, and NPC.
Mercenary and Elemental don't support custom names.

Returns "Unknown" if unit is not found.

---------------------------------------

*setunitname <GID>,"<new name>";

Changes the name of the given unit to the new name given. Supported types are monster,
homunculus, and pet. To change an NPC's name, see 'setnpcdisplay'. Mercenary and
Elemental don't support custom names.

Changing a homunculus or pet name will be permanent.

Returns "Unknown" if unit is not found.

---------------------------------------

*setunittitle <GID>,<title>;

Apply a <title> to the given <GID>.

Note: This only works on non-player types. It also will only work on mobs if battle_config.show_mob_info is not enabled.

---------------------------------------

*getunittitle <GID>;

Returns the title of the given <GID>.

---------------------------------------

*getunitdata <GID>,<arrayname>;
*setunitdata <GID>,<parameter>,<new value>;

This is used to get and set special data related to the unit.
With getunitdata, the array given will be filled with the current data. In setunitdata
the indexes in the array would be used to set that data on the unit.

Both getunitdata and setunitdata will return -1 if the given GID does not exist.

Note: When adjusting a unit's stat (STR, AGI, etc) the unit's respective statuses are
      recalculated (HIT, FLEE, etc) automatically. Keep in mind that some stats don't
	  affect a unit's status and will have to directly be modified.

Parameters (indexes) for monsters are:
	UMOB_SIZE
	UMOB_LEVEL
	UMOB_HP
	UMOB_MAXHP
	UMOB_MASTERAID
	UMOB_MAPID
	UMOB_X
	UMOB_Y
	UMOB_SPEED
	UMOB_MODE
	UMOB_AI
	UMOB_SCOPTION
	UMOB_SEX
	UMOB_CLASS
	UMOB_HAIRSTYLE
	UMOB_HAIRCOLOR
	UMOB_HEADBOTTOM
	UMOB_HEADMIDDLE
	UMOB_HEADTOP
	UMOB_CLOTHCOLOR
	UMOB_SHIELD
	UMOB_WEAPON
	UMOB_LOOKDIR
	UMOB_CANMOVETICK
	UMOB_STR
	UMOB_AGI
	UMOB_VIT
	UMOB_INT
	UMOB_DEX
	UMOB_LUK
	UMOB_SLAVECPYMSTRMD
	UMOB_DMGIMMUNE
	UMOB_ATKRANGE
	UMOB_ATKMIN
	UMOB_ATKMAX
	UMOB_MATKMIN
	UMOB_MATKMAX
	UMOB_DEF
	UMOB_MDEF
	UMOB_HIT
	UMOB_FLEE
	UMOB_PDODGE
	UMOB_CRIT
	UMOB_RACE
	UMOB_ELETYPE
	UMOB_ELELEVEL
	UMOB_AMOTION
	UMOB_ADELAY
	UMOB_DMOTION
	UMOB_TARGETID
	UMOB_ROBE
	UMOB_BODY2
	UMOB_GROUP_ID
	UMOB_IGNORE_CELL_STACK_LIMIT
	UMOB_RES
	UMOB_MRES
	UMOB_DAMAGETAKEN

-----

Parameter (indexes) for homunculi are:
	UHOM_SIZE
	UHOM_LEVEL
	UHOM_HP
	UHOM_MAXHP
	UHOM_SP
	UHOM_MAXSP
	UHOM_MASTERCID
	UHOM_MAPID
	UHOM_X
	UHOM_Y
	UHOM_HUNGER
	UHOM_INTIMACY
	UHOM_SPEED
	UHOM_LOOKDIR
	UHOM_CANMOVETICK
	UHOM_STR
	UHOM_AGI
	UHOM_VIT
	UHOM_INT
	UHOM_DEX
	UHOM_LUK
	UHOM_DMGIMMUNE
	UHOM_ATKRANGE
	UHOM_ATKMIN
	UHOM_ATKMAX
	UHOM_MATKMIN
	UHOM_MATKMAX
	UHOM_DEF
	UHOM_MDEF
	UHOM_HIT
	UHOM_FLEE
	UHOM_PDODGE
	UHOM_CRIT
	UHOM_RACE
	UHOM_ELETYPE
	UHOM_ELELEVEL
	UHOM_AMOTION
	UHOM_ADELAY
	UHOM_DMOTION
	UHOM_TARGETID
	UHOM_GROUP_ID

-----

Parameter (indexes) for pets are:
	UPET_SIZE
	UPET_LEVEL
	UPET_HP
	UPET_MAXHP
	UPET_MASTERAID
	UPET_MAPID
	UPET_X
	UPET_Y
	UPET_HUNGER
	UPET_INTIMACY
	UPET_SPEED
	UPET_LOOKDIR
	UPET_CANMOVETICK
	UPET_STR
	UPET_AGI
	UPET_VIT
	UPET_INT
	UPET_DEX
	UPET_LUK
	UPET_DMGIMMUNE
	UPET_ATKRANGE
	UPET_ATKMIN
	UPET_ATKMAX
	UPET_MATKMIN
	UPET_MATKMAX
	UPET_DEF
	UPET_MDEF
	UPET_HIT
	UPET_FLEE
	UPET_PDODGE
	UPET_CRIT
	UPET_RACE
	UPET_ELETYPE
	UPET_ELELEVEL
	UPET_AMOTION
	UPET_ADELAY
	UPET_DMOTION
	UPET_GROUP_ID

-----

Parameter (indexes) for mercenaries are:
	UMER_SIZE
	UMER_HP
	UMER_MAXHP
	UMER_MASTERCID
	UMER_MAPID
	UMER_X
	UMER_Y
	UMER_KILLCOUNT
	UMER_LIFETIME
	UMER_SPEED
	UMER_LOOKDIR
	UMER_CANMOVETICK
	UMER_STR
	UMER_AGI
	UMER_VIT
	UMER_INT
	UMER_DEX
	UMER_LUK
	UMER_DMGIMMUNE
	UMER_ATKRANGE
	UMER_ATKMIN
	UMER_ATKMAX
	UMER_MATKMIN
	UMER_MATKMAX
	UMER_DEF
	UMER_MDEF
	UMER_HIT
	UMER_FLEE
	UMER_PDODGE
	UMER_CRIT
	UMER_RACE
	UMER_ELETYPE
	UMER_ELELEVEL
	UMER_AMOTION
	UMER_ADELAY
	UMER_DMOTION
	UMER_TARGETID
	UMER_GROUP_ID

-----

Parameter (indexes) for elementals are:
	UELE_SIZE
	UELE_HP
	UELE_MAXHP
	UELE_SP
	UELE_MAXSP
	UELE_MASTERCID
	UELE_MAPID
	UELE_X
	UELE_Y
	UELE_LIFETIME
	UELE_MODE
	UELE_SPEED
	UELE_LOOKDIR
	UELE_CANMOVETICK
	UELE_STR
	UELE_AGI
	UELE_VIT
	UELE_INT
	UELE_DEX
	UELE_LUK
	UELE_DMGIMMUNE
	UELE_ATKRANGE
	UELE_ATKMIN
	UELE_ATKMAX
	UELE_MATKMIN
	UELE_MATKMAX
	UELE_DEF
	UELE_MDEF
	UELE_HIT
	UELE_FLEE
	UELE_PDODGE
	UELE_CRIT
	UELE_RACE
	UELE_ELETYPE
	UELE_ELELEVEL
	UELE_AMOTION
	UELE_ADELAY
	UELE_DMOTION
	UELE_TARGETID
	UELE_GROUP_ID

-----

Parameter (indexes) for NPCs are:
	UNPC_LEVEL
	UNPC_HP
	UNPC_MAXHP
	UNPC_MAPID
	UNPC_X
	UNPC_Y
	UNPC_LOOKDIR
	UNPC_STR
	UNPC_AGI
	UNPC_VIT
	UNPC_INT
	UNPC_DEX
	UNPC_LUK
	UNPC_PLUSALLSTAT
	UNPC_DMGIMMUNE
	UNPC_ATKRANGE
	UNPC_ATKMIN
	UNPC_ATKMAX
	UNPC_MATKMIN
	UNPC_MATKMAX
	UNPC_DEF
	UNPC_MDEF
	UNPC_HIT
	UNPC_FLEE
	UNPC_PDODGE
	UNPC_CRIT
	UNPC_RACE
	UNPC_ELETYPE
	UNPC_ELELEVEL
	UNPC_AMOTION
	UNPC_ADELAY
	UNPC_DMOTION
	UNPC_SEX
	UNPC_CLASS
	UNPC_HAIRSTYLE
	UNPC_HAIRCOLOR
	UNPC_HEADBOTTOM
	UNPC_HEADMIDDLE
	UNPC_HEADTOP
	UNPC_CLOTHCOLOR
	UNPC_SHIELD
	UNPC_WEAPON
	UNPC_ROBE
	UNPC_BODY2
	UNPC_DEADSIT
	UNPC_GROUP_ID

*Notes:
		- *_SIZE: small (0); medium (1); large (2)
	    - *_MAPID: this refers to the map_data index (from src/map/map.cpp), not the mapindex_db index (from src/common/mapindex.cpp)
			-- For 'setunitdata', map name can also be passed in as a valid value instead of map ID
		- *_SPEED: 20 - 1000
		- *_MODE: see doc/mob_db_mode_list.txt
		- *_LOOKDIR: north (0), northwest (1), west (2), etc
		- *_CANMOVETICK: seconds * 1000 the unit will be unable to move
		- *_DMGIMMUNE: unit will be immune to damage (1), or will receive damage (0)
		- *_HUNGER: 0 - 100
		- *_INTIMACY: 0 - 1000
		- *_LIFETIME: seconds * 1000 the unit will be 'alive' for
		- *_AMOTION: see doc/mob_db.txt
		- *_ADELAY: see doc/mob_db.txt
		- *_DMOTION: see doc/mob_db.txt
		- *_BODY2: enable (1) the alternate display, or disable (0)
		- *_TARGETID: when set to 0 the unit will release the target and stop attacking

		- UMOB_AI: none (0); attack (1); marine sphere (2); flora (3); zanzou (4); legion (5); faw (6)
		- UMOB_SCOPTION: see the 'Variables' section at the top of this document
		- UMOB_SLAVECPYMSTRMD: make the slave copy the master's mode (1), or not (0)

		- UNPC_PLUSALLSTAT: same as 'bAllStats'; increases/decreases all stats by given amount
		- UNPC_DEADSIT: stand (0), dead (1), sit (2)

Example:
	// Spawn some Porings and save the Game ID.
	// - Keep in mind, when the 'monster' script command is used,
	// - all the spawned monster GID's are stored in an array
	// - called $@mobid[].
	monster "prontera",149,190,"Poring",1002,10;
	.GID = $@mobid[9]; // Store and modify the 10th Poring spawned to make him stronger!

	// Save the strong Poring's mob data in the .@por_arr[] variable. (.@por_arr[1] being level, .@por_arr[13] being class, etc.)
	// With this data we can have the NPC display or manipulate it how we want. This does not have to be ran before 'setunitdata'.
	getunitdata .GID,.@por_arr;

	// Set the max HP of the Poring to 1000 (current HP will also get updated to 1000).
	setunitdata .GID,UMOB_MAXHP,1000;

---------------------------------------

*geteleminfo <type>{,<char_id>};

Get info of elemental of attached player or player by char_id.
Other info can be obtained by 'getunitdata' command.

Valid types are:
   0: Elemental ID
   1: Elemental Game ID

---------------------------------------
\\
6,1.- End of unit-related commands
\\
---------------------------------------

*npcskill <skill id>,<skill lvl>,<stat point>,<NPC level>;
*npcskill "<skill name>",<skill lvl>,<stat point>,<NPC level>;

This command causes the attached NPC object to cast a skill on the attached
player. The skill will have no cast time or cooldown. The player must be
within the default skill range or the command will fail silently.

The "stat point" parameter temporarily sets all NPC stats to the given value,
and "NPC level" is the temporary level of the NPC (used in some skills).
Neither value can be greater than the max level defined in config, and will
not work properly if the NPC has a mob sprite.

Before using skills, NPCs must have basic stats applied to them depending on the
skill being used: UNPC_ATKMIN, UNPC_ATKMAX, UNPC_MATKMIN, UNPC_MATKMAX, UNPC_STR,
UNPC_AGI, UNPC_VIT, UNPC_INT, UNPC_DEX, UNPC_LUK.
See 'setunitdata' for more information on usage.

    // Casts Level 10 Heal on the attached player, calculated with
    // all stats 99 and base level 60.
    npcskill "AL_HEAL",10,99,60;

---------------------------------------

*day;
*night;

These two commands will switch the entire server between day and night mode
respectively. If your server is set to cycle between day and night by
configuration, it will eventually return to that cycle.

Example:

-	script	DayNight	-1,{
OnClock0600:
	day;
	end;
OnInit:
	// setting correct mode upon server start-up
	if (gettime(DT_HOUR)>=6 && gettime(DT_HOUR)<18) end;
OnClock1800:
	night;
	end;
}

This script allows to emulate the day/night cycle as the server does, but also
allows triggering additional effects upon change, like announces, gifts, etc.
The day/night cycle set by configuration should be disabled when this script is used.

---------------------------------------

*defpattern <set number>,"<regular expression pattern>","<event label>";
*activatepset <set number>;
*deactivatepset <set number>;
*deletepset <set number>;

This set of commands is only available if the server is compiled with regular
expressions library enabled. Default compilation and most binary distributions
aren't, which is probably bad, since these, while complex to use, are quite
fascinating.

They will make the NPC object listen for text spoken publicly by players and
match it against regular expression patterns, then trigger labels associated
with these regular expression patterns.

Patterns are organized into sets, which are referred to by a set number. You can
have multiple sets patterns, and multiple patterns may be active at once.
Numbers for pattern sets start at 1.

'defpattern' will associate a given regular expression pattern with an event
label. This event will be triggered whenever something a player says is matched
by this regular expression pattern, if the pattern is currently active.

'activatepset' will make the pattern set specified active. An active pattern
will enable triggering labels defined with 'defpattern', which will not happen
by default.
'deactivatepset' will deactivate a specified pattern set. Giving -1 as a pattern
set number in this case will deactivate all pattern sets defined.

'deletepset' will delete a pattern set from memory, so you can create a new
pattern set in its place.

Using regular expressions is high wizardry. But with this high wizardry comes
unparalleled power of text manipulation. For an explanation of what a regular
expression pattern is, see a few web pages:

http://www.regular-expressions.info/
http://www.weitz.de/regex-coach/

For an example of this in use, see doc/sample/npc_test_pcre.txt

With this you could, for example, automatically punish players for asking for
Zeny in public places, or alternatively, automatically give them Zeny instead if
they want it so much.

---------------------------------------

*pow(<number>,<power>)

Returns the result of the calculation.

Example:
	.@i = pow(2,3); // .@i will be 8

---------------------------------------

*sqrt(<number>)

Returns the square-root of a number.

Example:
	.@i = sqrt(25); // .@i will be 5

---------------------------------------

*distance(<x0>,<y0>,<x1>,<y1>)

Returns distance between 2 points.

Example:
	.@i = distance(100,200,101,202);

---------------------------------------

*min(<number or array>{,<number or array>,...})
*minimum(<number or array>{,<number or array>,...})
*max(<number or array>{,<number or array>,...})
*maximum(<number or array>{,<number or array>,...})

Returns the smallest (or biggest) from the set of given parameters.
These parameters have to be either numbers or number arrays.

Example:
	.@minimum = min( 1, -6, -2, 8, 2 ); // .@minimum will be equal to -6
	.@maximum = max( 0, 5, 10, 4 ); // .@maximum will be equal to 10
	.@level = min( BaseLevel, 70 ); // .@level will be the character's base level, capped to 70

	setarray .@testarray, 4, 5, 12, 6, 7, 3, 8, 9, 10;

	.@minimum = min( .@testarray ); // .@minimum will be equal to 3
	.@maximum = max( .@testarray ); // .@maximum will be equal to 12

	.@minimum = min( -6, 1, 2, 3, .@testarray ); // .@minimum will be equal to -6
	.@maximum = max( -6, 1, 2, 3, .@testarray ); // .@maximum will be equal to 12

---------------------------------------

*cap_value(<number>, <min>, <max>)

Returns the number but capped between <min> and <max>.

Example:
	// capped between 0 ~ 100
	.@value = cap_value(10, 0, 100);   // .@value will be equal to 10
	.@value = cap_value(1000, 0, 100); // .@value will be equal to 100
	.@value = cap_value(-10, 3, 100);  // .@value will be equal to 3

---------------------------------------

*round(<number>,<precision>);
*ceil(<number>,<precision>);
*floor(<number>,<precision>);

Returns <number> rounded to multiple of <precision>.

`round` function will round the <number> up if its division with <precision> yield a remainder
with a value equals to or more than half of <precision>. Otherwise, it rounds the <number> down.
`ceil` always round the <number> up.
`floor` always round the <number> down.

---------------------------------------

*md5("<string>")

Returns the md5 checksum of a number or string.

Example:
	mes md5(12345);
	mes md5("12345"); 	// Will both display 827ccb0eea8a706c4c34a16891f84e7b
	mes md5("qwerty"); 	// Will display d8578edf8458ce06fbc5bb76a58c5ca4

---------------------------------------

*query_sql("your MySQL query"{, <array variable>{, <array variable>{, ...}}});
*query_logsql("your MySQL query"{, <array variable>{, <array variable>{, ...}}});

Executes an SQL query. A 'select' query can fill array variables with up to 2 billion rows of
values, and will return the number of rows (i.e. array size) or -1 on failure.

Note that 'query_sql' runs on the main database while 'query_logsql' runs on the log database.

Example:
	.@nb = query_sql("select name,fame from `char` ORDER BY fame DESC LIMIT 5", .@name$, .@fame);
	mes "Hall Of Fame: TOP5";
	mes "1." + .@name$[0] + "(" + .@fame[0] + ")"; // largest fame value.
	mes "2." + .@name$[1] + "(" + .@fame[1] + ")";
	mes "3." + .@name$[2] + "(" + .@fame[2] + ")";
	mes "4." + .@name$[3] + "(" + .@fame[3] + ")";
	mes "5." + .@name$[4] + "(" + .@fame[4] + ")";

---------------------------------------

*escape_sql(<value>)

Converts the value to a string and escapes special characters so that it is safe to
use in query_sql(). Returns the escaped form of the given value.

Example:
	.@name$ = "John's Laptop";
	.@esc_str$ = escape_sql(.@name$); // Escaped string: John\'s Laptop

---------------------------------------

*setiteminfo(<item id>,<type>,<value>)
*setiteminfo(<aegis item name>,<type>,<value>)

This function will set some value of an item.
Returns the new value on success, or -1 on fail (item_id not found or invalid type).

Valid types are:
	ITEMINFO_BUY             (0)   -  Buy Price
	ITEMINFO_SELL            (1)   -  Sell Price
	ITEMINFO_TYPE            (2)   -  Type
	ITEMINFO_MAXCHANCE       (3)   -  maxchance (max drop chance of this item, e.g. 1 = 0.01%)
	                                  if = 0, then monsters don't drop it at all (rare or a quest item)
	                                  if = 10000, then this item is sold in NPC shops only
	ITEMINFO_GENDER          (4)   -  Gender
	ITEMINFO_LOCATIONS       (5)   -  Location(s)
	ITEMINFO_WEIGHT          (6)   -  Weight
	ITEMINFO_ATTACK          (7)   -  ATK
	ITEMINFO_DEFENSE         (8)   -  DEF
	ITEMINFO_RANGE           (9)   -  Range
	ITEMINFO_SLOT           (10)   -  Slot
	ITEMINFO_VIEW           (11)   -  View
	ITEMINFO_EQUIPLEVELMIN  (12)   -  equipment LV
	ITEMINFO_WEAPONLEVEL    (13)   -  weapon LV
	ITEMINFO_ALIASNAME      (14)   -  AliasName
	ITEMINFO_EQUIPLEVELMAX  (15)   -  equipment LV Max
	ITEMINFO_MAGICATTACK    (16)   -  matk if RENEWAL is defined
	ITEMINFO_ARMORLEVEL     (19)   -  armor LV

Example:
	setiteminfo 7049,ITEMINFO_WEIGHT,9990; // Stone now weighs 999.0

---------------------------------------

*setitemscript(<item id>,<"{ new item script }">{,<type>});

Set a new script bonus to the Item. Very useful for game events.
You can remove an item's itemscript by leaving the itemscript argument empty.
Returns 1 on success, or 0 on fail (item_id not found or new item script is invalid).
Type can optionally be used indicates which script to set (default is 0):
 0 - Script
 1 - EquipScript
 2 - UnEquipScript

Example:
	setitemscript 2637,"{ if (isequipped(2236) == 0)end; if (getskilllv(26)){skill 40,1;}else{skill 26,1+isequipped(2636);} }";
	setitemscript 2637,"";

---------------------------------------

*atoi("<string>")
*axtoi("<string>")
*strtol("<string>", base)

These commands are used to convert strings to numbers. 'atoi' will interpret
given string as a decimal number (base 10), while 'axtoi' interprets strings as
hexadecimal numbers (base 16). 'strtol' lets the user specify a base (valid range
is between 2 and 36 inclusive, or the special value0, which means auto-detection).

The 'atoi' and 'strtol' functions conform to the C functions with the same names,
and 'axtoi' is the same as strtol, with a base of 16. Results are clamped to signed
32 bit int range (INT_MIN ~ INT_MAX).

Examples:

	.@var = atoi("11");        // Sets .@var to 11
	.@var = axtoi("FF");       // Sets .@var to 255
	mes axtoi("11");           // Displays 17 (1 = 1, 10 = 16)
	.@var = strtol("11", 10);  // Sets .@var to 11 (11 base 10)
	.@var = strtol("11", 16);  // Sets .@var to 17 (11 base 16)
	.@var = strtol("11", 0);   // Sets .@var to 11 (11 base 10, auto-detected)
	.@var = strtol("0x11", 0); // Sets .@var to 17 (11 base 16, auto-detected because of the "0x" prefix)
	.@var = strtol("011", 0);  // Sets .@var to 9 (11 base 8, auto-detected because of the "0" prefix)
	.@var = strtol("11", 2);   // Sets .@var to 3 (binary 11)

---------------------------------------

*compare("<string>","<substring>")

This command returns 1 or 0 when the substring is in the main string (1) or not (0).
This command is not case sensitive.

Examples:
	//dothis; will be executed ('Bloody Murderer' contains 'Blood').
	if (compare("Bloody Murderer","Blood"))
		dothis;

	//dothat; will not be executed ('Blood butterfly' does not contain 'Bloody').
	if (compare("Blood Butterfly","Bloody"))
		dothat;

---------------------------------------

*strcmp("<string>","<string>")

This command compares two strings are returns a value:
   1: string 1 > string 2
   0: strings are equal
  -1: string 1 < string 2

---------------------------------------

*getstrlen("<string>")

This function will return the length of the string given as an argument. It is
useful to check if anything input by the player exceeds name length limits and
other length limits and asking them to try to input something else.

---------------------------------------

*charisalpha("<string>",<position>)

This function will return 1 if the character number Position in the given string
is a letter, 0 if it isn't a letter but a digit or a space.
The first letter is position 0.

---------------------------------------

*charat(<string>,<index>)

Returns char at specified index. If index is out of range, returns empty string.
The first letter of a string is index 0.

Example:
	charat("This is a string", 10); //returns "s"

---------------------------------------

*setchar(<string>,<char>,<index>)

Returns the original string with the char at the specified index set to the
specified char. If index out of range, the original string will be returned.
Only the 1st char in the <char> parameter will be used.

Example:
	setchar("Cat", "B", 0); //returns "Bat"

---------------------------------------

*insertchar(<string>,<char>,<index>)

Returns the original string with the specified char inserted at the specified
index. If index is out of range, the char will be inserted on the end of the
string that it is closest. Only the 1st char in the <char> parameter will be used.

Example:
	insertchar("laughter", "s", 0); //returns "slaughter"

---------------------------------------

*delchar(<string>,<index>)

Returns the original string with the char at the specified index removed.
If index is out of range, original string will be returned.

Example:
	delchar("Diet", 3); //returns "Die"

---------------------------------------

*strtoupper(<string>)
*strtolower(<string>)

Returns the specified string in its uppercase/lowercase form.
All non-alpha characters will be preserved.

Example:
	strtoupper("The duck is blue!!"); //returns "THE DUCK IS BLUE!!"

---------------------------------------

*charisupper(<string>,<index>)
*charislower(<string>,<index>)

Returns 1 if character at specified index of specified string is
uppercase/lowercase. Otherwise, 0. Characters not of the alphabet will return 0.

Example:
	charisupper("rAthena", 1); //returns 1

---------------------------------------

*substr(<string>,<start_index>,<end_index>)

Returns the sub-string of the specified string inclusively between the set
indexes. If indexes are out of range, or the start index is after the end
index, an empty string will be returned.

Example:
	substr("foobar", 3, 5); //returns "bar"

---------------------------------------

*explode(<dest_array>,<string>,<delimiter>)

Breaks a string up into substrings based on the specified delimiter. Substrings
will be stored within the specified string array. Only the 1st char of the
delimiter parameter will be used. If an empty string is passed as a delimiter,
the string will be placed in the array in its original form.

Example:
	explode(.@my_array$, "Explode:Test:1965:red:PIE", ":");
	//.@my_array$ contents will be...
	//.@my_array$[0]: "Explode"
	//.@my_array$[1]: "Test"
	//.@my_array$[2]: "1965"
	//.@my_array$[3]: "red"
	//.@my_array$[4]: "PIE"

---------------------------------------

*implode(<string_array>{,<glue>})

Combines all substrings within the specified string array into a single string.
If the glue parameter is specified, it will be inserted inbetween each substring.

Example:
	setarray .@my_array$[0], "This", "is", "a", "test";
	implode(.@my_array$, " "); //returns "This is a test"

---------------------------------------

*sprintf(<format>[,param[,param[,...]]])

C style sprintf. The resulting string is returned same as in PHP. All C format
specifiers are supported except %n. More info: sprintf @ www.cplusplus.com.
The number of params is only limited by rA's script engine.

Example:
	.@format$ = "The %s contains %d monkeys";
	dispbottom(sprintf(.@format$, "zoo", 5));        //prints "The zoo contains 5 monkeys"
	dispbottom(sprintf(.@format$, "barrel", 82));    //prints "The barrel contains 82 monkeys"

---------------------------------------

*sscanf(<string>,<format>[,param[,param[,...]]])

C style sscanf. All C format specifiers are supported.
More info: sscanf @ www.cplusplus.com. The number of params is only limited
by rA's script engine.

Example:
	sscanf("This is a test: 42 foobar", "This is a test: %d %s", .@num, .@str$);
	dispbottom(.@num + " " + .@str$); //prints "42 foobar"

---------------------------------------

*strpos(<haystack>,<needle>{,<offset>})

PHP style strpos. Finds a substring (needle) within a string (haystack).
The offset parameter indicates the index of the string to start searching.
Returns index of substring on successful search, else -1.
Comparison is case sensitive.

Example:
	strpos("foobar", "bar", 0); //returns 3
	strpos("foobarfoo", "foo", 0); //returns 0
	strpos("foobarfoo", "foo", 1); //returns 6

---------------------------------------

*replacestr(<input>, <search>, <replace>{, <usecase>{, <count>}})

Replaces all instances of a search string in the input with the specified
replacement string. By default is case sensitive unless <usecase> is set
to 0. If specified it will only replace as many instances as specified
in the count parameter.

Example:
	replacestr("testing tester", "test", "dash"); //returns "dashing dasher"
	replacestr("Donkey", "don", "mon", 0); //returns "monkey"
	replacestr("test test test test test", "test", "yay", 0, 3); //returns "yay yay yay test test"

---------------------------------------

*countstr(<input>, <search>{, <usecase>})

Counts all instances of a search string in the input. By default is case
sensitive unless <usecase> is set to 0.

Example:
	countstr("test test test Test", "test"); //returns 3
	countstr("cake Cake", "Cake", 0); //returns 2

---------------------------------------

*preg_match(<regular expression pattern>,<string>{,<offset>})

Searches a string for a match to the regular expression provided. The
offset parameter indicates the index of the string to start searching.
Returns offsets to captured substrings, or 0 if no match is found.

This command is only available if the server is compiled with the regular
expressions library enabled.

---------------------------------------

*setfont <font>;

This command sets the current RO client interface font to one of the
fonts stored in data\*.eot by using an ID of the font. When the ID
of the currently used font is used, default interface font is used
again.

	0 - Default
	1 - RixLoveangel
	2 - RixSquirrel
	3 - NHCgogo
	4 - RixDiary
	5 - RixMiniHeart
	6 - RixFreshman
	7 - RixKid
	8 - RixMagic
	9 - RixJJangu

---------------------------------------

*showdigit <value>{,<type>};

Displays given numeric 'value' in large digital clock font on top of
the screen. The optional parameter 'type' specifies visual aspects
of the "clock" and can be one of the following values:

	0 - Displays the value for 5 seconds (default).
	1 - Incremental counter (1 tick/second).
	2 - Decremental counter (1 tick/second). Does not stop at zero,
		but overflows.
	3 - Decremental counter (2 ticks/second). Two digits only, stops
		at zero.

Except for type 3 the value is interpreted as seconds and formatted
as time in days, hours, minutes and seconds. Note, that the official
script command does not have the optional parameter.

	// displays 23:59:59 for 5 seconds
	showdigit 86399;

	// counter that starts at 60 and runs for 30 seconds
	showdigit 60,3;

---------------------------------------

*setcell "<map name>",<x1>,<y1>,<x2>,<y2>,<type>,<flag>;

Each map cell has several 'flags' that specify the properties of that cell.
These include terrain properties (walkability, shootability, presence of water),
skills (basilica, land protector, ...) and other (NPC nearby, no vending, ...).
Each of these can be 'on' or 'off'. Together they define a cell's behavior.

This command lets you alter these flags for all map cells in the specified
(x1,y1)-(x2,y2) rectangle. The 'flag' can be 0 or 1 (0:clear flag, 1:set flag).
The 'type' defines which flag to modify. Possible options see 'src/map/script_constants.hpp'.

type:
	cell_walkable
	cell_shootable
	cell_water
	cell_npc
	cell_basilica
	cell_landprotector
	cell_novending
	cell_nochat
	cell_maelstrom
	cell_icewall

Example:

	setcell "arena",0,0,300,300,cell_basilica,1;
	setcell "arena",140,140,160,160,cell_basilica,0;
	setcell "arena",135,135,165,165,cell_walkable,0;
	setcell "arena",140,140,160,160,cell_walkable,1;

This will add a makeshift ring into the center of the map. The ring will be
surrounded by a 5-cell wide 'gap' to prevent interference from outside, and
the rest of the map will be marked as 'basilica', preventing observers from
casting any offensive skills or fighting among themselves. Note that the wall
will not be shown nor known client-side, which may cause movement problems.

Another example:

OnBarricadeDeploy:
	setcell "schg_cas05",114,51,125,51,cell_walkable,0;
	end;
OnBarricadeBreak:
	setcell "schg_cas05",114,51,125,51,cell_walkable,1;
	end;

This could be a part of the WoE:SE script, where attackers are not allowed
to proceed until all barricades are destroyed. This script would place and
remove a nonwalkable row of cells after the barricade mobs.

---------------------------------------

*checkcell ("<map name>",<x>,<y>,<type>);

This command will return 1 or 0, depending on whether the specified cell has
the 'type' flag set or not. There are various types to check, all mimicking
the server's cell_chk enumeration. The types can be found in 'src/map/script_constants.hpp'.

The meaning of the individual types can be confusing, so here's an overview:
  - cell_chkwall/water/cliff
    these check directly for the 'terrain component' of the specified cell
  - cell_chkpass/reach/nopass/noreach
    passable = not wall & not cliff, reachable = passable wrt. no-stacking mod
  - cell_chknpc/basilica/landprotector/novending/nochat
    these check for specific dynamic flags (their name indicates what they do)

Example:
	mes "Pick a destination map.";
	input .@map$;
	mes "Alright, now give me the coordinates.";
	input .@x;
	input .@y;
	if ( !checkcell(.@map$,.@x,.@y,cell_chkpass) ) {
		mes "Can't warp you there, sorry!";
		close;
	} else {
		mes "Ok, get ready...";
		close2;
		warp .@map$, .@x, .@y;
		end;
	}

---------------------------------------

*getfreecell "<map name>",<rX>,<rY>{,<x>,<y>,<rangeX>,<rangeY>,<flag>};

Finds a free cell on the given map and stores the reference to the found cell
in <rX> and <rY>. Passing <x> and <y> with <rangeX> and <rangeY> allows for
searching within a specified area on the given map. The <flag> is a bitmask
and has the following possible values:
 - 1 = Random cell on the map or from <x>,<y> range. (default)
 - 2 = The target should be able to walk to the target tile.
 - 4 = There shouldn't be any players around the target tile (use the no_spawn_on_player setting).

Examples:
	getfreecell("prontera",.@x,.@y); // Find a random empty cell in Prontera and store it within .@x and .@y
	getfreecell("prontera",.@x,.@y,150,150,5,5); // Find a random empty cell on 150,150 (with a range of 5x5) in Prontera and store it within .@x and .@y

---------------------------------------

*setwall "<map name>",<x>,<y>,<size>,<dir>,<shootable>,"<name>";
*delwall "<name>";

Creates an invisible wall, an array of "setcell" starting from x,y and doing a
line of the given size in the given direction. The difference with setcell is
this one update client part too to avoid the glitch problem. Directions are the
same as NPC sprite facing directions: 0=north, 1=northwest, 2=west, etc.

---------------------------------------

*checkwall "<name>";

This command will return true if the wall with the given name exists, false otherwise.

---------------------------------------

*readbook <book id>,<page>;

This command will open a book item at the specified page.

---------------------------------------

*open_roulette( {char_id} )

Opens the roulette window for the currently attached character or the character
with the given character id.

---------------------------------------

*naviregisterwarp("<Name of Link>", "<dest_map>", <dest_x>, <dest_y>)

Only useful when using the map-server-generator. Registers an extra warp from this
npc to the destination map/x/y for the generated client files.

---------------------------------------

*navihide

Only useful when using the map-server-generator. Hides this npc and all links from
this npc in the navigation generation.

---------------------------------------

========================
|7.- Instance commands.|
========================
---------------------------------------

*instance_create("<instance name>"{,<instance mode>{,<owner id>}});

Creates an instance for the <owner id> of <mode>. The instance name, along with
all other instance data, is read from 'db/(pre-)re/instance_db.yml'. Upon success,
the command generates a unique instance ID, duplicates all listed maps and NPCs,
sets the alive time, and triggers the "OnInstanceInit" label in all NPCs inside
the instance.

Instance Mode options:
 IM_NONE: Attached to no one.
 IM_CHAR: Attached to a single character.
 IM_PARTY: Attached to a party (default instance mode).
 IM_GUILD: Attached to a guild.
 IM_CLAN: Attached to a clan.

The command returns the instance ID upon success, and these values upon failure:
 -1: Invalid type.
 -2: Character/Party/Guild/Clan not found.
 -3: Instance already exists.
 -4: No free instances (MAX_INSTANCE exceeded).

---------------------------------------

*instance_destroy {<instance id>};

Destroys instance with the ID <instance id>. If no ID is specified, the instance
the script is attached to is used. If that fails, the script will come to a halt.
This will also trigger the "OnInstanceDestroy" label in all NPCs inside the instance.

---------------------------------------

*instance_enter("<instance name>",{<x>,<y>,<char_id>,<instance id>});

Warps the attached player to the specified <instance id>. If no ID is specified,
the IM_PARTY instance the invoking player is attached to is used.

The map and coordinates are located in 'db/(pre-)re/instance_db.yml'.

The command returns IE_OK upon success, and these values upon failure:
 IE_NOMEMBER:	Party/Guild/Clan not found (for party/guild/clan modes).
 IE_NOINSTANCE:	Character/Party/Guild/Clan does not have an instance.
 IE_OTHER:		Other errors (invalid instance name, instance doesn't match with character/party/guild/clan).

Put -1 for x and y if want to warp player with default entrance coordinates.

---------------------------------------

*instance_npcname("<npc name>"{,<instance id>})

Returns the unique name of the instanced script. If no ID is specified,
the instance the script is attached to is used. If that fails, the script
will come to a halt.

---------------------------------------

*instance_mapname("<map name>"{,<instance id>})

Returns the unique name of the instanced map. If no instance ID is specified,
the instance the script is attached to is used. If that fails, the command
returns an empty string instead.

---------------------------------------

*instance_id({<instance mode>})

Returns the unique instance ID of the given mode.

By default (no parameter given) the command returns the instance ID from the attached NPC.
If <instance mode> is provided the instance ID of the currently attached player is returned.
If that fails, the function will return 0.

Please note that the command always requires the parameter <instance mode> to get the instance ID of an attached player!

Instance Mode options:
 IM_CHAR:	Attached to character.
 IM_PARTY:	Attached to character's party.
 IM_GUILD:	Attached to character's guild.
 IM_CLAN:	Attached to character's clan.

Examples:
	// Example with an attached player :
	npctalk "The current instance ID (mode party) from the attached player is : " + instance_id(IM_PARTY);

	// Example with an attached NPC on an instance map :
	npctalk "The current instance ID from the attached NPC is : " + instance_id();

---------------------------------------

*instance_warpall "<map name>",<x>,<y>{,<instance id>,{<flag>}};

Warps all players in the <instance id> to <map name> to the given coordinates.
If no ID is specified, the IM_PARTY instance the invoking player is attached
to is used. If that fails, the script will come to a halt.

<flag> bitmask allows to add restrictions.

Available values for the <flag> bitmask:
 IWA_NONE			No restriction. (default)
 IWA_NOTDEAD		If dead players are warped or not

---------------------------------------

*instance_announce <instance id>,"<text>",<flag>{,<fontColor>{,<fontType>{,<fontSize>{,<fontAlign>{,<fontY>}}}}};

Broadcasts a message to all players in the <instance id> currently residing on
an instance map. If 0 is specified for <instance id>, the instance the script
is attached to is used.

For details on the other parameters, see 'announce'.

---------------------------------------

*instance_check_party(<party id>{,<amount>{,<min>{,<max>}}})

This function checks if a party meets certain requirements, returning 1 if all
conditions are met and 0 otherwise. It will only check online characters.

amount - number of online party members (default is 1).
min    - minimum level of all characters in the party (default is 1).
max    - maximum level of all characters in the party (default is max level in conf).

Example:

if (instance_check_party(getcharid(1),2,2,149)) {
	mes "Your party meets the Memorial Dungeon requirements.",
	mes "All online members are between levels 1-150 and at least two are online.";
	close;
} else {
	mes "Sorry, your party does not meet requirements.";
	close;
}

---------------------------------------

*instance_check_guild(<guild id>{,<amount>{,<min>{,<max>}}})

This function checks if a guild meets certain requirements, returning 1 if all
conditions are met and 0 otherwise. It will only check online characters.

amount - number of online guild members (default is 1).
min    - minimum level of all characters in the guild (default is 1).
max    - maximum level of all characters in the guild (default is max level in conf).

Example:

if (instance_check_guild(getcharid(2),2,2,149)) {
	mes "Your guild meets the Memorial Dungeon requirements.",
	mes "All online members are between levels 1-150 and at least two are online.";
	close;
} else {
	mes "Sorry, your guild does not meet requirements.";
	close;
}

---------------------------------------

*instance_check_clan(<clan id>{,<amount>{,<min>{,<max>}}})

This function checks if a clan meets certain requirements, returning 1 if all
conditions are met and 0 otherwise. It will only check online characters.

amount - number of online clan members (default is 1).
min    - minimum level of all characters in the clan (default is 1).
max    - maximum level of all characters in the clan (default is max level in conf).

Example:

if (instance_check_clan(getcharid(5),2,2,149)) {
	mes "Your clan meets the Memorial Dungeon requirements.",
	mes "All online members are between levels 1-150 and at least two are online.";
	close;
} else {
	mes "Sorry, your clan does not meet requirements.";
	close;
}

---------------------------------------

*instance_info("<instance name>",<info type>{,<instance_db map index>});

Returns the specified <info type> of the given <instance name> from the instance database.
If the <instance name> is unknown or an invalid <info type> is supplied -1 will be returned.

Valid info types:
 IIT_ID: Instance database ID as integer.
 IIT_TIME_LIMIT: Instance database total life time as integer.
 IIT_IDLE_TIMEOUT: Instance database timeout time as integer.
 IIT_ENTER_MAP: Instance database enter map as string.
 IIT_ENTER_X: Instance database enter X location as integer.
 IIT_ENTER_Y: Instance database enter Y location as integer.
 IIT_MAPCOUNT: Instance database total maps as integer.
 IIT_MAP: Instance database map name from the given <instance_db map index> as string.
          If the index is invalid an empty string will be returned.

Example:

.@name$ = "Endless Tower";
mes .@name$ + " will be destroyed if no one is in the instance for " + instance_info(.@name$,IIT_IDLETIMEOUT) + " seconds.";
// Endless Tower will be destroyed if no one is in the instance for 300 seconds.

---------------------------------------

*instance_live_info(<info type>{,<instance id>});

Returns the specified <info type> of instance attached to the npc or, if
an instance ID is specified, of that instance.

Valid <info type>:
ILI_NAME	- Instance Name
			  Return the name of the instance or "" if that fails.
ILI_MODE	- Instance Mode
			  Return IM_NONE, IM_CHAR, IM_PARTY, IM_GUILD, IM_CLAN or -1 if that fails.
ILI_OWNER	- Owner ID
			  Return an ID according to the instance mode of the instance attached/specified or -1 if that fails.
			  When the instance mode is IM_NONE, ILI_OWNER will return the npc ID that created the instance,
			  IM_CHAR	- the owner char ID
			  IM_PARTY	- the party ID
			  IM_GUILD	- the guild ID
			  IM_CLAN	- the clan ID

Examples:
	// Return the instance name of the instance attached to the npc.
	.@instance_name$ = instance_live_info(ILI_NAME);

	// Return the guild owner ID of the given instance ID.
	.@owner = instance_live_info(ILI_OWNER, instance_id(IM_GUILD));

---------------------------------------

*instance_list(<"map name">{,<instance mode>});

Creates the array '.@instance_list' with possible instance IDs for the given <map name> and optional <mode>.
Return '.@instance_list' array size.

Instance mode options: IM_NONE, IM_CHAR, IM_PARTY, IM_GUILD, or IM_CLAN
If the instance mode is not provided then it will return all the instance IDs for that map.

Examples:
	// This example assumes that there are several instances on the map of Prontera.
	.@size = instance_list("prontera");
	for ( .@i = 0; .@i < .@size; ++.@i )
		mes instance_mapname("prontera", .@instance_list[.@i]);
	//the output would be a list of all prontera copies that are active in the server.

---------------------------------------

*getinstancevar(<variable>,<instance id>);

Returns a reference to an instance variable (' prefix) of the specific instance ID.
This can only be used to get ' variables.

Examples:
	// This will set the .@s variable to the value of 'var variable of the specific instance ID.
	set .@s, getinstancevar('var, instance_id(IM_PARTY));

	// This will set the 'var variable of the specific instance ID to 1.
	set getinstancevar('var, instance_id(IM_GUILD)), 1;

---------------------------------------

*setinstancevar(<variable>,<value>,<instance id>);

This command will set an instance variable to the value that the expression results in.
See 'set' command for more information.

Returns the variable reference.

Examples:
	// This will set the 'var variable of the specific instance ID to 9.
	setinstancevar('var, 9, instance_id(IM_GUILD));

---------------------------------------

=========================
|8.- Quest Log commands.|
=========================
---------------------------------------

*questinfo <Icon>{,<Map Mark Color>{,"<condition>"}};

This command should only be used in OnInit/OnInstanceInit labels.
Show an emotion on top of a NPC, and optionally, a colored mark in the mini-map like "viewpoint" or "viewpointmap".
When a user is doing some action, each NPC is checked for questinfo that has been set on the map.
If questinfo is present, it will check if the player fulfill the condition.
If he/she does or no condition has been set, the bubble will appear.

Available <Icon>:

No Icon			: QTYPE_NONE
! Quest Icon	: QTYPE_QUEST
? Quest Icon	: QTYPE_QUEST2
! Job Icon		: QTYPE_JOB
? Job Icon		: QTYPE_JOB2
! Event Icon	: QTYPE_EVENT
? Event Icon	: QTYPE_EVENT2
Warg			: QTYPE_WARG (Only for packetver < 20170315)
Warg Face		: QTYPE_WARG2 (Only for packetver >= 20120410 and < 20170315)
Click Me		: QTYPE_CLICKME (Only for packetver >= 20170315)
Daily Quest		: QTYPE_DAILYQUEST (Only for packetver >= 20170315)
! Event Icon	: QTYPE_EVENT3 (Only for packetver >= 20170315)
Job Quest		: QTYPE_JOBQUEST (Only for packetver >= 20170315)
Jumping Poring	: QTYPE_JUMPING_PORING (Only for packetver >= 20170315)

<Map Mark Color>, when used, creates a mark in the user's mini map on the position of the NPC,
the available color values are:

QMARK_NONE   - No Marker (default)
QMARK_YELLOW - Yellow Marker
QMARK_GREEN  - Green Marker
QMARK_PURPLE - Purple Marker

<condition> can be any expression similarly to the <condition> in the 'if' command.

List of the player's actions to trigger the questinfo condition:
-	Item added to/removed from player inventory
-	Base/Job level change
-	Job change
-	Quest given/erased/completed
-	Quest objective updated (character killed a monster quest target)
-	Warp


Example:
izlude,100,100,4	script	Test	844,{
	mes "[Test]";
	mes "Hello World.";
	close;

OnInit:
	// Display an icon if the player has completed the given hunting quest and his/her variable 'unknown_var' is above 0
	questinfo QTYPE_QUEST, QMARK_YELLOW, "checkquest(1001,HUNTING) == 2 && unknown_var > 0";

	//.. or display an icon if the player didn't start the given quest and he/she has one red potion in inventory
	questinfo QTYPE_QUEST, QMARK_YELLOW, "!isbegin_quest(1001) && countitem(501) == 1";
	end;
}

---------------------------------------

*questinfo_refresh {<char_id>};

This command refreshes each quest bubble that has been set on the map according
to the questinfo condition for the attached/given player.

---------------------------------------

*setquest <ID>{,<char_id>};

Place quest of <ID> in the users quest log, the state of which is "active".

If *questinfo is set, and the same ID is specified here, the icon will be cleared when the quest is set.

---------------------------------------

*completequest <ID>{,<char_id>};

Change the state for the given quest <ID> to "complete" and remove from the users quest log.

---------------------------------------

*erasequest <ID>{,<char_id>};

Remove the quest of the given <ID> from the user's quest log.

---------------------------------------

*changequest <ID>,<ID2>{,<char_id>};

Remove quest of the given <ID> from the user's quest log.
Add quest of the <ID2> to the the quest log, and the state is "active".

---------------------------------------

*checkquest(<ID>{,PLAYTIME|HUNTING{,<char_id>}})

If no additional argument supplied, return the state of the quest:
	-1 = Quest not started (not in quest log)
	0  = Quest has been given, but the state is "inactive"
	1  = Quest has been given, and the state is "active"
	2  = Quest completed

If parameter "PLAYTIME" is supplied:
	-1 = Quest not started (not in quest log)
	0  = the time limit has not yet been reached
	1  = the time limit has not been reached but the quest is marked as complete
	2  = the time limit has been reached

If parameter "HUNTING" is supplied:
	-1 = Quest not started (not in quest log)
	0  = you haven't killed all of the target monsters and the time limit has not been reached.
	1  = you haven't killed all of the target monsters but the time limit has been reached.
	2  = you've killed all of the target monsters

---------------------------------------

*isbegin_quest(<ID>{,<char_id>})

Return the state of the quest:
	0  = Quest not started (not in quest log)
	1  = Quest has been given (state is either "inactive" or "active")
	2  = Quest completed

---------------------------------------

*showevent <icon>{,<mark color>{,<char_id>}}

Show an emotion on top of a NPC, and optionally,
a colored mark in the mini-map like "viewpoint" or "viewpointmap".
This is used to indicate that a NPC has a quest or an event to
a certain player.

Available Icons:

Remove Icon		: QTYPE_NONE
! Quest Icon	: QTYPE_QUEST
? Quest Icon	: QTYPE_QUEST2
! Job Icon		: QTYPE_JOB
? Job Icon		: QTYPE_JOB2
! Event Icon	: QTYPE_EVENT
? Event Icon	: QTYPE_EVENT2
Warg			: QTYPE_WARG
Warg Face		: QTYPE_WARG2 (Only for packetver >= 20120410)

Mark Color:
QMARK_NONE   - No Marker (default)
QMARK_YELLOW - Yellow Marker
QMARK_GREEN  - Green Marker
QMARK_PURPLE - Purple Marker

---------------------------------------

*open_quest_ui {<quest ID>,{<char ID>}};

Opens the quest UI for the attached player or the given character ID.
Use 0 as the quest ID to open the main quest UI. If the quest ID is not 0 then the quest UI is opened to the given quest. If the quest data is not populated in the client LUB then a message will be displayed saying the quest doesn't exist.

This command requires packet version 2015-12-02 or newer.

---------------------------------------

============================
|9.- Battleground commands.|
============================
---------------------------------------

*waitingroom2bg_single(<battle group>,{"<map name>",<x>,<y>{,"<npc name>"}});

Adds the first waiting player from the chat room of the given NPC to an existing battleground group.
The player will also be warped to the default spawn point of the battle group or to the specified coordinates
<x> and <y> on the given <map>.
Note: The map need the mapflag MF_BATTLEGROUND otherwise the player is removed from the Battleground team.

---------------------------------------

*waitingroom2bg("<map name>",<x>,<y>,{"<On Quit Event>","<On Death Event>"{,"<NPC Name>"}});

<map name>,<x>,<y> refer to where the "respawn" base is, where the player group will respawn when they die.
<On Quit Event> refers to an NPC label that attaches to the character and is run when they relog. (Optional)
<On Death Event> refers to an NPC label that attaches to the character and is run when they die. (Optional)

If "-" is supplied for <map name> then the player will not automatically respawn after the 1 second delay.
This allows for better manipulation of <On Death Event>. The player will have to be warped to desired location
at the end of <On Death Event>.

Unlike the prior command, the latter will attach a GROUP in a waiting room to the battleground, and
sets the array $@arenamembers[0] where 0 holds the IDs of the first group, and 1 holds the IDs of the second.

If the optional NPC Name parameter is left out, the waiting room of the current NPC is used.

Example:
	// Battle Group will be referred to as $@KvM01BG_id1, and when they die, respawn at bat_c01,52,129.
	set $@KvM01BG_id1, waitingroom2bg("bat_c01",52,129,"KvM01_BG::OnGuillaumeQuit","KvM01_BG::OnGuillaumeDie");
	end;

---------------------------------------

*bg_create("<map name>",<x>,<y>{,"<On Quit Event>","<On Death Event>"});

Creates an instance of battleground battle group that can be used with other battleground commands.

<map name>,<x>,<y> refer to where the "respawn" base is, where the player group will respawn when they die.
<On Quit Event> refers to an NPC label that attaches to the character and is run when they relog. (Optional)
<On Death Event> refers to an NPC label that attaches to the character and is run when they die. (Optional)

If "-" is supplied for <map name> then the player will not automatically respawn after the 1 second delay.
This allows for better manipulation of <On Death Event>. The player will have to be warped to desired location
at the end of <On Death Event>.

Returns battle group ID on success. Returns 0 on failure.

---------------------------------------

*bg_join(<battle group>,{"<map name>",{<x>,<y>{,<char id>}});

Adds an attached player or <char id> if specified to an existing battleground group. The player will also be warped
to the default spawn point of the battle group or to the specified coordinates <x> and <y> on the given <map>.
Note: The map need the mapflag MF_BATTLEGROUND otherwise the player is removed from the Battleground team.

Returns true on success. Returns false on failure.

---------------------------------------

*bg_team_setxy <Battle Group ID>,<x>,<y>;

Updates the respawn point of the given Battle Group to x,y on the same map. <Battle Group ID> can be retrieved
using getcharid(4).

Example:
	bg_team_setxy getcharid(4),56,212;
	mapannounce "bat_a01", "Group [1] has taken the work shop, and will now respawn there.",bc_map,"0xFFCE00";
	end;

---------------------------------------

*bg_reserve("<battleground_map_name>"{,<ended>});

Reserves a Battleground map for the Battleground UI System. When a map is booked it prevents another similar
queue from being created and will allow players to join an active Battlegrounds event.

If <ended> is true, then the Battleground is marked as over to prevent new players from joining. This state is meant
for the period where players can get their Badges.

---------------------------------------

*bg_unbook("<battleground_map_name>");

Removes a Battleground map for the Battleground UI System. When a map is unbooked it allows a queue to be created.

---------------------------------------

*bg_desert({<char_id>});

Same as 'bg_leave' but slaps the player with a deserter status so they can't enter another queue for the time
defined in battleground_db (10 minutes by default).

With the Battleground Queue System, it will also warp the player to their previous position when they joined or
to their save point if the map had MF_NOSAVE.

---------------------------------------

*bg_warp <Battle Group>,"<map name>",<x>,<y>;

Similar to the 'warp' command.
Places all members of <Battle Group> at the specified map and coordinates.

Example:
	//place the battle group one for Tierra Gorge at starting position.
	bg_warp $@TierraBG1_id1,"bat_a01",352,342;
	end;

---------------------------------------

*bg_monster <Battle Group>,"<map name>",<x>,<y>,"<name to show>",<mob id>,"<event label>";
*bg_monster(<Battle Group>,"<map name>",<x>,<y>,"<name to show>",<mob id>,"<event label>");

Similar to the 'monster' command.
Spawns a monster with allegiance to the given Battle Group.
Does not allow for the summoning of multiple monsters.
Monsters are similar to those in War of Emperium, in that the specified Battle Group is considered friendly.

Example:
	// It can be used in two different ways.
	bg_monster $@TierraBG1_id2,"bat_a01",167,50,"Food Depot",1910,"Feed Depot#1::OnMyMobDead";
	end;

	// Alternatively, you can set an ID for the monster using "set".
	// This becomes useful when used with the command below.
	set $@Guardian_3, bg_monster($@TierraBG1_id2,"bat_a01",268,204,"Guardian",1949,"NPCNAME::OnMyMobDead");
	end;

---------------------------------------

*bg_monster_set_team <GID>,<Battle Group>;

This command will change the allegiance if a monster in a battle ground.
GID can be set when spawning the monster via the 'bg_monster' command.

Example:

	end;

OnEnable:
	mapannounce "A guardian has been summoned for Battle Group 2!",bc_map,"0xFFCE00";
	set $@Guardian, bg_monster($@BG_2,"bat_a01",268,204,"Guardian",1949,"NPCNAME::OnMyMobDead");
	initnpctimer;
	end;

OnTimer1000:
	stopnpctimer;
	mapannounce "Erm, sorry about that! This monster was meant for Battle Group 1.",bc_map,"0xFFCE00";
	bg_monster_set_team $@Guardian, $@BG_1;
	end;

---------------------------------------

*bg_leave {<char_id>};

Removes attached player from their Battle Group.

With the Battleground Queue System, it will also warp the player to their previous position when they joined or
to their save point if the map had MF_NOSAVE.

---------------------------------------

*bg_destroy <Batte Group>;

Destroys the Battle Group created for that battle ground.

---------------------------------------

*areapercentheal "<map name>",<x1>,<y1>,<x2>,<y2>,<hp>,<sp>;

Restores a percentage of the maximum HP/SP of players within a defined area.
This is primarily used in battleground scripts, but is not limited to them.

Example:
	areapercentheal "bat_a01",52,208,61,217,100,100;
	end;

---------------------------------------

*bg_get_data(<Battle Group>,<type>);

Retrieves data related to given Battle Group. Type can be one of the following:

	0 - Amount of players currently belonging to the group.
	1 - Store GID of players in <Battle Group> in a temporary global array $@arenamembers,
		stores and also returns the amount of players currently belonging to the group in $@arenamemberscount.

---------------------------------------

*bg_getareausers(<Battle Group>,"<map name>",<x0>,<y0>,<x1>,<y1>);

Retrieves the amount of players belonging to the given Battle Group on the given
map within the specified rectangular area.

---------------------------------------

*bg_updatescore "<map name>",<Guillaume Score>,<Croix Score>;

This command will force the update of the displayed scoreboard.
It is only usable when the map is defined as a Type 2 Battleground:
mapflag	<map name>	battleground	2

---------------------------------------

*bg_info("<battleground name>", <type>);

Retrieves data related to given <battleground name> from the database. Requires feature.bgqueue
to be enabled. <Type> can be one of the following:

	BG_INFO_ID: Battleground ID.
	BG_INFO_REQUIRED_PLAYERS: Required players to start a battleground (per side).
	BG_INFO_MAX_PLAYERS: Maximum players allowed in a battleground.
	BG_INFO_MIN_LEVEL: Minimum level allowed to join a battleground.
	BG_INFO_MAX_LEVEL: Maximum level allowed to join a battleground.
	BG_INFO_MAPS: Number of maps in a battleground. Stores an array of map names in @bgmaps[] and a count in @bgmapscount.
	BG_INFO_DESERTER_TIME: Amount of time in seconds a player is marked deserter.

---------------------------------------

====================
|10.- Pet commands.|
====================
---------------------------------------

*bpet;
*birthpet;

This command opens up a pet hatching window on the client connected to the
invoking character. It is used in item script for the pet incubators and will
let the player hatch an owned egg. If the character has no eggs, it will just
open up an empty incubator window.
This is still usable outside item scripts.

---------------------------------------

*pet <pet id>;
*catchpet <pet id>;

This command is used in all the item scripts for taming items. Running this
command will make the pet catching cursor appear on the client connected to the
invoking character, usable on the monsters with the specified pet ID number. It
will still work outside an item script.
If the <pet id> is PET_CATCH_UNIVERSAL the item will attempt to catch the targeted
monster as long as it is in the pet database and does not have the MD_STATUS_IMMUNE
monster mode.
If the <pet id> is PET_CATCH_UNIVERSAL_ITEM the item will attempt to catch the targeted
monster as long as it is in the pet database and the targeted monster requires the lure
item used.
See 'doc/mob_db_mode_list.txt' for more information about monster modes.

A full list of pet IDs can be found inside 'db/(pre-)re/pet_db.yml'.

---------------------------------------

*makepet <pet id>;

This command will create a pet egg and put it in the invoking character's
inventory. The kind of pet is specified by pet ID numbers listed in
'db/(pre-)re/pet_db.yml'. The egg is created exactly as if the character just successfully
caught a pet in the normal way.

	// This will make you a poring:
	makepet 1002;

Notice that you absolutely have to create pet eggs with this command. If you try
to give a pet egg with 'getitem', pet data will not be created by the char
server and the egg will disappear when anyone tries to hatch it.

---------------------------------------

*getpetinfo(<type>{,<char_id>})

This function will return pet information for the pet the invoking character
currently has active. Valid types are:

 PETINFO_ID - Pet unique ID
 PETINFO_CLASS - Pet class number as per 'db/(pre-)re/pet_db.yml' - will tell you what kind of a pet it is.
 PETINFO_NAME - Pet name. Will return "null" if there's no pet.
 PETINFO_INTIMATE - Pet friendly level (intimacy score). 1000 is full loyalty.
 PETINFO_HUNGRY - Pet hungry level. 100 is full hunger.
 PETINFO_RENAMED - Pet rename flag. 0 means this pet has not been named yet.
 PETINFO_LEVEL - Pet level
 PETINFO_BLOCKID - Pet Game ID
 PETINFO_EGGID - Pet egg item ID
 PETINFO_FOODID - Pet food item ID

PETINFO_INTIMATE can be used with the following constants for checking values:
 PET_INTIMATE_NONE = 0
 PET_INTIMATE_AWKWARD = 1 ~ 99
 PET_INTIMATE_SHY = 100 ~ 249
 PET_INTIMATE_NEUTRAL = 250 ~ 749
 PET_INTIMATE_CORDIAL = 750 ~ 909
 PET_INTIMATE_LOYAL = 910 ~ 1000

PETINFO_HUNGRY can be used with the following constants for checking values:
 PET_HUNGRY_NONE = 0
 PET_HUNGRY_VERY_HUNGRY = 1 ~ 10
 PET_HUNGRY_HUNGRY = 11 ~ 25
 PET_HUNGRY_NEUTRAL = 26 ~ 75
 PET_HUNGRY_SATISFIED = 76 ~ 90
 PET_HUNGRY_STUFFED = 91 ~ 100

Example:
	mes "[Vet]";
	mes "Your pet + " getpetinfo(PETINFO_NAME);
	if (getpetinfo(PETINFO_INTIMATE) < PET_INTIMATE_LOYAL)
		mes "has some growing to do on you!";
	else
		mes "seems to love you very much!";
	close;

---------------------------------------

=============================
|10.1.- The Pet AI commands.|
=============================
---------------------------------------

These commands will only work if the invoking character has a pet, and are meant
to be executed from pet scripts. They will modify the pet AI decision-making for
the current pet of the invoking character, and will NOT have any independent
effect by themselves, which is why only one of them each may be in effect at any
time for a specific pet. A pet may have 'petloot', 'petskillbonus',
'petskillattack' OR 'petpetskillattack2' and 'petskillsupport'.

All commands with delays and durations will only make the behavior active for
the specified duration of seconds, with a delay of the specified number of
seconds between activations. Rates are a chance of the effect occurring and are
given in percent. 'bonusrate' is added to the normal rate if the pet intimacy is
at the maximum possible.

The behavior modified with the below mentioned commands will only be exhibited if
the pet is loyal and appropriate configuration options are set in
'battle_athena.conf'.

Pet scripts in the database normally run whenever a pet of that type hatches
from the egg. Other commands usable in item scripts (see 'bonus') will also
happily run from pet scripts. Apparently, the pet-specific commands will also
work in NPC scripts and modify the behavior of the current pet up until the pet
is hatched again. (Which will also occur when the character is logged in again
with the pet still out of the egg.) It is not certain for how long the effect of
such command running from an NPC script will eventually persist, but apparently,
it is possible to usefully employ them in usable item scripts to create pet
buffing items.

Nobody tried this before, so you're essentially on your own here.

---------------------------------------

*petskillbonus <bonus type>,<value>,<duration>,<delay>;

This command will make the pet give a bonus to the owner's stat in certain
duration in seconds and will be repeated for certain delay in seconds.

For a full bonus list, see 'doc/item_bonus.txt'
NOTE: Currently ONLY supported for bonuses that used by 'bonus' script.

---------------------------------------

*petrecovery <status type>,<delay>;

This command will make the pet cure a specified status condition. The curing
actions will occur once every Delay seconds. For a full list of status
conditions that can be cured, see the list of 'SC_' status condition constants
in 'src/map/script_constants.hpp'.

---------------------------------------

*petloot <max items>;

This command will turn on pet looting, with a maximum number of items to loot
specified. Pet will store items and return them when the maximum is reached or
when pet performance is activated.

---------------------------------------

*petskillsupport <skill id>,<skill level>,<delay>,<percent hp>,<percent sp>;
*petskillsupport "<skill name>",<skill level>,<delay>,<percent hp>,<percent sp>;

This will make the pet use a specified support skill on the owner whenever the
HP and SP are below the given percent values, with a specified delay time
between activations. The skill numbers are as per 'db/(pre-)re/skill_db.yml'.

It's not quite certain who's stats will be used for the skills cast, the
character's or the pets. Probably, Skotlex can answer that question.

---------------------------------------

*petskillattack <skill id>,<skill level>,<rate>,<bonusrate>;
*petskillattack "<skill name>",<skill level>,<rate>,<bonusrate>;
*petskillattack2 <skill id>,<damage>,<number of attacks>,<rate>,<bonusrate>;
*petskillattack2 "<skill name>",<damage>,<number of attacks>,<rate>,<bonusrate>;

These two commands will make the pet cast an attack skill on the enemy the pet's
owner is currently fighting. Skill IDs and levels are as per 'petskillsupport'.
'petskillattack2' will make the pet cast the skill with a fixed amount of damage
inflicted and the specified number of attacks.

Value of 'rate' is between 1 and 100. 100 = 100%

---------------------------------------

*petautobonus <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};
*petautobonus2 <bonus script>,<rate>,<duration>{,<flag>,{<other script>}};
*petautobonus3 <bonus script>,<rate>,<duration>,<skill id>,{<other script>};
*petautobonus3 <bonus script>,<rate>,<duration>,"<skill name>",{<other script>};

See 'autobonus' for more details.

---------------------------------------

===========================
|11.- Homunculus commands.|
===========================
---------------------------------------

*homevolution;

This command will try to evolve the current player's homunculus.
If it doesn't work, the /swt emotion is shown.

To evolve a homunculus, the invoking player must have a homunculus,
the homunculus must not be the last evolution and
the homunculus must have above 91000 intimacy with its owner.

---------------------------------------

*morphembryo;

This command will try to put the invoking player's Homunculus in an
uncallable state, required for mutation into a Homunculus S. The player
will also receive a Strange Embryo (ID 6415) in their inventory if
successful, which is deleted upon mutation.

The command will fail if the invoking player does not have an evolved
Homunculus at level 99 or above. The /swt emotion is shown upon failure.

Returns 1 upon success and 0 for all failures.

---------------------------------------

*hommutate {<ID>};

This command will try to mutate the invoking player's Homunculus into
a Homunculus S. The Strange Embryo (ID 6415) is deleted upon success.

The command will fail if the invoking player does not have an evolved
Homunculus at level 99 or above, if it is not in the embryo state
(from the 'morphembryo' command), or if the invoking player does not
possess a Strange Embryo. The /swt emotion is shown upon failure.

If the optional parameter <ID> is set, the invoking player's Homunculus
will change into the specified Homunculus ID. Otherwise, a random Homunculus S
will be chosen. See 'db/homunculus_db.txt' for a full list of IDs.

Returns 1 upon success and 0 for all failures.

---------------------------------------

*checkhomcall()

This function checks if the attached player's Homunculus is active,
and will return the following values:
 -1: The player has no Homunculus.
  0: The player's Homunculus is active.
  1: The player's Homunculus is vaporized.
  2: The player's Homunculus is in morph state.

---------------------------------------

*gethominfo(<type>{,<char_id>})

This function will return Homunculus information for the Homunculus of the
invoking character, regardless of its vaporize state. It returns zero or
"null" if the player does not own a Homunculus.

Valid types are:
 0 - Homunculus ID
 1 - Homunculus Class
 2 - Homunculus Name
 3 - Homunculus friendly level (intimacy score). 100000 is full loyalty.
 4 - Homunculus hungry level. 100 is completely full.
 5 - Homunculus rename flag. 0 means this homunculus has not been named yet.
 6 - Homunculus level
 7 - Homunculus Game ID

---------------------------------------

*homshuffle;

This will recalculate the homunculus stats according to its level, of the
current invoking character.

---------------------------------------

*addhomintimacy <amount>{,<char_id>};

Increase or decrease a homunculus' intimacy value by the given <amount>. 100000 is full loyalty.

---------------------------------------

==========================
|12.- Mercenary commands.|
==========================
---------------------------------------

*mercenary_create <class>,<contract time>;

This command summons a mercenary for a given time (in milliseconds). For a
list of all available classes, see 'db/mercenary_db.txt'.

This command is typically used in item scripts of mercenary scrolls.

---------------------------------------

*mercenary_delete {<char id>{,<reply>}};

This command removes the mercenary from a player.
The parameter 'reply' can be one of the following values:

	0 - Mercenary soldier's duty hour is over, faith increased by 1. (default)
	1 - Your mercenary soldier has been killed, faith decreased by 1.
	2 - Your mercenary soldier has been fired.
	3 - Your mercenary soldier has ran away.

---------------------------------------

*mercenary_heal <hp>,<sp>;

This command works like 'heal', but affects the mercenary of the
currently attached character.

---------------------------------------

*mercenary_sc_start <type>,<tick>,<val1>;

This command works like 'sc_start', but affects the mercenary of the
currently attached character.

---------------------------------------

*mercenary_get_calls(<guild>);
*mercenary_set_calls <guild>,<value>;

Sets or gets the mercenary calls value for given guild for currently
attached character. Guild can be one or the following constants:

	ARCH_MERC_GUILD
	SPEAR_MERC_GUILD
	SWORD_MERC_GUILD

---------------------------------------

*mercenary_get_faith(<guild>);
*mercenary_set_faith <guild>,<value>;

Sets or gets the mercenary faith value for given guild for currently
attached character. Guild can be one or the following constants:

	ARCH_MERC_GUILD
	SPEAR_MERC_GUILD
	SWORD_MERC_GUILD

---------------------------------------

*getmercinfo(<type>{,<char id>});

Retrieves information about mercenary of the currently attached
character. If char id is given, the information of that character is
retrieved instead. Type specifies what information to retrieve and
can be one of the following:

	0 - Mercenary ID
	1 - Mercenary Class
	2 - Mercenary Name
	3 - Mercenary faith value for this mercenary's guild, if any
	4 - Mercenary calls value for this mercenary's guild, if any
	5 - Mercenary kill count
	6 - Mercenary remaining life time in msec
	7 - Mercenary level
	8 - Mercenary Game ID

If the character does not have a mercenary, the command returns ""
for name and 0 for all other types.

---------------------------------------

======================
|13.- Party commands.|
======================
---------------------------------------

*getpartyname(<party id>)

This function will return the name of a party that has the specified ID number.
If there is no such party ID, "null" will be returned.

Lets say the ID of a party was saved as a global variable:

	// This would return the name of the party from the ID stored in a variable
	mes "You're in the '" + getpartyname($@var) + "' party, I know!";

---------------------------------------

*getpartymember <party id>{,<type>{,<array_variable>}};

This command will find all members of a specified party and returns their names
(or character id or account id depending on the value of "type") into an array
of temporary global variables. There's actually quite a few commands like this
which will fill a special variable with data upon execution and not do anything
else.

Upon executing this,

$@partymembername$[] is a global temporary string array which contains all the
                     names of these party members
                     (only set when type is 0 or not specified)

$@partymembercid[]   is a global temporary number array which contains the
                     character id of these party members.
                     (only set when type is 1)

$@partymemberaid[]   is a global temporary number array which contains the
                     account id of these party members.
                     (only set when type is 2)

$@partymembercount   is the number of party members that were found.

The party members will (apparently) be found regardless of whether they are
online or offline. Note that the names come in no particular order.

Be sure to use $@partymembercount to go through this array, and not
'getarraysize', because it is not cleared between runs of 'getpartymember'. If
someone with 7 party members invokes this script, the array would have 7
elements. But if another person calls up the NPC, and he has a party of 5, the
server will not clear the array for you, overwriting the values instead. So in
addition to returning the 5 member names, the 6th and 7th elements from the last
call remain, and you will get 5+2 members, of which the last 2 don't belong to
the new guy's party. $@partymembercount will always contain the correct number,
(5) unlike 'getarraysize()' which will return 7 in this case.

If 'array_variable' is set, the result will be stored to that variable instead
using global variable.

Example 1: list party member names

	// get the party member names
	getpartymember getcharid(1),0;

	// It's a good idea to copy the global temporary $@partymember*****
	// variables to your own scope variables because if you have pauses in this
	// script (sleep, sleep2, next, close2, input, menu, select, or prompt),
	// another player could click this NPC, trigger 'getpartymember', and
	// overwrite the $@partymember***** variables.
	.@count = $@partymembercount;
	copyarray .@name$[0], $@partymembername$[0], $@partymembercount;

	// list the party member names
	for (.@i = 0; .@i < .@count; .@i++)
		mes (.@i +1) + ". ^0000FF" + .@name$[.@i] + "^000000";
	close;


Example 2: check party count (with a 'next' pause), before warping to event

	.register_num = 5; // How many party members are required?

	// get the charID and accountID of character's party members
	getpartymember getcharid(1), 1;
	getpartymember getcharid(1), 2;

	if ( $@partymembercount != .register_num ) {
		mes "Please form a party of " + .register_num + " to continue";
		close;
	}

	// loop through both and use 'isloggedin' to count online party members
	for ( .@i = 0; .@i < $@partymembercount; .@i++ )
		if ( isloggedin( $@partymemberaid[.@i], $@partymembercid[.@i] ) )
			.@count_online++;

	// We search accountID & charID because a single party can have multiple
	// characters from the same account. Without searching through the charID,
	// if a player has 2 characters from the same account inside the party but
	// only 1 char online, it would count their online char twice.

	if ( .@count_online != .register_num ) {
		mes "All your party members must be online to continue";
		close;
	}

	// copy the array to prevent players cheating the system
	copyarray .@partymembercid, $@partymembercid, .register_num;

	mes "Are you ready ?";
	next; // careful here
	select("Yes");

	// When a script hits a next, menu, sleep or input that pauses the script,
	// players can invite or /leave and make changes in their party. To prevent
	// this, we call getpartymember again and compare with the original values.

	getpartymember getcharid(1), 1;
	if ( $@partymembercount != .register_num ) {
		mes "You've made changes to your party !";
		close;
	}
	for ( .@i = 0; .@i < $@partymembercount; .@i++ ) {
		if ( .@partymembercid[.@i] != $@partymembercid[.@i] ) {
			mes "You've made changes to your party !";
			close;
		}
	}

	// Finally, it's safe to start the event!
	warpparty "event_map", 0,0, getcharid(1);

---------------------------------------

*getpartyleader(<party id>{,<type>})

This function returns some information about the given party-id's leader.
When type is omitted, the default information retrieved is the leader's name.
Possible types are:

	1: Leader account id
	2: Leader character id
	3: Leader's class
	4: Leader's current map name
	5: Leader's current level as stored on the party structure (may not be
	   current level if leader leveled up recently).

If retrieval fails (leader not found or party does not exist), this function
returns "null" instead of the character name, and -1 for the other types.

---------------------------------------

*is_party_leader({<party ID>})

This command will return true if the player attached to the script is the leader
of his/her party, or, if a party ID is specified, of that party.

---------------------------------------

*party_create("<party name>"{,<character id>{,<item share>,<item share type>}});

Organizes a party with the attached or specified character as leader. If
successful, the command returns 1 and sets the global temporary variable
"$@party_create_id" to the ID of the party created.

Additionally, item sharing options can be provided:
 - Item Share: 0-Each Take (default), 1-Party Share
 - Item Share Type: 0-Each Take (default), 1-Even Share

These values are returned upon failure:
 0: Unknown error.
-1: Player not found.
-2: Player already has a party.
-3: Party name exists.

---------------------------------------

*party_destroy(<party id>);

Disbands a party. The command returns 1 upon success and 0 upon failure.

---------------------------------------

*party_addmember(<party id>,<character id>);

Adds a player to an existing party.

The command returns 1 upon success, and these values upon failure:
 0: Unknown error.
-1: Player not found.
-2: Player already has a party.
-3: Party not found.
-4: Party is full.
-5: Another character from the same account is already in the party.

---------------------------------------

*party_delmember({<character id>,<party id>});

Removes a player from his/her party. If no player is specified, the command
will run for the invoking player. If that player is the only party member
remaining, the party will be disbanded.

The command returns 1 upon success, and these values upon failure:
 0: Unknown error.
-1: Player not found.
-2: Party not found.
-3: Player is not in the party.

---------------------------------------

*party_changeleader(<party id>,<character id>);

Transfers leadership of a party to the specified character.

The command returns 1 upon success, and these values upon failure:
 0: Unknown error.
-1: Party not found.
-2: Player not found.
-3: Player is not in the party.
-4: Player is already party leader.

---------------------------------------

*party_changeoption(<party id>,<option>,<flag>);

Changes a party option.

Valid options are:
 0 - Exp Share (flags: 0-Each Take, 1-Even Share)
 1 - Item Share (flags: 0-Each Take, 1-Party Share)
 2 - Item Share Type (flags: 0-Each Take, 1-Even Share)

The command returns 1 upon success, and these values upon failure:
 0: Invalid option.
-1: Party not found.

---------------------------------------

*opendressroom(<flag>{,<char_id>});

This will open the Dress Room window on the client connected to the invoking character.

	mes "Close this window to open the Dress Room window.";
	close2;
	opendressroom(1);
	end;

Valid flag are:
 1 - Open the Dress Room window

---------------------------------------

*navigateto("<map>"{,<x>,<y>,<flag>,<hide_window>,<monster_id>,<char_id>});

Generates a navigation for attached or specified character. Requires client
2011-10-10aRagEXE or newer.

The flag specifies how the client will calculate the specific route.

Valid flags are:
 NAV_NONE - No services
 NAV_AIRSHIP_ONLY - Airship only
 NAV_SCROLL_ONLY - Scroll only
 NAV_AIRSHIP_AND_SCROLL - Airship and Scroll
 NAV_KAFRA_ONLY - Kafra only
 NAV_KAFRA_AND_AIRSHIP - Kafra and Airship
 NAV_KAFRA_AND_SCROLL - Kafra and Scroll
 NAV_ALL - All services

When flag is not specified, the default value is NAV_KAFRA_AND_AIRSHIP.

The hide_window specifies whether to display (0) or hide (1) the navigation window.
By default the window is hidden.

You can specify the monster_id in combination with a mapname to make the
navigation system tell you, that you have reached the desired mob.

Note:
The client requires custom monster spawns be in the navigation file
for using the embedded client Navigation feature to work properly. In this
instance sending the player to the map where the monster spawns is a simpler
solution rather than sending the map and the monster_id.

---------------------------------------

*hateffect(<Hat Effect ID>,<State>);

This will set a Hat Effect onto the player. The state field allows you to
enable (true) or disable (false) the effect on the player.
The Hat Effect constants can be found in 'src/map/script_constants.hpp' starting
with HAT_EF_*.

Requires client 2015-05-13aRagEXE or newer.

---------------------------------------

*getrandomoptinfo(<type>);

Returns value of an attribute of current random option.

Valid attributes are:
ROA_ID - ID of current option
ROA_VALUE - Value field of current option
ROA_PARAM - Param field of current option

This script command is intended for using in random option scripts.

---------------------------------------

*getequiprandomoption(<equipment index>,<index>,<type>{,<char id>});

Returns value of an attribute of a random option on an equipped item.

See 'getequipid' for a full list of valid equipment slots.

index parameter can be 0 to MAX_ITEM_RDM_OPT-1 (default 0-4).

For valid attribute types, see `getrandomoptinfo` command reference.

---------------------------------------

*setrandomoption(<equipment slot>,<index>,<id>,<value>,<param>{,<char id>});

Sets <index+1>th random option for equipment equipped at <equipment slot>
to <id>, <value> and <param>.

See 'getequipid' for a full list of valid equipment slots.

index parameter can be 0 to MAX_ITEM_RDM_OPT-1 (default 0-4).

ID - ID of random option. See db/item_randomopt_db.yml for constants.
Value - Value of random option
Param - Parameter of random option

---------------------------------------

*randomoptgroup <random option group ID>;

This command fills the following arrays with the results of a random option group.
The random option group IDs are specified in 'db/(pre-)re/item_randomopt_group.yml'.

Arrays - from index 0 to MAX_ITEM_RDM_OPT-1 :
.@opt_id[]                - array of random option ID.
.@opt_value[]             - array of value.
.@opt_param[]             - array of param.

Example:
	// Fill the arrays using the random option group ID 5 (group used for Crimson weapons).
	randomoptgroup(5);

	// Create a +9 Crimson Dagger [2] with the Group 5 applied
	getitem3 28705,1,1,9,0,0,0,0,0,.@opt_id,.@opt_value,.@opt_param;

---------------------------------------

*clan_join(<clan id>{,<char id>});

The attached player joins the clan with the <clan id>. On a successful join,
true is returned, else false if the join failed.
If <char id> is specified, the specified player is used rather than the attached one.

---------------------------------------

*clan_leave({<char id>});

The attached player will leave their clan. On a successful leave, true is returned,
else false if the leave failed.
If <char id> is specified, the specified player is used rather than the attached one.

---------------------------------------

*itemlink(<item_id>{,<refine>{,<card0>{,<card1>{,<card2>{,<card3>,{<enchantgrade>{,<RandomIDArray>,<RandomValueArray>,<RandomParamArray>}}}}}}});

Generates an item link string for an item that can be used for npctalk, message,
dispbottom, and broadcast commands. The result is a clickable-item name just
like SHIFT+Click from a player's inventory/cart/equipment window. This command can be
used with mes but the item name will not be clickable. You should use script command
"mesitemlink" for displaying item links in mes dialogues, if the client supports them. 


Examples:

	npctalk "Knife [3] : "+itemlink(1201)+"";
	npctalk "+16 Knife [3] : "+itemlink(1201,16)+"";
	npctalk "+13 BXB Bapho+VR+EA2+EA1 : "+itemlink(18110,13,4147,4407,4833,4832)+"";
	setarray .@opt_ids[0],RDMOPT_VAR_ATKPERCENT,RDMOPT_VAR_ATKPERCENT,RDMOPT_VAR_ATTMPOWER,0,0;
	setarray .@opt_values[0],3,5,20,0,0;
	setarray .@opt_params[0],0,0,0,0,0;
	npctalk "+13 BXB Bapho+VR+EA2+EA1 + 3 Options : "+itemlink(18110,13,4147,4407,4833,4832,0,.@opt_ids,.@opt_values,.@opt_params)+"";


RandomIDArray, RandomValueArray, and RandomParamArray only works if the
client (and server) supports the Item Random Options feature (PACKETVER >= 20150225).

---------------------------------------

*mesitemlink(<item_id>{,<use_brackets>{,<display_name>});

Generates an itemlink string for an item and can be used with NPC's mes command.
The NPC message will show the item's name which will be clickable and opens the
item description client side.
By default <use_brackets> is true which surrounds the link with brackets. Send false to disable.
By default the link will be created with the name of the item stored in the item database,
but in some cases it might be necessary to overwrite the <display_name> with something else.

Examples:

	mes mesitemlink( 1201 ); // Will display "[Knife]" and will be clickable. If clicked it opens the description for Knife [3]
	mes "Bring me a " + mesitemlink( 1201 ) + "."; // Will display "Bring me a [Knife]." and "[Knife]" will be clickable.
	mes "Bring me a " + mesitemlink( 1201, false ) + "."; // Will display "Bring me a Knife." and "Knife" will be clickable.
	mes "Bring me a " + mesitemlink( 1201, true, "Super cutting knife" ) + "."; // Will display "Bring me a [Super cutting knife]." and "[Super cutting knife]" will be clickable.

========================
|14.- Channel commands.|
========================
---------------------------------------

*channel_create "<chname>","<alias>"{,"<password>"{<option>{,<delay>{,<color>{,<char_id>}}}}};

Creates a public channel with <chname> as the channel name. To protect the
channel, use <password> or write "null" to create it without a password.
Channel name must start with '#' and cannot be the same as the map or ally
channel names.

<alias> will be used to change the channel name when the channel message
is displayed.

<option> values are:
	CHAN_OPT_BASE		    - Default option including CHAN_OPT_ANNOUNCE_SELF|CHAN_OPT_MSG_DELAY|CHAN_OPT_CAN_CHAT|CHAN_OPT_CAN_LEAVE
	CHAN_OPT_ANNOUNCE_SELF  - Show info for player itself if player has joined/leaves the channel
	CHAN_OPT_ANNOUNCE_JOIN  - Display message when player is joining the channel
	CHAN_OPT_ANNOUNCE_LEAVE - Display message when player is leaving the channel
	CHAN_OPT_MSG_DELAY	    - Enable chat delay for the channel
	CHAN_OPT_COLOR_OVERRIDE - Player's unique font color will override channel's color
	CHAN_OPT_CAN_CHAT	    - Player can chat in the channel
	CHAN_OPT_CAN_LEAVE	    - Player can leave the channel
	CHAN_OPT_AUTOJOIN	    - Players will auto join the channel at login

The <delay> is the minimum chat delay in millisecond for a single player before
the player can chat again in the same channel.

Use <color> hex code to set the color for this channel, if not defined, default
channel color will be used.

If <char_id> is defined, the channel will be a private channel and the player
will be the the channel owner.

Returns 1 on success.

	/**
	 * This example will shows the message on this channel as
	 * [rAthena] Admin : Hello world!
	 * instead of
	 * #rathena Admin : Hello world!
	 **/
	channel_create("#rathena","[rAthena]");
	channel_create("#vip","[VIP]","vipmemberonly");

---------------------------------------

*channel_setopt "<chname>",<option>,<value>;

Set option for the channel. Use 1 in <value> to set it, or 0 to unset.
The <option> values are the same as the 'channel_create' options.

For CHAN_OPT_MSG_DELAY, the delay in millisecond must be sent or use 0
to remove the delay at <value>.

Returns 1 on success.

	// Example to set delay
	channel_setopt("#global",CHAN_OPT_MSG_DELAY,5000);

Only for public and private channel.

---------------------------------------

*channel_getopt "<chname>",<option>;

Get option value for the channel. The <option> values are the same as the
'channel_create' options. Returns true or false except for CHAN_OPT_MSG_DELAY
which returns an integer.

	// Example to get the delay
	.delay = channel_getopt("#global",CHAN_OPT_MSG_DELAY);

Only for public and private channel.

---------------------------------------

*channel_setcolor "<chname>",<color>;

To change channel color.
<color> uses hex RGB values.

Returns 1 on success.

---------------------------------------

*channel_setpass "<chname>","<password>";

To set, unset, or change password of a channel.
Use "null" to remove the password.

Returns 1 on success.
Only for public and private channel.

---------------------------------------

*channel_setgroup "<chname>",<group_id>{,...,<group_id>};
*channel_setgroup2 "<chname>",<array_of_groups>;

Set group restriction for a channel. Only player with matching <group_id>
are allowed to to join the channel.

By using 0 in the first group channel, the group restriction will be
removed from the channel config.

'channel_setgroup2' receives input for group list as an array.

Returns 0 on failure, and 1 (or n groups count) on success.

	// Example 1: Remove groups
	channel_setgroup("#event",0);

	// Example 2: Multiple values
	channel_setgroup("#vip",2,5);

	// Example 3: Using array
	setarray .@staffs[0],2,3,4,10,99;
	channel_setgroup("#staff",.@staffs);

Only for public and private channel.

---------------------------------------

*channel_chat "<chname>","<message>"{,<color>};

Sends message to the channel.
Returns 1 on success.

	// Example if channel doesn't have alias
	channel_chat(#rathena,"Hello World!"); // #rathena Hello World!

	// Example if channel has alias
	channel_chat(#rathena,"Hello World!"); // [rAthena] Hello World!

---------------------------------------

*channel_ban "<chname>",<char_id>;

Ban player from a public or private channel.
Channel's owner or group with PC_PERM_CHANNEL_ADMIN cannot be banned.
Returns 1 on success.

---------------------------------------

*channel_unban "<chname>",<char_id>;

Unban player from a public or private channel.
Returns 1 on success.

---------------------------------------

*channel_kick "<chname>",<char_id>;
*channel_kick "<chname>","<char_name>";

Kick player from a public or private channel.
Channel's owner or group with PC_PERM_CHANNEL_ADMIN cannot be kicked.
Returns 1 on success.

---------------------------------------

*channel_delete "<chname>";

Delete an existing public or private channel. Cannot delete ally or
local map channel.
Returns 0 on success.

---------------------------------------

============================
|15.- Achievement commands.|
============================
---------------------------------------

*achievementadd(<achievement id>{,<char id>})

This function will add an achievement to the player's log for the attached
player or the supplied <char id>. The objective requirements are not ignored
when using this function.
Returns true on success and false on failure.

---------------------------------------

*achievementremove(<achievement id>{,<char id>})

This function will remove an achievement from the player's log for the attached
player or the supplied <char id>.
Returns true on success and false on failure.

---------------------------------------

*achievementinfo(<achievement id>,<type>{,<char id>})

This function will return the specified <type> value for an achievement of the
attached player or the supplied <char id>. If the player doesn't have the
achievement active (no progress has been made): if the achievement doesn't
exist -1 will be returned, or -2 will be returned on any other error such as
an invalid <type>.

Valid types:
- ACHIEVEINFO_COUNT1
- ACHIEVEINFO_COUNT2
- ACHIEVEINFO_COUNT3
- ACHIEVEINFO_COUNT4
- ACHIEVEINFO_COUNT5
- ACHIEVEINFO_COUNT6
- ACHIEVEINFO_COUNT7
- ACHIEVEINFO_COUNT8
- ACHIEVEINFO_COUNT9
- ACHIEVEINFO_COUNT10
- ACHIEVEINFO_COMPLETE
- ACHIEVEINFO_COMPLETEDATE
- ACHIEVEINFO_GOTREWARD
- ACHIEVEINFO_LEVEL (<achievement id> is useless for this)
- ACHIEVEINFO_SCORE (<achievement id> is useless for this)

---------------------------------------

*achievementcomplete(<achievement id>{,<char id>})

This function will complete an achievement for the attached player or the supplied
<char id>. The objective requirements are ignored when using this function.
Returns true on success and false on failure.

---------------------------------------

*achievementexists(<achievement id>{,<char id>});

This function will return if the achievement exists on the player or the supplied
<char id> and is completed.
Returns true on success and false on failure.

---------------------------------------

*achievementupdate(<achievement id>,<type>,<value>{,<char id>})

This function will update an achievement's value for an achievement of the attached
player or the supplied <char id>. If the player does not have the achievement active
(no progress has been made) it will be added to the player's log first before updating
the <type> value.
Returns true on success and false on failure.

See 'achievementinfo' for valid <type> values.
- ACHIEVEINFO_COMPLETE, ACHIEVEINFO_COMPLETEDATE, and ACHIEVEINFO_GOTREWARD require the
  specific value returned from 'gettimetick(2)'.
- Excludes ACHIEVEINFO_LEVEL and ACHIEVEINFO_SCORE.

---------------------------------------

*addfame(<amount>,{,<char id>})

Increases the fame of the attached player or the supplied <char id> by the <amount> given.
Note: Only works with classes that use the ranking system.

---------------------------------------

*getfame({<char id>})

Gets the fame points of the attached player or the supplied <char id>.
Note: Only works with classes that use the ranking system.

---------------------------------------

*getfamerank({<char id>})

Returns fame rank (start from 1 to MAX_FAME_LIST), else 0.
Note: Only works with classes that use the ranking system.

---------------------------------------

*isdead({<account id>})

Returns true if the player is dead else false.

---------------------------------------
//===== rAthena Documentation ================================
//= Skill Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20220126
//===== Description: =========================================
//= Explanation of the skill_db.yml file and structure.
//============================================================

---------------------------------------

Id: Unique skill ID.

---------------------------------------

Name: Skill Aegis name.

---------------------------------------

Description: Skill description.

---------------------------------------

MaxLevel: Max skill level.

---------------------------------------

Type: Skill type.

None	- No specific type. (Default)
Weapon	- Weapon type damage.
Magic	- Magic type damage.
Misc	- Misc type damage.

---------------------------------------

TargetType: Skill target type.

Passive	- Passive skill. (Default)
Attack	- Damage enemies.
Ground	- Ground placement skill.
Self	- Self cast skill.
Support	- Friendly cast skill.
Trap	- Trap cast skill.

---------------------------------------

DamageFlags: Skill damage properties.

NoDamage		- No damage skill. (Default)
Splash			- Has splash area.
SplashSplit		- Damage should be split among targets.
IgnoreAtkCard	- Skill ignores caster's % damage cards (Misc type always ignores).
IgnoreElement	- Skill ignores elemental adjustments.
IgnoreDefense	- Skill ignores target's defense (Misc type always ignores).
IgnoreFlee		- Skill ignores target's flee (Magic type always ignores)
IgnoreDefCard	- Skill ignores target's defense cards.
IgnoreLongCard	- Skill ignores caster's long range damage cards.
Critical		- Skill can critical.

---------------------------------------

Flags: Skill information flags.

IsQuest						- Quest skill.
IsNpc						- NPC skill.
IsWedding					- Wedding skill.
IsSpirit					- Spirit skill.
IsGuild						- Guild skill.
IsSong						- Song/Dance skill.
IsEnsemble					- Ensemble skill.
IsTrap						- Trap skill.
TargetSelf					- Damages/targets self.
NoTargetSelf				- Cannot target self. If TargetType is Self, changes to Attack.
PartyOnly					- Usable on party (and enemies if offensive).
GuildOnly					- Usable on guild (and enemies if offensive).
NoTargetEnemy				- Disable on enemies (for non-offensive).
IsShadowSpell				- Make skill available for SC_AUTOSHADOWSPELL.
IsChorus					- Chorus skill.
IgnoreBgReduction			- Ignore Battleground reduction.
IgnoreGvgReduction			- Ignore GvG reduction.
DisableNearNpc				- Disable self/ground skills near NPC. In tandem with NoNearNpc node.
TargetTrap					- Damage traps. If TargetType is Trap.
IgnoreLandProtector			- Ignore SA_LANDPROTECTOR.
AllowWhenHidden				- Usable while hiding.
AllowWhenPerforming			- Usable while in dancing state.
TargetEmperium				- Damages/targets Emperium.
IgnoreKagehumi				- Ignore KG_KAGEHUMI.
AlterRangeVulture			- Skill range affected by AC_VULTURE.
AlterRangeSnakeEye			- Skill range affected by GS_SNAKEEYE.
AlterRangeShadowJump		- Skill range affected by NJ_SHADOWJUMP.
AlterRangeRadius			- Skill range affected by WL_RADIUS.
AlterRangeResearchTrap		- Skill range affected by RA_RESEARCHTRAP.
IgnoreHovering				- Ignore SC_HOVERING.
AllowOnWarg					- Usable while riding Warg.
AllowOnMado					- Usable while on Madogear.
TargetManHole				- Target enemy with SC__MANHOLE.
TargetHidden				- Target enemy with OPTION_HIDE.
IncreaseDanceWithWugDamage	- Increase SC_DANCEWITHWUG damage.
IgnoreWugBite				- Ignore RA_WUGBITE.
IgnoreIgnorance				- Ignore SC_IGNORANCE
IgnoreAutoGuard				- Not blocked by SC_AUTOGUARD (When TargetType is Weapon only).
IgnoreCicada				- Not blocked by SC_UTSUSEMI or SC_BUNSINJYUTSU (When TargetType is Weapon only).
ShowScale					- Shows AoE area while casting
IgnoreGtb					- Not blocked by Golden Thief Bug card.
Toggleable					- Skill can be toggled on and off. When toggled off the skill doesn't consume HP/SP.
IsCustom					- 是否为自定义技能, 在使用后触发 OnAnyoneCustomSkillEvent 事件, 可通过脚本实现自定义技能

---------------------------------------

Range: Skill range. Combo skills do not check for range when used. If range is < 5 the skill is considered melee-range.

Can be defined in scalar form or sequence map form:
Scalar Form
  Range: 1

Sequence Map Form
  Range:
    - Level: 1
      Size: 1
    - Level: 2
      Size: 1
    - Level: 3
      Size: 2
    - Level: 4
      Size: 2
    - Level: 5
      Size: 3

---------------------------------------

Hit: Skill hit type.

Normal		- Passive/No damage skill. (Default)
Single		- Single hit.
Multi_Hit	- Multiple hits.

---------------------------------------

HitCount: Skill hit count. When positive the damage is increased by hits. Negative values the number of hits without increasing the total damage.

Can be defined in scalar form or sequence map form:
Scalar Form
  HitCount: 1

Sequence Map Form
  HitCount:
    - Level: 1
      Count: 2
    - Level: 2
      Count: 4
    - Level: 3
      Count: 6
    - Level: 4
      Count: 8
    - Level: 5
      Count: 10

---------------------------------------

Element: Skill element.

Neutral (Default)
Water
Earth
Fire
Wind
Poison
Holy
Dark
Ghost
Undead
Weapon	- Uses weapon element.
Endowed	- Uses endowed element.
Random	- Uses random element.

Can be defined in scalar form or sequence map form:
Scalar Form
  Element: Fire

Sequence Map Form
  Element:
    - Level: 1
      Element: Neutral
    - Level: 2
      Element: Neutral
    - Level: 3
      Element: Poison
    - Level: 4
      Element: Poison
    - Level: 5
      Element: Poison

---------------------------------------

SplashArea: Skill splash area of effect.

-1	- Screen-wide.
 0	- No splash.
All other values follow the formula: value * 2 + 1
 1	- 3x3
 2	- 5x5
 3	- 7x7
 4	- 9x9
 5	- 11x11
 6	- 13x13
 7	- 15x15
 8	- 17x17
 9	- 19x19
 10	- 21x21
 11	- 23x32
 12	- 25x25
 13	- 27x27
 14	- 29x29
 15	- 31x31

Can be defined in scalar form or sequence map form:
Scalar Form
  SplashArea: 1

Sequence Map Form
  SplashArea:
    - Level: 1
      Area: 1
    - Level: 2
      Area: 1
    - Level: 3
      Area: 2
    - Level: 4
      Area: 2
    - Level: 5
      Area: 3

---------------------------------------

ActiveInstance: Maximum amount of active skill instances that can be on the ground.

Can be defined in scalar form or sequence map form:
Scalar Form
  ActiveInstance: 1

Sequence Map Form
  ActiveInstance:
    - Level: 1
      Max: 1
    - Level: 2
      Max: 1
    - Level: 3
      Max: 2
    - Level: 4
      Max: 2
    - Level: 5
      Max: 3

---------------------------------------

Knockback: Amount of tiles the skill knockbacks.

Can be defined in scalar form or sequence map form:
Scalar Form
  Knockback: 1

Sequence Map Form
  Range:
    - Level: 1
      Amount: 1
    - Level: 2
      Amount: 1
    - Level: 3
      Amount: 2
    - Level: 4
      Amount: 2
    - Level: 5
      Amount: 3

---------------------------------------

CopyFlags: Determines if the skill is copyable.

Skill				- Type of skill that can copy.
  Plagiarism
  Reproduce
RemoveRequirement	- Ability to remove skill cast requirement.
  HpCost
  SpCost
  HpRateCost
  SpRateCost
  MaxHpTrigger
  ZenyCost
  Weapon
  Ammo
  State
  Status
  SpiritSphereCost
  ItemCost
  Equipment

---------------------------------------

NoNearNPC: Determines if the skill can be used near a NPC.

AdditionalRange	- Number of cells from an NPC where the skill can be cast.
	If zero this will read the splash range value.
	If that is also zero then Unit Range + Unit Layout Range will be used.

Type			- Type of NPC that will block the skill.
WarpPortal
Shop
Npc
Tomb

---------------------------------------

CastCancel: Cancel cast when hit.

---------------------------------------

CastDefenseReduction: Defense reduction rate during skill cast.

---------------------------------------

CastTime: Time to cast the skill in milliseconds.

Can be defined in scalar form or sequence map form:
Scalar Form
  CastTime: 1000

Sequence Map Form
  CastTime:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

AfterCastActDelay: Time the character cannot use skills in milliseconds.

Can be defined in scalar form or sequence map form:
Scalar Form
  AfterCastActDelay: 1000

Sequence Map Form
  AfterCastActDelay:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

AfterCastWalkDelay: Time before the character can move again in milliseconds.

Can be defined in scalar form or sequence map form:
Scalar Form
  AfterCastWalkDelay: 1000

Sequence Map Form
  AfterCastWalkDelay:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

Duration1: Duration of the skill in milliseconds.

Can be defined in scalar form or sequence map form:
Scalar Form
  Duration1: 1000

Sequence Map Form
  Duration1:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

Duration2:  Duration of the skill in milliseconds.

Can be defined in scalar form or sequence map form:
Scalar Form
  Duration2: 1000

Sequence Map Form
  Duration2:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

Cooldown: Time before the character can use the same skill again in milliseconds.

Can be defined in scalar form or sequence map form:
Scalar Form
  Cooldown: 1000

Sequence Map Form
  Cooldown:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

FixedCastTime: Time that is fixed during cast of the skill in milliseconds. A value of -1 will use 20% of CastTime as FixedCastTime. See battle_config::default_fixed_castrate to adjust the rate.

Can be defined in scalar form or sequence map form:
Scalar Form
  FixedCastTime: 1000

Sequence Map Form
  FixedCastTime:
    - Level: 1
      Time: 1000
    - Level: 2
      Time: 2000
    - Level: 3
      Time: 3000
    - Level: 4
      Time: 4000
    - Level: 5
      Time: 5000

---------------------------------------

CastTimeFlags: Effects of the skill's cast time.

IgnoreDex		- Cast time not affected by DEX.
IgnoreStatus	- Cast time not affected by statuses (Suffragium, etc).
IgnoreItemBonus	- Cast time not affected by item bonuses.

---------------------------------------

CastDelayFlags: Effects of the skill's delay.

IgnoreDex		- Delay not affected by DEX.
IgnoreStatus	- Delay not affected by statuses (Suffragium, etc).
IgnoreItemBonus	- Delay not affected by item bonuses.
IgnoreFalse	    - Delay not affected by skill use failure (技能使用失败后不进入技能延迟). 
IgnoreAction    - Delay not affected by action (取消技能动作后摇, 达到秒7). 

IgnoreDex only makes sense when battle_config::delay_dependon_dex is enabled.

---------------------------------------

Requires: List of requirements to cast the skill.

HpCost: HP required to cast.

Can be defined in scalar form or sequence map form:
Scalar Form
  HpCost: 10

Sequence Map Form
  HpCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

SpCost: SP required to cast.

Can be defined in scalar form or sequence map form:
Scalar Form
  SpCost: 10

Sequence Map Form
  SpCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

ApCost: AP required to cast.

Can be defined in scalar form or sequence map form:
Scalar Form
  ApCost: 10

Sequence Map Form
  ApCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

HpRateCost: HP rate required to cast. If positive, uses current HP, else uses Max HP.

Can be defined in scalar form or sequence map form:
Scalar Form
  HpRateCost: 10

Sequence Map Form
  HpRateCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

SpRateCost: SP rate required to cast. If positive, uses current SP, else uses Max SP.

Can be defined in scalar form or sequence map form:
Scalar Form
  SpRateCost: 10

Sequence Map Form
  SpRateCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

ApRateCost: AP rate required to cast. If positive, uses current AP, else uses Max AP.

Can be defined in scalar form or sequence map form:
Scalar Form
  ApRateCost: 10

Sequence Map Form
  ApRateCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

MaxHpTrigger: Maximum amount of HP to cast the skill.

Can be defined in scalar form or sequence map form:
Scalar Form
  MaxHpTrigger: 10

Sequence Map Form
  MaxHpTrigger:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

ZenyCost: Zeny required to cast.

Can be defined in scalar form or sequence map form:
Scalar Form
  ZenyCost: 10

Sequence Map Form
  ZenyCost:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

Weapon: Weapon required to cast.

All (Default)
Fist
Dagger
1hSword
2hSword
1hSpear
2hSpear
1hAxe
2hAxe
Mace
2hMace
Staff
Bow
Knuckle
Musical
Whip
Book
Katar
Revolver
Rifle
Gatling
Shotgun
Grenade
Huuma
2hStaff

------------------

Ammo: Ammo required to cast.

None (Default)
Arrow
Dagger
Bullet
Shell
Grenade
Shuriken
Kunai
Cannonball
Throwweapon

------------------

AmmoAmount: Ammo amount required to cast.

Can be defined in scalar form or sequence map form:
Scalar Form
  AmmoAmount: 10

Sequence Map Form
  AmmoAmount:
    - Level: 1
      Amount: 1
    - Level: 2
      Amount: 2
    - Level: 3
      Amount: 3
    - Level: 4
      Amount: 4
    - Level: 5
      Amount: 5

------------------

State: Special state required to cast.

None				- No special state required.
Hidden				- Requires OPTION_HIDE, OPTION_CLOAK, or OPTION_CHASEWALK.
Riding				- Requires OPTION_RIDING or OPTION_DRAGON.
Falcon				- Requires OPTION_FALCON.
Cart				- Requires OPTION_CART for pre-renewal or SC_PUSH_CART for renewal.
Shield				- Requires a shield to be equipped.
Recover_Weight_Rate	- Requires weight to be less than 50% for pre-renewal or 70% for renewal.
Move_Enable			- Requires to be able to move.
Water				- Requires to be standing in water.
RidingDragon		- Requires OPTION_DRAGON.
Wug					- Requires OPTION_WUG.
RidingWug			- Requires OPTION_WUGRIDER.
Mado				- Requires OPTION_MADOGEAR.
ElementalSpirit		- Requires an Elemental Spirit to be summoned.
ElementalSpirit2	- Requires an Elemental Spirit to be summoned and will be removed after.
Peco				- Requires OPTION_RIDING.
Sunstance			- Requires Sun/Universe Stance status be active.
Moonstance			- Requires Moon/Universe Stance status be active.
Starstance			- Requires Star/Universe Stance status be active.
Universestance		- Requires Universe Stance status be active.

------------------

Status: Status change required to cast.

For a full list, see src/map/status.hpp::sc_type.

------------------

SphereCost: Spirit sphere required to cast.

Can be defined in scalar form or sequence map form:
Scalar Form
  SphereCost: 10

Sequence Map Form
  SphereCost:
    - Level: 1
      Amount: 1
    - Level: 2
      Amount: 2
    - Level: 3
      Amount: 3
    - Level: 4
      Amount: 4
    - Level: 5
      Amount: 5

------------------

ItemCost: Item required to cast. If the Level is supplied, then the ItemCost becomes skill level dependent.

Levels 1 - 5 have no item cost but levels 6 - 10 require a Blue Gemstone.
  ItemCost:
    - Item: Blue_Gemstone
      Amount: 1
      Level: 6
    - Item: Blue_Gemstone
      Amount: 1
      Level: 7
    - Item: Blue_Gemstone
      Amount: 1
      Level: 8
    - Item: Blue_Gemstone
      Amount: 1
      Level: 9
    - Item: Blue_Gemstone
      Amount: 1
      Level: 10

# All levels require a Blue Gemstone.
  ItemCost:
    - Item: Blue_Gemstone
      Amount: 1

------------------

GiveAp: AP given on successful casting.

Can be defined in scalar form or sequence map form:
Scalar Form
  GiveAp: 10

Sequence Map Form
  GiveAp:
    - Level: 1
      Amount: 10
    - Level: 2
      Amount: 20
    - Level: 3
      Amount: 30
    - Level: 4
      Amount: 40
    - Level: 5
      Amount: 50

------------------

Equipment: Equipped item required to cast.

---------------------------------------

Unit: Skill unit values.

Id: Skill unit ID.

For a full list, see src/map/skill.hpp::e_skill_unit_id.

------------------

AlternateId: Alternate skill unit ID.

For a full list, see src/map/skill.hpp::e_skill_unit_id.

------------------

Layout: Skill unit layout.

-1	- Screen-wide.
 0	- No splash.
All other values follow the formula: value * 2 + 1
 1	- 3x3
 2	- 5x5
 3	- 7x7
 4	- 9x9
 5	- 11x11

Can be defined in scalar form or sequence map form:
Scalar Form
  Layout: 10

Sequence Map Form
  Layout:
    - Level: 1
      Size: 1
    - Level: 2
      Size: 2
    - Level: 3
      Size: 3
    - Level: 4
      Size: 4
    - Level: 5
      Size: 5

------------------

Range: Skill unit range.

Can be defined in scalar form or sequence map form:
Scalar Form
  Range: 10

Sequence Map Form
  Range:
    - Level: 1
      Size: 1
    - Level: 2
      Size: 2
    - Level: 3
      Size: 3
    - Level: 4
      Size: 4
    - Level: 5
      Size: 5

------------------

Interval: Skill unit interval in milliseconds.

------------------

Target: Skill unit target type.

Friend		- Targets Party, Guild, Guild Allies, and neutral players.
Party		- Targets Party.
Ally		- Targets Party and Guild and Guild Allies.
Guild		- Targets Guild and Guild Allies.
All			- Targets all. (Default)
Enemy		- Targets enemy.
Self		- Targets self.
SameGuild	- Targets Guild but not Guild Allies.

------------------

Flag: Skill unit flags.

None				- No flags.
NoEnemy				- If battle_config::defunit_not_enemy is enabled, the Target is changed to Friend.
NoReiteration		- Spell cannot be stacked.
NoFootSet			- Spell cannot be cast near/on targets.
NoOverlap			- Spell effects do not overlap.
PathCheck			- Only cells with a shootable path will be placed.
NoPc				- Spell cannot affect players.
NoMob				- Spell cannot affect mobs.
Skill				- Spell can affect skills.
Dance				- Dance unit.
Ensemble			- Duet unit.
Song				- Song unit.
DualMode			- Spell has effects both at an interval and when you step in/out.
NoKnockback			- Cannot be knocked back (only unit that can be damaged).
RangedSingleUnit	- Layout hack, use layout range property but only display center.
CrazyWeedImmune		- Immune to GN_CRAZYWEED.
RemovedByFireRain	- Removed by RL_FIRE_RAIN.
KnockbackGroup		- Knock back a whole skill group (by default, skill unit is knocked back by each unit).
HiddenTrap			- Hidden trap. See battle_config::traps_setting to enable this flag.

------------------

Status: Status Change that is associated to the skill. The status is used in association with the status.yml database.
//===== rAthena Documentation ================================
//= Source Documentation
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20140218
//===== Description: =========================================
//= Explanation of source behaviours and structures.
//============================================================

This file provides basic information about rAthena's source code.
The format of this file is as follows:
	1. Glossary
	2. Intro & Emulation
	3. Interface and Communications
	4. Databases and Independence
	5. Package and Module Purposes
	6. Nomenclature
	7. Variable Notes
	8. Building
	9. Atcommands & Script Commands

===============
| 1. Glossary |
===============
The following terms will be frequently used throughout this file, so it is
important to have a thorough understanding of what they are to avoid confusion.

  Term          Description
  ----          -----------  
  serv          a program/daemon that runs indefinitely offering a service
  host          a machine that has one or more servs running
  command       a request of an action on the server or client
                (atcommand, script_command, packet_request)
  interface     a class/module that offers a list of commands

========================
| 2. Intro & Emulation |
========================
rAthena is an emulation of Ragnarok Online, which runs on software known as AEGIS.
AEGIS is separated into 4 servs:

  Serv       Description
  ----       -----------
  account    handles player account information and logins.
  char       handles character data (persistent information).
  inter      handles broadcasting across map-serv. [merged into rAthena's char-serv]
  map        handles all player runtime actions.

These servs are an aggregation of each other:
  login-serv  =>  1 - * char-serv, 1 - * map-serv

In this case, * is 30. This means that 1 login-serv is able to manage up to
30 char-serv, which itself can manage up to 30 map-serv. Note that due to these
aggregations, the login-serv and map-serv never directly communicate with each other.

===================================
| 3. Interface and Communications |
===================================
We have 3 types of communication:

  1. serv <=> serv  (AH,HA,HZ,ZH)
     This type of server-to-server communication is referred to as "inter-serv" communication.

  2. serv <=> client  (AC,CA,HC,CH,ZC,CZ)
     This is what our servs send or receive to a player client.
	
  3. serv <=> console/terminal
     This is the only kind of communication which doesn't use packets (currently).
     It's only done in localhost from console to servs (a way to input args in servs runtime).

The packet notation and structure are well defined in 'doc/packet_struct_notation.txt'.

Note that scripts and atcommands are another kind of interface, as they allow
users to input data into the serv.

=================================
| 4. Databases and Independence |
=================================
Each server can theoretically be set in a different host with its own databases
associated (although this is currently broken due to years without documentation).
In other words, you shouldn't expect to find char-serv data on a map-serv host
and access it directly, but rather ask the char-serv to fetch it.

The list below details the association of database tables with the servs.
For real table names, see 'conf/inter_athena.conf'.

  ==============
  | Login-serv |
  ==============

  Table                 Contents
  -----                 --------
  login_db              all account-related information
  reg_db                permanent account variables (ex. #CASHPOINTS)

  =============
  | Char-serv |
  =============

  Table                 Contents
  -----                 --------
  char_db               all char-related information
  hotkey_db             hotkeys set for each character
  scdata_db             character status at disconnection
  cart_db               list of items in each character's cart
  inventory_db          list of items in each character's inventory
  charlog_db            char-serv logs
  storage_db            list of items in each character's storage (Kafra)
  reg_db                permanent character variables (ex. ADVJOB)
  skill_db              character learned skill database
  interlog_db           inter-serv logs
  memo_db               character Memo_point database 
  guild_db              guild record (name, master, lv, exp, emblem, etc.)
  guild_alliance_db     guild relations database (allies, enemies)
  guild_castle_db       guild owned castle database
  guild_expulsion_db    guild expulsion logs
  guild_member_db       guild current member titles and positions
  guild_skill_db        guild learned skills database
  guild_position_db     guild positions configuration (names, taxes, rights)
  guild_storage_db      guild item storage
  party_db              party record (name, leader, shared_exp, shared_item)
  pet_db                saved pet objects database
  friend_db             character friends database
  mail_db               mail database
  auction_db            auction database
  quest_db              character quest realisation database
  homunculus_db         saved homunculus objects database
  skill_homunculus_db   homunculus learned skills database
  mercenary_db          saved mercenary objects database (HP, SP, level, etc.)
  mercenary_owner_db    character proprietary link to mercenary object save and use stats
  elemental_db          saved Elemental objects database (HP, SP, FLEE, etc.)
  ragsrvinfo_db         map-serv rate record (similar to 'conf/battle/drop.conf', possibly a leftover?)
  skillcooldown_db      character skill cooldowns at disconnection
  bonus_script_db       character bonus_script at disconnection

  ============
  | Map-serv |
  ============

  Table                 Contents
  -----                 --------
  mapreg_db             permanent map-serv global variables (ex. $agit_result_timer)
  buyingstore_db        live buyers database (map_pos, aid, shop title, etc.)
  buyingstore_items_db  items currently being purchased by live buyers
  vending_db            live vendors database (map_pos, aid, shop title, etc.)
  vending_items_db      items currently being sold by live vendors

  The tables below are optional alternatives to TXT databases located in 'db/*.txt'.

  item_db               item database (Pre-Renewal)
  item_db_re            item database (Renewal)
  item_db2              item database import (Pre-Renewal)
  item_db2_re           item database import (Renewal)
  item_cash_db          cash shop database
  item_cash_db2         cash shop database (import)
  mob_db                monster database (Pre-Renewal)
  mob_db_re             monster database (Renewal)
  mob_db2               monster database import (Pre-Renewal)
  mob_db2_re            monster database import (Renewal)
  mob_skill_db          monster skill database (Pre-Renewal)
  mob_skill_db_re       monster skill database (Renewal)
  mob_skill_db2         monster skill database import (Pre-Renewal)
  mob_skill_db2_re      monster skill database import (Renewal)

==================================
| 5. Package and Module Purposes |
==================================
The following list describes each module and its purpose.

  ============
  | 3rdparty |
  ============
  The '3rdparty/' folder contains libraries used by the project but are not maintained by us.

  ==========
  | Common |
  ==========
  The 'src/common' folder contains all the modules which are used by more then 1 serv.

  Module         Description
  ------         -----------
  cbasetypes     adapter to OS and arch specification (function name, bit representation)
  cli            console Line Interface handling (get arguments from terminal at beginning and runtime) 
  conf           facade of libconfig api
  core           MAIN program entry (initialization of each serv starts here)
  db             database module (create, parse, and destroy databases)
  des            Data Encryption Standard algorithm modified for rAthena
  ers            Entry Reusage System to help memory allocation
  grfio          handles *.grf files (searches for files in them and decodes them)
  malloc         handles runtime memory allocation (so that memory manager could check for leaks)
  mapindex       handles the processing and reading of the mapcache.dat
  md5calc        offers md5 encryption
  mmo.hpp        common structures and defines across serv
  msg_conf       handles msg in src from configuration
  nullpo         checks and dumps info for debug mode
  random         generation of random numbers
  showmsg        display messages in console with a certain color
  socket         handling of sockets (listening, close, open, etc.)
  sql.cpp        MySQL database proxy
  strlib.cpp     string handling
  timer.cpp      timer-related functions
  utils.cpp      misc functions
  winapi.hpp     Windows redefine and include

  ==============
  | Login-serv |
  ==============

  Module         Description
  ------         -----------
  account            persistence for account data
  ipban              offers IP banishment
  login              main module of login-serv
  loginclif          client <=> login-serv connections interface (send and receive packets to/from client)
  loginchrif         char-serv <=> login-serv connections interface (send and receive packets to char-serv)
  logincsnlif        console <=> login-serv connections interface (send and receive packets to/from console (internal buffer))
  loginlog           records all operations into log for login-serv

  =============
  | Char-serv |
  =============
  The char-serv is responsible for persistence (save/load data permanently) and
  also serves as a controller that handles all associated map-servs. Further, it
  is responsible for ensuring that there are no duplicate party names among the
  map-servs (which could create conflicts if a party transfers map-servs).

  Module             Description
  ------             -----------
  char               currently holds all the char-serv (EA) process
  -- char_clif       client <=> char-serv connections interface (send and receive packets to/from client)
  -- char_csnlif     console <=> char-serv connections interface (send and receive packets to/from console (internal buffer))
  -- char_mapif      map-serv <=> char-serv connections interface (send and receive packets to map-serv)
  -- char_logif      login-serv <=> char-serv connections interface (send and receive packets to login-serv)
  inter              main entry to inter-serv; delegates packet handling to submodules
  -- int_auction     handles auction request and saving
  -- int_elemental   handles elemental data (BL_ELE => Sorcerer mob)
  -- int_guild       handles guild data (creation, destruction, add member, etc.)
  -- int_homun       handles homunculus data (BL_HOM => Alchemist mob)
  -- int_mail        handles mail data
  -- int_mercenary   handles mercenary data (BL_MER => All class mob)
  -- int_party       handles party data (creation, destruction, add member, etc.)
  -- int_pet         handles pet data (BL_PET => All class mob)
  -- int_quest       handles quest data
  -- int_storage     handles storage data (save storage, load storage, etc.)

  ============
  | Map-serv |
  ============

  Module         Description
  ------         -----------
  atcommand      handles GM commands (ex. @who)
  battle         handles damage calculation where target is enemy and battle configuration settings
  battleground   functions for Battleground system (create, destroy, messaging, join, etc.)
  buyingstore    functions for player Buying Stores (create, search, sell)
  cashshop       functions to set up the server cashshop (from cashshop_db), and contains function to buy items from cashshop
  channel        functions for the channel system (create, delete, join/auto-join, leave, broadcast, alter options)
  chat           functions for the chatroom system (create, delete, trigger chatroom_event, change owner, etc.)
  chrif          char-serv <=> map-serv connections interface (send and receive packets to char-serv)
  clif           client <=> map-serv connections interface (send and receive packets to/from client)
  date           functions for time
  duel           functions for the duel system
  elemental      functions for Sorcerer Elementals processing (create, delete, etc.)
  guild          functions for the guild system
  homunculus     functions for Alchemist Homunculi processing (create, delete, get stats, death, etc.)
  instance       functions for instance system
  intif          map-serv <=> inter-serv interface (meant to communicate with 'char/inter.cpp' or its submodules)
  itemdb         functions for the item database
  log            functions for server log system
  mail           functions for mail system
  map            map-serv main module, and a representation of a map object
                   adds or removes other objects into map (blocklist) and provides iterators (ex. map_foreachpc)
  mapreg         functions to save or read variables in mapreg_db (global variables for all map-serv)
  mercenary      functions for Mercenary system (create, search, get stats, dead)
  mob            functions for mob data, structures, and mob routines
  npc            functions for NPC data (create, delete, calling NPCs)
  npc_chat       functions for PCRE and NPC interaction
  party          functions for the party system (create, join, delete, alter options, etc.)
  path           functions for path finding (check_distance, search path unit will use)
  pc             functions for player processing (loot/drop/delete items, player bonus handling, player dead, etc.)
  pc_groups      functions for players groups system (manage player permissions and atcommand access)
  pet            functions for the pet system (similar to mercenary, homunculus, player, etc.)
  quest          functions for the quest log system (add, complete, remove, etc.) 
  script         handles script language logic (used in NPC scripts), script commands, and mapflags
  searchstore    functions for the Vendor Shop Search feature
  skill          functions for skills (skill_casttime calculation, skill behaviours, skill_chk_cast, requirement checks, 'db/skill_*.txt' processing)
  status         functions for statuses on a bl (add, remove, calculation of effects as a temporary bonus)
                   status is a struct available by most units as common attributes (bl_type only attribute are dealt in bl specific files, like 'pc.cpp' or 'mob.cpp')
  storage        functions for the storage system: Kafra, cart, guild, inventory (add, transfer, remove items between containers)
                   also ensures container mutex (e.g. guild_storage) and preparation for save requests
  trade          functions to perform a trade (request, accept, add items/Zeny, checks, complete trade)
  unit           functions for controlling player/mob/NPC actions (walk, follow, skill use)
  vending        functions for Merchant Vending (create, purchase)

===================
| 6. Nomenclature |
===================
The following are standard naming conventions used by rAthena.

  Type        Prefix         Example
  ----        ------         -------
  function    module_        pc_addspiritball -> located in pc.cpp file
  structure   s_             s_quest_db
  enum        e_             e_race
  status      SC_            SC_INTOABYSS
  skill       classmid_      AL_TELEPORT -> AL = Acolyte
  bonus       SP_            SP_ATK_RATE

NOTES:
  - If a status name conflicts with a skill name, another '_' is added (e.g. SC__WEAKNESS).
  - All constants should be written in all caps.
  - battle_config vs. #define macro:
        battle_config can be changed during runtime (ex. @setbattleflag), but this requires
        more processing and could render the server less stable than a macro would.

=====================
| 7. Variable Notes |
=====================
The following variables are commonly used in the source code.

  Variable   Full Name            Description
  --------   ---------            -----------
  sd         session data         represents the session of a client into a serv (login, char, or map)
  tsd        target sd            same as sd, but for a target
  pl_sd                           usually in an iteration loop, the current sd of index
  it_sd                           a variant of pl_sd (for iter_sd)
  fd         file descriptor      a link to an I/O like a socket or file
  md         mob data             represents monster information; also used to represent mercenary information
  hd         homunculus data      represents homunculus information
  nd         NPC data             represents NPC information
  ed         elemental data       represents elemental information
  pd         pet data             represents pet information
  sc         status change        a structure containing all the possible status applied to a character
  tsc        target sc            same as sc, but for a target
  sce        status change entry  represents data of a specific inflicted status
  bl         blocklist            common data of one object (a skill, pet, player, etc); also represents a 2-way chain-link
  tbl        target bl            same as bl, but for a target
  st         script stack         the stack of an NPC
  aid        account id           a player account ID
  gid        game id              the general unique ID of a Unit, which is the aid for players
                                  (since a single character per account can be connected at one time)
  cid        character id         a player character ID
  rid        character id         a variant of cid
  su         skill unit           a skill with a unit that remains on the ground

===============
| 8. Building |
===============
When adding a new src file or library (new.cpp and its header, new.hpp), you'll also
need to update the following files to fully integrate it into the project so that
users can compile it.

There are 3 ways to compile the project:

> configure + makefile (requires POSIX environment + C compiler)
  This flow is mainly used by Linux users, but can be done in any POSIX environment (ex. Windows + Cygwin).
  - Configure.in: Template file to generate the configure script by autoconf.
  - Makefile.in: Template makefile to generate the real makefile according to configure. Each subfolder needs its own makefile.
  - Makefile: File filled with rules for gcc to compile folder.
  The sequence is as follows:
	1) configure.in => configure by autoconf ('autoconf configure.in > configure')
	2) configure    => Makefile by Makefile.in
	3) Makefile     => binary by 'make all' or alternative

> cmake (requires C compiler + cmake)
  - CmakeList: Comparable to Makefile, but in a more cross-OS way.
  The sequence is as follows:
	1) Define which toolchain to use, acting like a configure ('cmake -G "Unix Makefiles"' or 'cmake -G "Visual Studio 10"')
	2) Enter the build folder where the Makefiles are generated and launch 'make install' to produce binaries from them

> sln (requires Visual Studio)
  - *.sln: Solution project for Visual Studio (Windows).

See https://github.com/rathena/rathena/wiki/compiling for more detailed compilation instructions.

===================================
| 9. Atcommands & Script Commands |
===================================
To implement an atcommand or script command, you must define a function and
add its reference to the appropriate array. See the files in 'src/custom/'
for examples.

Atcommands
----------
	ACMD_FUNC(name)
	{
		<code>
	}

	ACMD_DEF(name)  - OR -  ACMD_DEFR(name,restriction)
	  - OR -
	ACMD_DEF2("alias",name)  - OR -  ACMD_DEF2R("alias",name,restriction)

  Restriction    Description
  -----------    -----------
      1          restrict usage in console
      2          restrict usage in script_command

Script Commands
---------------
	BUILDIN_FUNC(name)
	{
		<code>
	}

	BUILDIN_DEF(name,"arguments")
	  - OR -
	BUILDIN_DEF2(name,"alias","arguments")

  Argument    Description
  --------    -----------
     i        integer
     s        string
     v        variable
     l        label
     r        reference (of a variable)
     ?        optional parameter (one)
     *        optional parameter (unknown count)
              null (no arguments)

Useful functions:
  script_hasdata(st,i);       // Returns if the stack contains data at the target index
  script_getdata(st,i);       // Returns the script_data at the target index (data is a glob type)
  script_getnum(st,val);      // Returns the int at the target index
  script_getstr(st,val);      // Returns the string at the target index
  script_getref(st,val);      // Returns the reference of a variable at the target index (useful for arrays, ex. 'checkweight2')
  script_getfuncname(st);     // Returns the current function name (useful for function variants, ex. 'sc_start')
  script_pushint(st,val);     // Pushes an int into the stack
  script_pushstr(st,val);     // Pushes a string into the stack
  script_isstring(st,i);      // Returns if the data at at the target index is a string
  script_isint(st,i);         // Returns if the data at at the target index is an int
//===== rAthena Documentation ================================
//= Status Change Database Structure
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20221216
//===== Description: =========================================
//= Explanation of the status.yml file and structure.
//============================================================

---------------------------------------

Status: Status change name.

See src/map/script_constants.hpp for SC_ constants.

---------------------------------------

Icon: Status change icon or client effect that will be displayed client-side.

See src/map/script_constants.hpp for EFST_ constants.

---------------------------------------

DurationLookup: Used for default duration lookup in skill_db.yml. The lookup is used for some item bonuses as default duration.

---------------------------------------

States: Specified states given when the SC is active.

	None               - No special state. (Default)
	NoMove             - Cannot move.
	NoMoveCond         - Condition check for SCS_NOMOVE.
	NoPickItem         - Cannot pick item.
	NoPickItemCond     - Condition check for SCS_NOPICKITEM.
	NoDropItem         - Cannot drop item.
	NoDropItemCond     - Condition check for SCS_NODROPITEM.
	NoCast             - Cannot cast a skill.
	NoCastCond         - Condition check for SCS_NOCAST.
	NoChat             - Cannot chat and open chat room.
	NoChatCond         - Condition check for SCS_NOCHATCOND.
	NoEquipItem        - Cannot put on equipment.
	NoEquipItemCond    - Condition check for SCS_NOEQUIPITEM.
	NoUnEquipItem      - Cannot put off equipment.
	NoUnEquipItemCond  - Condition check for SCS_NOUNEQUIPITEM.
	NoConsumeItem      - Cannot consume item.
	NoConsumeItemCond  - Condition check for SCS_NOCONSUMEITEM.
	NoAttack           - Cannot attack.
	NoAttackCond       - Condition check for SCS_NOATTACK.
	NoWarp             - Cannot warp.
	NoWarpCond         - Condition check for SCS_NOWARP.
	NoDeathPenalty     - Cannot lose experience on death.
	NoDeathPenaltyCond - Condition check for SCS_NODEATHPENALTY.
	NoInteract         - Cannot interact with client (sit/stand or talk with NPC).
	NoInteractCond     - Condition check for SCS_NOINTERACT.

States that have a suffix of "Cond" means the State has hard coded conditions in status.cpp::status_calc_state

---------------------------------------

CalcFlags: Flag that indicates which status calculation needs to be performed. Even if the value is changed in the status_db.yml the SC must have the respective bonus defined in source.

	None    - Calculates nothing. (Default)
	Base    - Base status
	MaxHp   - Maximum HP
	MaxSp   - Maximum SP
	Str     - STR
	Agi     - AGI
	Vit     - VIT
	Int     - INT
	Dex     - DEX
	Luk     - LUK
	Batk    - Base Attack
	Watk    - Weapon Attack
	Matk    - Magic Attack
	Hit     - Hit/accuracy rate
	Flee    - Flee/dodge rate
	Def     - Equipment Defense
	Def2    - Defense
	Mdef    - Equipment Magic Defense
	Mdef2   - Magic Defense
	Speed   - Walk speed
	Aspd    - Attack speed
	Dspd    - Damage delay speed
	Cri     - Critical rate
	Flee2   - Perfect dodge rate
	Atk_Ele - Attack Element
	Def_Ele - Defense Element
	Mode    - Mode
	Size    - Size
	Race    - Race
	Range   - Range
	Regen   - Regeneration
	MaxAp   - Maximum AP
	Pow     - POW
	Sta     - STA
	Wis     - WIS
	Spl     - SPL
	Con     - CON
	Crt     - CRT
	Patk    - Physical Power
	Smatk   - Spell Magic Attack
	Res     - Physical Resistance
	Mres    - Magic Resistance
	Hplus   - Heal Plus
	Crate   - Critical Rate
	Dye     - Dye
	All     - Calculates all CalcFlags

---------------------------------------

Opt1: Special effect when status is active (Aegis: BODYSTATE_*). This option is not stackable. These effects also apply their special behaviors.

	None         - No effect (Default)
	Stone        - Stone curse effect
	StoneWait    - Stone curse incubation effect
	Freeze       - Freeze effect
	Stun         - Stun effect
	Sleep        - Sleep effect
	StoneWait    - Effect before Stone is really applied
	Burning      - Burning effect
	Imprison     - Imprison effect
	Crystalize   - Crystalize effect

---------------------------------------

Opt2: Special option/client effect when status is active (Aegis: HEALTHSTATE_*).

	None           - No effect (Default)
	Poison         - Posioned effect
	Curse          - Cursed effect
	Silence        - Silenced effect
	SignumCrucis   - Signum Crucis effect
	Blind          - Blind effect
	Angelus        - Angelus effect
	Bleeding       - Bleeding effect
	Dpoison        - Heavy Poisoned effect
	Fear           - Fear effect

---------------------------------------

Opt3: Special option/client effect when status is active (Aegis: SHOW_EFST_*)

	Normal            - No effect (Default)
	Quicken           - Quicken effect
	OverThrust        - Overthrust effect
	EnergyCoat        - Energy Coat effect
	ExplosionSpirits  - Explosion Spirits effect
	SteelBody         - Steel Body effect
	BladeStop         - Blade Stop effect
	AuraBlade         - Aura Blade effect
	Berserk           - Berserk effect
	LightBlade        - Light Blade effect
	Moonlit           - Moonlit effect
	Marionette        - Marionette effect
	Assumptio         - Assumptio effect
	Warm              - Warm effect
	Kaite             - Kaite effect
	Bunsin            - Bunshin effect
	SoulLink          - Soul Link effect
	Undead            - Undead effect
	Contract          - Contract effect

---------------------------------------

Options: Special option/client effect state when status is active.

	Nothing        - No effect (Default)
	Sight          - Sight effect
	Hide           - Hide effect
	Cloak          - Cloaking effect
	Falcon         - Falcon effect
	Riding         - Riding effect
	Invisible      - Invisible effect
	Orcish         - Orcish effect, the ugly face!
	Wedding        - Wedding costume
	Ruwach         - Ruwach effect
	ChaseWalk      - Chasewalk effect
	Flying         - Flying effect (Star Gladiator's Union)
	Xmas           - Christmas costume
	Transform      - Transformation
	Summer         - Summer costume
	Dragon1        - Dragon
	Dragon2        - Dragon
	Dragon3        - Dragon
	Dragon4        - Dragon
	Dragon5        - Dragon
	Wug            - Wug
	WugRider       - Riding a Wug
	Madogear       - Madogear
	Hanbok         - Hanbok costume
	Oktoberfest    - Oktoberfest costume

---------------------------------------

Flags: Various status flags for specific status change events.

	None                  - No special flag. (Default)
	BlEffect              - Status should have BL_SCEFFECT as relevant effect, must have an EFST (displays on BL_PC, BL_HOM, BL_MER, BL_MOB, BL_ELEM). BL_PC is the default value.
	DisplayPc             - Displays status effect when player logs in.
	DislpayNpc            - Displays status effect on a NPC.
	Debuff                - Status is considered a debuff. Used in combination with 'battle_config.debuff_on_logout'.
	SetStand              - Sets player to standing state.
	OverlapIgnoreLevel    - The status will successfully activate for any level if the status is already active.
	FailedMado            - Cannot be applied if Madogear is active.
	MadoCancel            - Cancels the status when mounting Madogear.
	MadoEndCancel         - Cancels the status when unmounting Madogear.
	MobLoseTarget         - When active on a monster it will lose the target.
	RestartOnMapWarp      - Restarts the timer of a status when warping to another map.
	SpreadEffect          - Passes the status onto a target when SC_DEADLYINFECT is active.
	SendVal1              - Notifies the client of a status change (val1).
	SendVal2              - Notifies the client of a status change (val2).
	SendVal3              - Notifies the client of a status change (val3).

	NoClearbuff           - Cannot be removed by 'status_change_clear_buffs()', 'sc_end SC_ALL', 'status_change_clear(3)', etc.
	NoForcedEnd           - Cannot be removed by sc_end.
	NoRemoveOnDead        - Cannot be removed when a player dies.
	NoDispell             - Cannot be removed by SA_DISPELL.
	NoClearance           - Cannot be removed by AB_CLEARANCE.
	NoBanishingBuster     - Cannot be removed by RL_BANISHING_BUSTER.
	NoSave                - Won't be saved when player logs out.
	NoSaveInfinite        - Infinite duration status won't be saved when player logs out.
	NoWarning             - Ignores the status_change_start check for statuses that have no defining features associated to them in the status database.

	RemoveOnDamaged       - Removed when receiving damage.
	RemoveOnRefresh       - Removed by RK_REFRESH.
	RemoveOnLuxAnima      - Removed by RK_LUXANIMA.
	RemoveOnMapWarp       - Removed when warping to another map.
	RemoveOnChangeMap     - Removed when changing map-server.
	RemoveChemicalProtect - Removed by AM_CP_ARMOR/AM_CP_HELM/AM_CP_SHIELD/AM_CP_WEAPON.
	RemoveElementalOption - Removed by elemental changing modes/quitting/EL_TIDAL_WEAPON/EL_WATER_SCREEN on the master and elemental.
	RemoveOnUnequip       - Removed when unequipping any type of equipment.
	RemoveOnUnequipWeapon - Removed when unequipping a weapon.
	RemoveOnUnequipArmor  - Removed when unequipping an armor.
	RemoveOnHermode       - Removed by CG_HERMODE.

	StopAttacking         - Makes the unit stop attacking.
	StopCasting           - Makes the unit stop casting skills.
	StopWalking           - Makes the unit stop walking.

	BossResist            - Cannot be applied to Boss Monster (Mob has mode MD_STATUS_IMMUNE).
	MvpResist             - Cannot be applied to MvP (Mob has mode MD_MVP).

	SendOption            - Sends the STATE_CHANGE packet. For statuses that have Opt1, Opt2, or Opt3 values.
	SendLook              - Sends the STATE_CHANGE packet. For statuses that have body/look changes through 'Option' flags (only for players).
	OnTouch               - Triggers OnTouch_ NPC events. For statuses that have an invisible effect.
	UnitMove              - Triggers when the player has moved location and invokes the skill unit on place.
	NonPlayer             - Sends the NPC_SHOWEFST_UPDATE packet. Used to send effects to NPC/monsters.

	RequireWeapon         - Status requires a weapon to be equipped.
	RequireShield         - Status requires a shield to be equipped.

	SuperNoviceAngel      - Status that is given from Super Novice Angel.
	TaekwonAngel          - Status that is given from Taekwon Angel.

---------------------------------------

MinDuration: Minimum duration, in milliseconds, after reduction calculation for status resistance.

---------------------------------------

MinRate: Minimum success rate, at n/10000, after reduction calculation for status resistance.

---------------------------------------

Fail: List of status that causes the status to fail to activate.

---------------------------------------

EndOnStart: List of status that will end if the status activates.

---------------------------------------

EndReturn: List of status that will end if the status activates and it won't give its effect.
           The statuses checked in this list are done at the beginning of status_change_start(). If at least 1 status from this list
		   is removed then it will return back and not check anything else.

---------------------------------------

EndOnEnd: List of status that will end when the status becomes inactive.

---------------------------------------

Notes:

By default, statuses are 'Buff' (those that aren't explicitely given the 'Debuff' flag) which are removable by 'map_quit' in combination with 'battle_config.debuff_on_logout'.

The NoClearbuff flag prevents some permanent and non-permanent statuses that cannot be removed by 'status_change_clear', 'status_change_clear_buffs', 'map_quit', or other
clearing means.
The function 'status_change_clear_buffs' is called by CG_TAROTCARD, RK_REFRESH, RK_LUXANIMA, CG_HERMODE, PA_GOSPEL, and LG_INSPIRATION.

CG_TAROTCARD and CG_HERMODE only remove buffs while PA_GOSPEL and LG_INSPIRATION remove buffs and debuffs.

RK_REFRESH and RK_LUXANIMA only remove statuses that have the Rem_On_Rerfresh or RemoveOnLuxAnima flag. Works just like SA_DISPELL, AB_CLEARANCE, RL_BANISHING_BUSTER that has the
effect to remove buffs or debuffs.

---- Removed comments from source ----
- Mado is immune to increase agi, wind walk, cart boost, etc (others above) [Ind]
- Cart Boost cannot be affected by Slow grace. Assumed if player got Slow Grace first, Cart Boost is failed since Cart Boost doesn't cancel Slow Grace effect
  http://irowiki.org/wiki/Cart_Boost_%28Genetic%29 (view date: 2014-01-26)
  http://irowiki.org/wiki/Cart_Boost (view date: 2014-01-26)
- kRO Update 2014-02-12: Cannot be stacked with Platinum Alter and Madness Canceler (and otherwise?) [Cydh]
- SC_BERSERK, SC_SATURDAYNIGHTFEVER, and SC__BLOODYLUST are all like berserk, do not everlap each other.
- SC_STONE, SC_FREEZE, SC_DEEPSLEEP, SC_SLEEP, SC_STUN, SC_FREEZING, and SC_CRYSTALIZE cannot override other opt1 status changes. [Skotlex]
  TODO: SC that has OPT1: SC_STONE, SC_FREEZE, SC_STUN, SC_SLEEP, SC_BURNING, SC_WHITEIMPRISON, SC_CRYSTALIZE
- Immune to Frozen and Freezing status if under Warmer status. [Jobbie]
- SC_ONEHAND removes the Aspd potion effect, as reported by Vicious. [Skotlex]
- SC_ALL_RIDING. Already mounted, just dismount.
- SC_GN_CARTBOOST andSC_CARTBOOST cancel Decrease Agi, but take no further effect [Skotlex]
//===== rAthena Documentation ================================
//= Status Change Documentation
//===== By: ==================================================
//= rAthena Dev Team
//===== Last Updated: ========================================
//= 20171207
//===== Description: =========================================
//= List of all Status Changes and theirs val1, val2, val3, and
//= val4 usage in source. Providing easier guide to use
//= sc_start, sc_start2, and sc_start4 in scripting.
//= NOTE:
//= - If sc_start/2/4 values based on val1~val4 information,
//=   it's a wise decision to use flag SCSTART_LOADED(4). But,
//=   some SCs with iteration check maybe will fail to give
//=   iteration check if flag SCSTART_LOADED is given.
//===== Format: =========================================
//= <SC_Name>	(<Default_EFST>)
//= 	desc: <any description or info related this status>
//= 	val1: <usage for>
//= 	val2: <usage for>
//= 	val3: <usage for>
//= 	val4: <usage for>
//============================================================

SC_STONE	()
	desc: DEF -50%; if HP>25% lose 1% HP/5 sec; MDEF +25%; change element to Earth Lv 1; ignore Steal & Lex Aeterna; can't move/attack/pick item/use item/use skill/sit/logout
	val1:
	val2: Caster's object ID
	val3: Incubation time
	val4: Remaining tick

SC_FREEZE	()
	desc: DEF -50%; FLEE = 0; MDEF +25%; ignore Steal, Lex Aeterna, Storm Gust, Falling Ice Pillar; change element to Water Lv 1; can't move/attack/pick item/use item/sit/logout
	val1:

SC_STUN	()
	desc: FLEE = 0; can't move/attack/pick item/use item/use skill/sit/logout
	val1:

SC_SLEEP	()
	desc: FLEE = 0; enemy CRIT x2; can't move/attack/pick item/use item/use skill/sit/logout
	val1:

SC_POISON	()
	desc: DEF -25%; if HP>25% lose 1.5% + 2 HP/sec; SP Regeneration is disabled
	val1: Skill Level
	val2: Caster's object ID
	val3:
	val4: Remaining tick

SC_CURSE	()
	desc: ATK-25%; LUK = 0; Movement speed -300
	val1:

SC_SILENCE	()
	desc: Can't use active skills
	val1:

SC_CONFUSION	()
	desc: Move randomly; Set DEF to (STR+(INT*50))
	val1:

SC_BLIND	()
	desc: HIT -25%; FLEE -25%; Black out the outter part of the screen
	val1:

SC_BLEEDING	(EFST_BLOODING)
	desc: HP Regeneration is disabled; SP Regeneration is disabled; Lose HP overtime
	val1: Skill Level
	val2: Caster's object ID (for mob_log_damage)
	val3:
	val4: Remaining tick

SC_DPOISON	()
	desc: DEF -25%; if HP>25% lose 10/15% HP/sec
	val1: Skill Level
	val2: Caster's object ID (for mob_log_damage)
	val3:
	val4: Remaining tick

SC_PROVOKE	(EFST_PROVOKE)
	desc: Decrease DEF by (5+(5*Skill Lv))%; Increase ATK by (2+(3*Skill lv))%
	val1:

SC_ENDURE	(EFST_ENDURE)
	desc: Increase MDEF by (Skill Lv); Doesn't get flinched when attacked
	val1:

SC_TWOHANDQUICKEN	(EFST_TWOHANDQUICKEN)
	desc: ASPD +30%
	val1:

SC_CONCENTRATE	(EFST_CONCENTRATION)
	desc: Increase AGI by (2+Skill Lv)%; Increase DEX by (2+Skill Lv)%; Reveal hidden enemies in 3x3 area around caster
	val1:

SC_HIDING	(EFST_HIDING)
	desc: Set OPTION_HIDE
	val1:

SC_CLOAKING	(EFST_CLOAKING)
	desc: Set OPTION_CLOAK
	val1:

SC_ENCPOISON	(EFST_ENCHANTPOISON)
	desc: Change weapon element to ELE_POISON; Poisoning chance is (2.5+0.5%)
	val1:

SC_POISONREACT	(EFST_POISONREACT)
	desc: Increase ATK by (100+30*Skill Lv))%; Counter physical attack with Envenoms skill
	val1:

SC_QUAGMIRE	(EFST_QUAGMIRE)
	desc: Removes Increase AGI, Twhohand Quicken, Wind Walk, Adrenaline Rush, Attention Concentrate, Cart Boost, True Sight, Magnetic Field & Onehand Quicken skill effect; Movement Speed -50; Decrease AGI & DEX by (10*Skill Lv) but can't below 75% for players and 50% for mobs
	val1:

SC_ANGELUS	(EFST_ANGELUS)
	desc: Increase DEF by (5*Skill Lv)%
	val1:

SC_BLESSING	(EFST_BLESSING)
	desc: Increase STR, DEX & INT by (Skill Lv); Removes Stone and Curse status. If used on mobs will reduce their DEX and INT by 50%
	val1:

SC_SIGNUMCRUCIS	(EFST_CRUCIS)
	desc: Decrease DEF of Undead and Demon mobs by (10+(4*Skill Lv))% on screen
	val1:

SC_INCREASEAGI	(EFST_INC_AGI)
	desc: Increase AGI and walkspeed, AL_INCAGI effect
	val1: (hardcoded)

SC_DECREASEAGI	(EFST_DEC_AGI)
	desc: Decrease AGI and walkspeed, AL_DECAGI effect
	val1: (hardcoded)

SC_SLOWPOISON	(EFST_SLOWPOISON)
	desc: Stop the HP reduction of SC_POISON
	val1:

SC_IMPOSITIO	(EFST_IMPOSITIO)
	desc: Increase ATK by (5*Skill Lv)
	val1:

SC_SUFFRAGIUM	(EFST_SUFFRAGIUM)
	desc: Cast time decreased by (15*Skill Lv)%
	val1:

SC_ASPERSIO	(EFST_ASPERSIO)
	desc: Change weapon element to ELE_HOLY
	val1:

SC_BENEDICTIO	(EFST_BENEDICTIO)
	desc: Change armor element to ELE_HOLY
	val1:

SC_KYRIE	(EFST_KYRIE)
	desc: Remove SC_ASSUMPTIO skill effect; Block damage with a total of (MaxHP*(Skill Lv*2+10)/100) or ((Skill Lv/2)+5) times
	val1:

SC_MAGNIFICAT	(EFST_MAGNIFICAT)
	desc: SP Regeneration speed x2
	val1:

SC_GLORIA	(EFST_GLORIA)
	desc: LUK +30
	val1:

SC_AETERNA	(EFST_LEXAETERNA)
	desc: Damaged received x2
	val1:

SC_ADRENALINE	(EFST_ADRENALINE)
	desc: ASPD of Axe & Mace weapons x2
	val1:

SC_WEAPONPERFECTION	(EFST_WEAPONPERFECT)
	desc: Ignore damage reduction to any monster size
	val1:

SC_OVERTHRUST	(EFST_OVERTHRUST)
	desc: Increase ATK by (5*Skill Lv)%; Add a 0.1% of breaking the equipped weapon [except Axes, Maces & Unbreakable weapons]
	val1:

SC_MAXIMIZEPOWER	(EFST_MAXIMIZE)
	desc: SP Regeneration is disabled; Damage dealt is always the max damage
	val1:

SC_TRICKDEAD	(EFST_TRICKDEAD)
	desc: HP & SP Regeneration is disabled; Remove SC_DANCING
	val1:

SC_LOUD	(EFST_SHOUT)
	desc: STR +4
	val1:

SC_ENERGYCOAT	(EFST_ENERGYCOAT)
	desc: Reduce damage received according to current MaxSP %
	val1:

SC_BROKENARMOR	(EFST_BROKENARMOR)
	desc: Shows EFST_BROKENARMOR status icon if the armor is broken
	val1:

SC_BROKENWEAPON	(EFST_BROKENWEAPON)
	desc: Shows EFST_BROKENWEAPON status icon if the armor is broken
	val1:

SC_HALLUCINATION	(EFST_ILLUSION)
	desc: The screen goes wavy and you see crazy numbers for all damage that is processed around you, but they are all fake. Even other players see those numbers at you.
	val1:

SC_WEIGHT50	(EFST_WEIGHTOVER50)
	desc: Shows EFST_WEIGHTOVER50 status icon if Weight >= 50%
	val1:

SC_WEIGHT90	(EFST_WEIGHTOVER90)
	desc: Shows EFST_WEIGHTOVER90 status icon if Weight >= 90%
	val1:

SC_ASPDPOTION0	(EFST_ATTHASTE_POTION1)
	desc: Increase ASPD, won't be stacked with SC_ASPDPOTION1, SC_ASPDPOTION2, SC_ASPDPOTION3
	val1: +ASPD (Renewal)
	val2: +% ASPD (Pre-Renewal)

SC_ASPDPOTION1	(EFST_ATTHASTE_POTION2)
	desc: Increase ASPD, won't be stacked with SC_ASPDPOTION0, SC_ASPDPOTION2, SC_ASPDPOTION3
	val1: +ASPD (Renewal)
	val2: +% ASPD (Pre-Renewal)

SC_ASPDPOTION2	(EFST_ATTHASTE_POTION3)
	desc: Increase ASPD, won't be stacked with SC_ASPDPOTION0, SC_ASPDPOTION1, SC_ASPDPOTION3
	val1: +ASPD (Renewal)
	val2: +% ASPD (Pre-Renewal)

SC_ASPDPOTION3	(EFST_ATTHASTE_INFINITY)
	desc: Increase ASPD, won't be stacked with SC_ASPDPOTION0, SC_ASPDPOTION1, SC_ASPDPOTION2
	val1: + ASPD (Renewal)
	val2: +% ASPD (Pre-Renewal)

SC_SPEEDUP0	(EFST_MOVHASTE_HORSE)
	desc: Increase/change walkspeed rate. This effect won't be stacked with bonus bSpeedRate
	val1: +% Walkspeed

SC_SPEEDUP1	(EFST_MOVHASTE_POTION)
	desc: Increase/change walkspeed rate. This effect won't be stacked with bonus bSpeedRate
	val1: +% Walkspeed

SC_ATKPOTION	(EFST_PLUSATTACKPOWER)
	desc: Increase Atk
	val1: +Atk

SC_MATKPOTION	(EFST_PLUSMAGICPOWER)
	desc: Increase MAtk
	val1: +MAtk

SC_WEDDING	()
	desc: Set Movement Speed to 100; Call clif_changelook; Set OPTION_WEDDING
	val1:

SC_SLOWDOWN	()
	desc: Reduce walkspeed rate
	val1: -% Walkspeed

SC_ANKLE	(EFST_ANKLESNARE)
	desc: Set DEF to (AGI*50); Can't move
	val1:

SC_KEEPING	()
	desc: Set DEF to 90
	val1:

SC_BARRIER	(EFST_BARRIER)
	desc: Set DEF to 100
	val1:

SC_STRIPWEAPON	(EFST_NOEQUIPWEAPON)
	desc: Unequip weapon; On mob ATK -25%
	val1:

SC_STRIPSHIELD	(EFST_NOEQUIPSHIELD)
	desc: Unequip shield; On mob DEF -15%
	val1:

SC_STRIPARMOR	(EFST_NOEQUIPARMOR)
	desc: Unequip armor; On mob VIT -40%
	val1:

SC_STRIPHELM	(EFST_NOEQUIPHELM)
	desc: Unequip helm; On mob INT -40%
	val1:

SC_CP_WEAPON	(EFST_PROTECTWEAPON)
	desc: Protects equipped weapon from damage and strip skill
	val1:

SC_CP_SHIELD	(EFST_PROTECTSHIELD)
	desc: Protects equipped shield from damage and strip skill
	val1:

SC_CP_ARMOR	(EFST_PROTECTARMOR)
	desc: Protects equipped armor from damage and strip skill
	val1:

SC_CP_HELM	(EFST_PROTECTHELM)
	desc: Protects equipped helm from damage and strip skill
	val1:

SC_AUTOGUARD	(EFST_AUTOGUARD)
	desc: Blocks short and long range physical attacks at a certain chance, and stops the caster for 0.3 seconds if it's activated
	val1:

SC_REFLECTSHIELD	(EFST_REFLECTSHIELD)
	desc: Reflects (10+(3*Skill Lv))% of short ranged physical attack back to the attacker
	val1:

SC_SPLASHER	(EFST_SPLASHER)
	desc: This skill will only work once the target's HP is 1/3 or less of its Max HP. When struck by this skill, the target will explode and damage other enemies in it's vicinity
	val1:

SC_PROVIDENCE	(EFST_PROVIDENCE)
	desc: Increase party members' resistance to RC_Demon and Ele_Holy monsters
	val1:

SC_DEFENDER	(EFST_DEFENDER)
	desc: Decrease (5+(15*Skill Lv))% damage taken from long range attack; Decrease (25+(5*Skill Lv)) ASPD
	val1:

SC_MAGICROD	(EFST_MAGICROD)
	desc: Gain (Skill Lv*20)% of SP consumed by the skill used from enemy; Damage received becomes 0; Drain 20% of enemy's Max SP
	val1:

SC_SPELLBREAKER	()
	desc: Gain SP used by enemy to cast the spell, and interrupt the magic cast. At lv 5, gain 1% from enemy max hp.
	val1:

SC_AUTOSPELL	(EFST_AUTOSPELL)
	desc: Auto cast several learned magic spells by using 2/3 of SP cost of the skill, but only when attacking with physical attacks.
	val1:

SC_SIGHTTRASHER	()
	desc: (not exist)
	val1:

SC_AUTOBERSERK	(EFST_AUTOBERSERK)
	desc: If HP<25%, set SC_PROVOKE lv 10 on self
	val1:

SC_SPEARQUICKEN	(EFST_SPEARQUICKEN)
	desc: When using spear, +ASPD (20+(1*Skill Lv))%, +CRIT (3+(10*Skill Lv)), +FLEE (2*Skill Lv)
	val1:

SC_AUTOCOUNTER	(EFST_AUTOCOUNTER)
	desc: Hitrate +20%; If attacked by close range, automatically retaliate with crit*2
	val1:

SC_SIGHT	()
	desc: Reveal hidden enemy on 3*3 range; Set OPTION_SIGHT
	val1:

SC_SAFETYWALL	()
	desc: Block short ranged attack; Set OPTION_RUWACH
	val1:

SC_RUWACH	()
	desc: Reveal hidden target and deal little damages if enemy is under SC_HIDING/SC_CLOAKING/SC_CAMOUFLAGE/SC_CLOAKINGEXCEED; Set OPTION_RUWACH
	val1:

SC_EXTREMITYFIST	(EFST_EXTREMITYFIST)
	desc: Stop SP Regeneration by setting RGN_SP
	val1:

SC_EXPLOSIONSPIRITS	(EFST_EXPLOSIONSPIRITS)
	desc: Stop SP Regeneration by setting RGN_SP; +Crit
	val1:

SC_COMBO	()
	desc:
	val1:

SC_BLADESTOP_WAIT	()
	desc:
	val1:

SC_BLADESTOP	(EFST_BLADESTOP)
	desc: Stops player and target; Set OPT3_BLADESTOP
	val1:

SC_FIREWEAPON	(EFST_PROPERTYFIRE)
	desc: Change weapon element to Fire element
	val1:

SC_WATERWEAPON	(EFST_PROPERTYWATER)
	desc: Change weapon element to Water element
	val1:

SC_WINDWEAPON	(EFST_PROPERTYWIND)
	desc: Change weapon element to Wind element
	val1:

SC_EARTHWEAPON	(EFST_PROPERTYGROUND)
	desc: Change weapon element to Earth element
	val1:

SC_VOLCANO	(EFST_GROUNDMAGIC)
	desc: +watk of ELE_FIRE user
	val1:

SC_DELUGE	(EFST_GROUNDMAGIC)
	desc: +Max HP of ELE_WATER user
	val1:

SC_VIOLENTGALE	(EFST_GROUNDMAGIC)
	desc: +FLEE of ELE_WIND user
	val1:

SC_WATK_ELEMENT	()
	desc: Adds a percent of damage as an element
	val1:

SC_ARMOR	()
	desc: Reduce damage received by 80 from long ranged weapon/misc attacks
	val1:

SC_ARMOR_ELEMENT	()
	desc: Adjust element resistance by percentage
	val1: Water resistance
	val2: Earth resistance
	val3: Fire resistance
	val4: Wind resistance

SC_NOCHAT	()
	desc: Can't chat, pick item, drop item
	val1:

SC_BABY	(EFST_PROTECTEXP)
	desc:
	val1:

SC_AURABLADE	(EFST_AURABLADE)
	desc: Set OPT3_AURABLADE; Add damage by (20*Skill Lv) which ignore caster's accuracy rate/target's DEF
	val1:

SC_PARRYING	(EFST_PARRYING)
	desc: Block using a 2H-Sword with chance (20+(3*Skill Lv))%
	val1:

SC_CONCENTRATION	(EFST_LKCONCENTRATION)
	desc: Lv 1 Endurace effect; +WATK; +HIT; -DEF
	val1:
	val2: 5*val1;		// Batk/Watk Increase
	val3: 10*val1;	// Hit Increase
	val4: 5*val1;		// Def reduction

SC_TENSIONRELAX	(EFST_TENSIONRELAX)
	desc: Increase HP regeneration rate while sitting
	val1:
	val2: 12;		// SP cost
	val3: tick/val4;
	val4: 10000;	// Decrease at 10secs intervals.

SC_BERSERK	(EFST_BERSERK)
	desc: Stop HP+SP Regen; Can't use skill; Can't chat; -FLEE; +Max HP; +Movement Speed; +ATK; Set OPT3_BERSERK; -5%HP per 10 second; Set DEF+MDEF to 0
	val1:
	val2: HP Penalty (5% of Max HP)
	val3: Skill duration
	val4: Interval of HP Penalty

SC_FURY	()
	desc:
	val1:

SC_GOSPEL	(EFST_GOSPEL)
	desc: Can't move; Gives a random status to party member and also enemy.
	val1:

SC_ASSUMPTIO	(RE: EFST_ASSUMPTIO2. Pre-RE: EFST_ASSUMPTIO)
	desc: HP_ASSUMPTIO's effect
	val1: Level // * 2 Bonus heal % (in RENEWAL)

SC_BASILICA	()
	desc: Can't move; Can't use skill except the Basilica caster to cancel the basilica itself; Clear the skill area; Knockback enemy except Boss
	val1:

SC_GUILDAURA	()
	desc:
	val1:

SC_MAGICPOWER	(EFST_MAGICPOWER)
	desc: +MATK by (Skill Lv*5)% for the next magic skill that is cast
	val1:

SC_EDP	(EFST_EDP)
	desc: +WATK by (100+(Skill Lv*80))
	val1: Skill Lv
	val2: Chance to Poison enemy (val1+2)%
	val3: Damage increased by (50*(val1+1))

SC_TRUESIGHT	(EFST_TRUESIGHT)
	desc: All stat +5; Damage +(2*Skill Lv)%; Crit +(Skill Lv); Hit +(3*Skill Lv)%
	val1: Skill Lv
	val2: Crit
	val3: Hit

SC_WINDWALK	(EFST_WINDWALK)
	desc: +Flee; +Movement speed
	val1: Skill Lv
	val2: Flee

SC_MELTDOWN	(EFST_MELTDOWN)
	desc: Breaks target's weapon and armor at a certain chance
	val1: Skill Lv
	val2: Chance to break weapon (100*Skill Lv)
	val3: Change to break armor (70*Skill Lv)

SC_CARTBOOST	(EFST_CARTBOOST)
	desc:
	val1:

SC_CHASEWALK	(EFST_CHASEWALK)
	desc:
	val1:

SC_REJECTSWORD	(EFST_SWORDREJECT)
	desc:
	val1:

SC_MARIONETTE	(EFST_MARIONETTE_MASTER)
	desc:
	val1:

SC_MARIONETTE2	(EFST_MARIONETTE)
	desc:
	val1:

SC_CHANGEUNDEAD	()
	desc:
	val1:

SC_JOINTBEAT	()
	desc:
	val1:

SC_MINDBREAKER	(EFST_MINDBREAKER)
	desc:
	val1:

SC_MEMORIZE	(EFST_MEMORIZE)
	desc:
	val1:

SC_FOGWALL	(EFST_FOGWALL)
	desc:
	val1:

SC_SPIDERWEB	(EFST_SPIDERWEB)
	desc:
	val1:

SC_DEVOTION	(EFST_DEVOTION)
	desc:
	val1:

SC_SACRIFICE	()
	desc:
	val1:

SC_STEELBODY	()
	desc:
	val1:

SC_ORCISH	()
	desc:
	val1:

SC_READYSTORM	()
	desc:
	val1:

SC_READYDOWN	()
	desc:
	val1:

SC_READYTURN	()
	desc:
	val1:

SC_READYCOUNTER	()
	desc:
	val1:

SC_DODGE	()
	desc:
	val1:

SC_RUN	()
	desc:
	val1:

SC_SHADOWWEAPON	()
	desc:
	val1:

SC_ADRENALINE2	()
	desc:
	val1:

SC_GHOSTWEAPON	()
	desc:
	val1:

SC_KAIZEL	()
	desc:
	val1:

SC_KAAHI	()
	desc:
	val1:

SC_KAUPE	()
	desc:
	val1:

SC_ONEHAND	()
	desc:
	val1:

SC_PRESERVE	()
	desc:
	val1:

SC_BATTLEORDERS	()
	desc:
	val1:

SC_REGENERATION	()
	desc:
	val1:

SC_DOUBLECAST	()
	desc:
	val1:

SC_GRAVITATION	()
	desc:
	val1:

SC_MAXOVERTHRUST	()
	desc:
	val1:

SC_LONGING	()
	desc:
	val1:

SC_HERMODE	()
	desc:
	val1:

SC_SHRINK	()
	desc:
	val1:

SC_SIGHTBLASTER	()
	desc:
	val1:

SC_WINKCHARM	()
	desc:
	val1:

SC_CLOSECONFINE	(EFST_RG_CCONFINE_M)
	desc: Flee bonus and counter for confined enemies
	val1: Skill level
	val2: Confined enemy count
	val3: +50 Flee

SC_CLOSECONFINE2	(EFST_RG_CCONFINE_S)
	desc: Confines target in place
	val1: Skill level
	val2: MapID of caster

SC_DANCING	()
	desc:
	val1:

SC_ELEMENTALCHANGE	(EFST_ARMOR_PROPERTY)
	desc: Change armor element
	val1: Element level
	val2: Element (see doc/item_bonus.txt)

SC_RICHMANKIM	()
	desc:
	val1:

SC_ETERNALCHAOS	()
	desc:
	val1:

SC_DRUMBATTLE	()
	desc:
	val1:

SC_NIBELUNGEN	()
	desc:
	val1:

SC_ROKISWEIL	()
	desc:
	val1:

SC_INTOABYSS	()
	desc:
	val1:

SC_SIEGFRIED	(EFST_SIEGFRIED)
	desc: Status change for BD_SIEGFRIED
	val1: BD_SIEGFRIED Skill level
	val2: Increase val2% damage reduction from non-Nuetral elemental attack
	val3: Increase status resistance value by val3% of player's current resistance.

SC_WHISTLE	()
	desc:
	val1:

SC_ASSNCROS	()
	desc:
	val1:

SC_POEMBRAGI	()
	desc:
	val1:

SC_APPLEIDUN	()
	desc:
	val1:

SC_MODECHANGE	()
	desc:
	val1:

SC_HUMMING	()
	desc:
	val1:

SC_DONTFORGETME	()
	desc:
	val1:

SC_FORTUNE	()
	desc:
	val1:

SC_SERVICE4U	()
	desc:
	val1:

SC_STOP	()
	desc:
	val1:

SC_SPURT	()
	desc:
	val1:

SC_SPIRIT	()
	desc:
	val1:

SC_COMA	()
	desc: Vanish HP to 1 and SP to 0
	val1: Skill Level
	val2: If 1 means do not remove SP
	val3: Caster's object ID (for mob_log_damage)
	val4:

SC_INTRAVISION	()
	desc:
	val1:

SC_INCALLSTATUS	()
	desc: Increase all status
	val1: +AllStats

SC_INCSTR	()
	desc: Increase STR
	val1: + STR

SC_INCAGI	()
	desc: Increase AGI
	val1: + AGI

SC_INCVIT	()
	desc: Incrase VIT
	val1: + VIT

SC_INCINT	()
	desc: Increase INT
	val1: + INT

SC_INCDEX	()
	desc: Increase DEX
	val1: + DEX

SC_INCLUK	()
	desc: Increase LUK
	val1: + Luk

SC_INCHIT	()
	desc: Increase Hit
	val1: + Hit

SC_INCHITRATE	()
	desc: Incrase Hit
	val1: +% Hit

SC_INCFLEE	()
	desc: Increase Flee
	val1: + Flee

SC_INCFLEERATE	()
	desc: Incrase Flee
	val1: +% Flee

SC_INCMHPRATE	()
	desc: Increase MaxHP
	val1: +% MaxHP

SC_INCMSPRATE	()
	desc: Incrase Max SP
	val1: +% MaxSP

SC_INCATKRATE	()
	desc: Increase Base Attack
	val1: +% Atk

SC_INCMATKRATE	()
	desc: Increase MATK
	val1: +% Matk

SC_INCDEFRATE	()
	desc: Increase Defense
	val1: +% Def

SC_STRFOOD	(EFST_FOOD_STR)
	desc: Increase STR (cannot be stacked with SC_FOOD_STR_CASH, ignored if value is lower)
	val1: +STR

SC_AGIFOOD	(EFST_FOOD_AGI)
	desc: Increase AGI (cannot be stacked with SC_FOOD_AGI_CASH, ignored if value is lower)
	val1: +AGI

SC_VITFOOD	(EFST_FOOD_VIT)
	desc: Increase VIT (cannot be stacked with SC_FOOD_VIT_CASH, ignored if value is lower)
	val1: +VIT

SC_INTFOOD	(EFST_FOOD_INT)
	desc: Increase INT (cannot be stacked with SC_FOOD_INT_CASH, ignored if value is lower)
	val1: +INT

SC_DEXFOOD	(EFST_FOOD_DEX)
	desc: Increase DEX (cannot be stacked with SC_FOOD_DEX_CASH, ignored if value is lower)
	val1: +DEX

SC_LUKFOOD	(EFST_FOOD_LUK)
	desc: Increase LUK (cannot be stacked with SC_FOOD_LUK_CASH, ignored if value is lower)
	val1: +LUK

SC_HITFOOD	(EFST_FOOD_BASICHIT)
	desc: Increase HIT (food-type effect)
	val1: +Hit

SC_FLEEFOOD	(EFST_FOOD_BASICAVOIDANCE)
	desc: Increase FLEE (food-type effect)
	val1: +Flee

SC_BATKFOOD	()
	desc: Increase Base Attack (food-type effect)
	val1: +BaseAttack

SC_WATKFOOD	()
	desc: Increase Weapon Attack (food-type effect)
	val1: +WeaponAttack

SC_MATKFOOD	()
	desc: Increase Magic Attack (food-type effect)
	val1: +MagicAttack

SC_SCRESIST	()
	desc: Status resistance from Gospel skill
	val1: Increase status resistance value by n% of player's current resistance.

SC_XMAS	()
	desc:
	val1:

SC_WARM	()
	desc:
	val1:

SC_SUN_COMFORT	()
	desc:
	val1:

SC_MOON_COMFORT	()
	desc:
	val1:

SC_STAR_COMFORT	()
	desc:
	val1:

SC_FUSION	()
	desc:
	val1:

SC_SKILLRATE_UP	()
	desc:
	val1:

SC_SKE	()
	desc:
	val1:

SC_KAITE	()
	desc:
	val1:

SC_SWOO	()
	desc:
	val1:

SC_SKA	()
	desc:
	val1:

SC_EARTHSCROLL	()
	desc:
	val1:

SC_MIRACLE	()
	desc:
	val1:

SC_MADNESSCANCEL	(EFST_GS_MADNESSCANCEL)
	desc: Increases some statuses (Base ATK, ASPD)
	val1:

SC_ADJUSTMENT	(EFST_GS_ADJUSTMENT)
	desc: Increases some statuses (Hit, Flee)
	val1:

SC_INCREASING	(EFST_GS_ACCURACY)
	desc: Increase some statuses (Hit, Dex, Agi), GS_INCREASING effect
	val1:

SC_MAGICALBULLET	(EFST_GS_MAGICAL_BULLET)
	desc: Increases damage based on source's MATK and is reduced by target's MDEF
	val1:

SC_GATLINGFEVER	(EFST_GS_GATLINGFEVER)
	desc: Increases some statuses (Base ATK, Flee, Movement Speed, ASPD)
	val1: SkillLv
	val2: ASPD increase (20 * val1)
	val3: Base ATK (20 + 10 * val1) [pre-renewal]
	val4: Flee decrease (5 * val1)

SC_TATAMIGAESHI	()
	desc:
	val1:

SC_UTSUSEMI	()
	desc:
	val1:

SC_BUNSINJYUTSU	()
	desc:
	val1:

SC_KAENSIN	()
	desc:
	val1:

SC_SUITON	()
	desc:
	val1:

SC_NEN	()
	desc:
	val1:

SC_KNOWLEDGE	()
	desc:
	val1:

SC_SMA	()
	desc:
	val1:

SC_FLING	()
	desc:
	val1:

SC_AVOID	()
	desc:
	val1:

SC_CHANGE	()
	desc:
	val1:

SC_BLOODLUST	()
	desc:
	val1:

SC_FLEET	()
	desc:
	val1:

SC_SPEED	()
	desc:
	val1:

SC_DEFENCE	()
	desc: Increase Defense, HAMI_DEFENCE effect
	val1: (none)
	val2: + Def(Pre-renewal) or VIT (Renewal)

SC_INCASPDRATE	()
	desc: Increase ASPD
	val1: +% ASPD

SC_INCFLEE2	(EFST_PLUSAVOIDVALUE)
	desc: Increase perfect flee
	val1: + Flee2

SC_JAILED	()
	desc:
	val1:

SC_ENCHANTARMS	(EFST_WEAPONPROPERTY)
	desc: Changes the element of a target's weapon.
	val1: Element value from skill_db

SC_MAGICALATTACK	()
	desc:
	val1:

SC_ARMORCHANGE	()
	desc:
	val1:

SC_CRITICALWOUND	()
	desc:
	val1:

SC_MAGICMIRROR	()
	desc:
	val1:

SC_SLOWCAST	()
	desc:
	val1:

SC_SUMMER	()
	desc:
	val1:

SC_EXPBOOST	(EFST_CASH_PLUSEXP)
	desc: Increase EXP rate
	val1: +% EXP

SC_ITEMBOOST	(EFST_CASH_RECEIVEITEM)
	desc: Increase Drop rate
	val1: +% Drop

SC_BOSSMAPINFO	(EFST_CASH_BOSS_ALARM)
	desc: Used to display Boss location on minimap
	val1: Boss game ID
	val2: Used to keep timer message from spamming chat window
	val3:
	val4: Remaining tick

SC_LIFEINSURANCE	(EFST_CASH_DEATHPENALTY)
	desc: Remove death pleanlties
	val1:

SC_INCCRI	(EFST_FOOD_CRITICALSUCCESSVALUE)
	desc: Increase critical value
	val1: + Critical (100% = 1000)

SC_INCDEF	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_INCBASEATK	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_FASTCAST	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_MDEF_RATE	(EFST_PROTECT_MDEF)
	desc: Increase MDef by %
	val1: +% Mdef

SC_HPREGEN	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_INCHEALRATE	(EFST_HEALPLUS)
	desc: Increase Heal power
	val1: +% Heal

SC_PNEUMA	()
	desc:
	val1:

SC_AUTOTRADE	()
	desc:
	val1:

SC_KSPROTECTED	()
	desc:
	val1:

SC_ARMOR_RESIST	()
	desc: Adjust element resistance by percentage
	val1: Water resistance
	val2: Earth resistance
	val3: Fire resistance
	val4: Wind resistance

SC_SPCOST_RATE	(EFST_ATKER_BLOOD)
	desc: Reduce SP cost
	val1: +% Rate

SC_COMMONSC_RESIST	(EFST_TARGET_BLOOD)
	desc: Increase resistance of status changes, only againts SC_STONE, SC_FREEZE, SC_STUN, SC_SLEEP, SC_POISON, SC_CURSE, SC_SILENCE, SC_CONFUSION, SC_BLIND, SC_BLEEDING, and SC_DPOISON
	val1: +% Resistance

SC_SEVENWIND	()
	desc:
	val1:

SC_DEF_RATE	(EFST_PROTECT_DEF)
	desc: Increase Def by %
	val1: +% Def

SC_SPREGEN	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_WALKSPEED	()
	desc:
	val1:

SC_MERC_FLEEUP	()
	desc:
	val1:

SC_MERC_ATKUP	()
	desc:
	val1:

SC_MERC_HPUP	()
	desc:
	val1:

SC_MERC_SPUP	()
	desc:
	val1:

SC_MERC_HITUP	()
	desc:
	val1:

SC_MERC_QUICKEN	()
	desc:
	val1:

SC_REBIRTH	()
	desc:
	val1:

SC_SKILLCASTRATE	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_DEFRATIOATK	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_HPDRAIN	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_SKILLATKBONUS	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_ITEMSCRIPT	()
	desc: Timer script from other item script
	val1: Item ID
	val2: Status Icon

SC_S_LIFEPOTION	(EFST_S_LIFEPOTION)
	desc: Increase HP each interval
	val1: if < 0 will be percentage. If > 0 is fixed HP heal value
	val2: Interval per seconds

SC_L_LIFEPOTION	(EFST_L_LIFEPOTION)
	desc: Increase HP each interval
	val1: if < 0 will be percentage. If > 0 is fixed HP heal value
	val2: Interval per seconds

SC_JEXPBOOST	()
	desc:
	val1:

SC_IGNOREDEF	()	/* NOT AVAILABLE YET */
	desc:
	val1:

SC_HELLPOWER	()
	desc:
	val1:

SC_INVINCIBLE	()
	desc:
	val1:

SC_INVINCIBLEOFF	()
	desc:
	val1:

SC_MANU_ATK	(EFST_MANU_ATK)
	desc: Increase Weapon Damage rate to Manuk monsters
	val1: +% Damage
	val2: (hardcoded to 1 mark as Manuk group bonus)

SC_MANU_DEF	(EFST_MANU_DEF)
	desc: Increase Defense rate against Manuk monsters
	val1: +% Defense
	val2: (hardcoded to 1 mark as Manuk group bonus)

SC_SPL_ATK	(EFST_SPL_ATK)
	desc: Increase Weapon Damage rate to Splendide Monster
	val1: +% Damage
	val2: (hardcoded to 1 mark as Splendide group bonus)

SC_SPL_DEF	(EFST_SPL_DEF)
	desc: Increase Defense rate against Splendide Monster
	val1: +% Defense
	val2: (hardcoded to 1 mark as Splendide group bonus)

SC_MANU_MATK	(EFST_MANU_MATK)
	desc: Increase Magic Damage rate to Manuk monsters
	val1: +% Magic damage
	val2: (hardcoded to 1 mark as Manuk group bonus)

SC_SPL_MATK	(EFST_SPL_MATK)
	desc: Increase Magic Damage to Splendide Monster
	val1: +% Damage
	val2: (hardcoded to 1 mark as Splendide group bonus)

SC_FOOD_STR_CASH	(EFST_FOOD_STR_CASH)
	desc: Increase STR (cannot be stacked with SC_STRFOOD, ignored if value is lower)
	val1: +STR

SC_FOOD_AGI_CASH	(EFST_FOOD_AGI_CASH)
	desc: Increase AGI (cannot be stacked with SC_AGIFOOD, ignored if value is lower)
	val1: +AGI

SC_FOOD_VIT_CASH	(EFST_FOOD_VIT_CASH)
	desc: Increase VIT (cannot be stacked with SC_VITFOOD, ignored if value is lower)
	val1: +VIT

SC_FOOD_DEX_CASH	(EFST_FOOD_DEX_CASH)
	desc: Increase DEX (cannot be stacked with SC_DEXFOOD, ignored if value is lower)
	val1: +DEX

SC_FOOD_INT_CASH	(EFST_FOOD_INT_CASH)
	desc: Increase INT (cannot be stacked with SC_INTFOOD, ignored if value is lower)
	val1: +INT

SC_FOOD_LUK_CASH	(EFST_FOOD_LUK_CASH)
	desc: Increase LUK (cannot be stacked with SC_LUKFOOD, ignored if value is lower)
	val1: +LUK

SC_FEAR	()
	desc: Cause SC_ANKLE for 2 seconds, Hit/Flee -20%, remove blind, immune to blind
	val1:

SC_BURNING	(EFST_BURNT)
	desc: MDEF -25%; Deals fixed (1000 + 3%*MaxHP) damage every 3 seconds; Damage can not be reduced
	val1: Skill Level
	val2: 1000
	val3: Caster's object ID (for mob_log_damage)
	val4: Remaining tick

SC_FREEZING	()
	desc:
	val1:

SC_ENCHANTBLADE	()
	desc:
	val1:

SC_DEATHBOUND	()
	desc:
	val1:

SC_MILLENNIUMSHIELD	()
	desc:
	val1:

SC_CRUSHSTRIKE	()
	desc:
	val1:

SC_REFRESH	()
	desc:
	val1:

SC_REUSE_REFRESH	()
	desc:
	val1:

SC_GIANTGROWTH	()
	desc:
	val1:

SC_STONEHARDSKIN	()
	desc:
	val1:

SC_VITALITYACTIVATION	()
	desc:
	val1:

SC_STORMBLAST	()
	desc:
	val1:

SC_FIGHTINGSPIRIT	()
	desc:
	val1:

SC_ABUNDANCE	()
	desc:
	val1:

SC_ADORAMUS	()
	desc:
	val1:

SC_EPICLESIS	()
	desc:
	val1:

SC_ORATIO	()
	desc:
	val1:

SC_LAUDAAGNUS	()
	desc:
	val1:

SC_LAUDARAMUS	()
	desc:
	val1:

SC_RENOVATIO	()
	desc:
	val1:

SC_EXPIATIO	()
	desc:
	val1:

SC_DUPLELIGHT	()
	desc:
	val1:

SC_SECRAMENT	()
	desc:
	val1:

SC_WHITEIMPRISON	()
	desc:
	val1:

SC_MARSHOFABYSS	()
	desc:
	val1:

SC_RECOGNIZEDSPELL	()
	desc:
	val1:

SC_STASIS	()
	desc:
	val1:

SC_SPHERE_1	()
	desc:
	val1:

SC_SPHERE_2	()
	desc:
	val1:

SC_SPHERE_3	()
	desc:
	val1:

SC_SPHERE_4	()
	desc:
	val1:

SC_SPHERE_5	()
	desc:
	val1:

SC_READING_SB	()
	desc:
	val1:

SC_FREEZE_SP	()
	desc:
	val1:

SC_FEARBREEZE	()
	desc:
	val1:

SC_ELECTRICSHOCKER	()
	desc:
	val1:

SC_WUGDASH	()
	desc:
	val1:

SC_BITE	()
	desc:
	val1:

SC_CAMOUFLAGE	()
	desc:
	val1:

SC_ACCELERATION	()
	desc:
	val1:

SC_HOVERING	()
	desc:
	val1:

SC_SHAPESHIFT	()
	desc:
	val1:

SC_INFRAREDSCAN	()
	desc:
	val1:

SC_ANALYZE	()
	desc:
	val1:

SC_MAGNETICFIELD	()
	desc:
	val1:

SC_NEUTRALBARRIER	()
	desc:
	val1:

SC_NEUTRALBARRIER_MASTER	()
	desc:
	val1:

SC_STEALTHFIELD	()
	desc:
	val1:

SC_STEALTHFIELD_MASTER	()
	desc:
	val1:

SC_OVERHEAT	()
	desc:
	val1:

SC_OVERHEAT_LIMITPOINT	()
	desc:
	val1:

SC_VENOMIMPRESS	()
	desc:
	val1:

SC_POISONINGWEAPON	(EFST_POISONINGWEAPON)
	desc: Coat the user's equipped weapon with a new poison temporarily, which grants a chance of leaving the target infected with the current poison while physically attacking.
	val1: GC_WEAPONRESEARCH Skill Level
	val2: Poison Type
	val3: Success Rate
	val4: Caster's object ID (for mob_log_damage)

SC_WEAPONBLOCKING	()
	desc:
	val1:

SC_CLOAKINGEXCEED	()
	desc:
	val1:

SC_HALLUCINATIONWALK	()
	desc:
	val1:

SC_HALLUCINATIONWALK_POSTDELAY	()
	desc:
	val1:

SC_ROLLINGCUTTER	()
	desc:
	val1:

SC_TOXIN	(EFST_TOXIN)
	desc: Inflict damage, which causes the affected entity to flinch every 10 seconds; This will interrupt the skill casting, even if protected against it
	val1: GC_WEAPONRESEARCH Skill Level
	val2: Caster's object ID
	val3:
	val4: Remaining tick

SC_PARALYSE	(EFST_PARALYSE)
	desc: Decrease both ASPD and Flee Rate by 10% and halve Movement Speed, which does not stack with Decrease AGI, Quagmire, Marsh Of Abyss or Freezing status
	val1: GC_WEAPONRESEARCH Skill Level
	val2:
	val3:
	val4: Tick

SC_VENOMBLEED	(EFST_VENOMBLEED)
	desc: Decrease Max HP by 15%
	val1: GC_WEAPONRESEARCH Skill Level
	val2:
	val3:
	val4: Tick

SC_MAGICMUSHROOM	(EFST_MAGICMUSHROOM)
	desc: Force the affected entity to use /heh emote, to randomly use skills and drain 3% of Max HP every 4 seconds
	val1: GC_WEAPONRESEARCH Skill Level
	val2: Caster's object ID
	val3:
	val4: Remaining tick

SC_DEATHHURT	(EFST_DEATHHURT)
	desc: Drop the healing effectiveness by 20%; This effect stacks with Critical Wounds
	val1: GC_WEAPONRESEARCH Skill Level
	val2:
	val3:
	val4: Tick

SC_PYREXIA	(EFST_PYREXIA)
	desc: Cause Blind and Hallucination statuses; If the affected entity takes damage while under the effects of this poison, it will remain in flinching motion, which will interrupt the skill casting
	val1: GC_WEAPONRESEARCH Skill Level
	val2:
	val3:
	val4: Remaining tick

SC_OBLIVIONCURSE	(EFST_OBLIVIONCURSE)
	desc: Force the affected entity to use /? emote, block SP Recovery and cause Oblivion status; There is a chance (100% - (Target INT * 0.8)%) of being inflicted, with a minimum of 5%
	val1: GC_WEAPONRESEARCH Skill Level
	val2:
	val3:
	val4: Tick

SC_LEECHESEND	(EFST_LEECHESEND)
	desc: Drain (Target VIT * (SkillLv - 3)) + (Target HP / 100) HP each second
	val1: GC_WEAPONRESEARCH Skill Level
	val2: Caster's object ID
	val3:
	val4: Remaining tick

SC_REFLECTDAMAGE	()
	desc:
	val1:

SC_FORCEOFVANGUARD	()
	desc:
	val1:

SC_SHIELDSPELL_DEF	()
	desc:
	val1:

SC_SHIELDSPELL_MDEF	()
	desc:
	val1:

SC_SHIELDSPELL_REF	()
	desc:
	val1:

SC_EXEEDBREAK	()
	desc:
	val1:

SC_PRESTIGE	()
	desc:
	val1:

SC_BANDING	()
	desc:
	val1:

SC_BANDING_DEFENCE	()
	desc:
	val1:

SC_EARTHDRIVE	()
	desc:
	val1:

SC_INSPIRATION	()
	desc:
	val1:

SC_SPELLFIST	()
	desc:
	val1:

SC_CRYSTALIZE	()
	desc:
	val1:

SC_STRIKING	(EFST_STRIKING)
	desc:
	val1: SO_STRIKING Skill Level
	val2: Increased ATK
	val3: SP Drain / Sec
	val4: Tick Left (in sec)

SC_WARMER	()
	desc:
	val1:

SC_VACUUM_EXTREME	()
	desc:
	val1:

SC_PROPERTYWALK	()
	desc:
	val1:

SC_SWINGDANCE	()
	desc:
	val1:

SC_SYMPHONYOFLOVER	()
	desc:
	val1:

SC_MOONLITSERENADE	(EFST_MOONLIT_SERENADE)
	desc:
	val1: WA_MOONLIT_SERENADE Skill Level
	val2: WM_LESSON Level
	val3: Increased MATK

SC_RUSHWINDMILL	(EFST_RUSH_WINDMILL)
	desc:
	val1: MI_RUSH_WINDMILL Skill Level
	val2: WM_LESSON Level
	val3: Increased ATK

SC_ECHOSONG	()
	desc:
	val1:

SC_HARMONIZE	()
	desc:
	val1:

SC_VOICEOFSIREN	()
	desc:
	val1:

SC_DEEPSLEEP	()
	desc:
	val1:

SC_SIRCLEOFNATURE	()
	desc:
	val1:

SC_GLOOMYDAY	()
	desc:
	val1:

SC_GLOOMYDAY_SK	()
	desc:
	val1:

SC_SONGOFMANA	()
	desc:
	val1:

SC_DANCEWITHWUG	()
	desc:
	val1:

SC_SATURDAYNIGHTFEVER	()
	desc:
	val1:

SC_LERADSDEW	()
	desc:
	val1:

SC_MELODYOFSINK	()
	desc:
	val1:

SC_BEYONDOFWARCRY	()
	desc:
	val1:

SC_UNLIMITEDHUMMINGVOICE	()
	desc:
	val1:

SC_SITDOWN_FORCE	()
	desc:
	val1:

SC_NETHERWORLD	()
	desc:
	val1:

SC_CRESCENTELBOW	()
	desc:
	val1:

SC_CURSEDCIRCLE_ATKER	()
	desc:
	val1:

SC_CURSEDCIRCLE_TARGET	()
	desc:
	val1:

SC_LIGHTNINGWALK	()
	desc:
	val1:

SC_RAISINGDRAGON	()
	desc:
	val1:

SC_GT_ENERGYGAIN	(EFST_GENTLETOUCH_ENERGYGAIN)
	desc:
	val1: SR_GENTLETOUCH_ENERGYGAIN Skill Level
	val2: Sphere Gain Chance

SC_GT_CHANGE	(EFST_GENTLETOUCH_CHANGE)
	desc: ATK increase: ATK [{(Caster DEX / 4) + (Caster STR / 2)} x Skill Level / 5]; ASPD increase: [(Target AGI x Skill Level) / 60] %; MDEF decrease: MDEF [(200 / Caster INT) x Skill Level]; Max HP decrease: [Skill Level x 4] %
	val1: SR_GENTLETOUCH_CHANGE Skill Level
	val2: Increased ATK
	val3: Increased ASPD Rate
	val4: Decreased MDEF

SC_GT_REVITALIZE	(EFST_GENTLETOUCH_REVITALIZE)
	desc: MaxHP: [(Skill Level * 2)]%; Natural HP recovery increase: [(Skill Level x 30) + 50] %; STAT DEF increase: [(Caster VIT / 4) x Skill Level] (The stat def is not shown in the status window and it is processed differently)
	val1: SR_GENTLETOUCH_REVITALIZE Skill Level
	val2: Max HP Rate bonus
	val3: HP Regen Rage Value
	val4: Increased DEF

SC_GN_CARTBOOST	()
	desc:
	val1:

SC_THORNSTRAP	()
	desc:
	val1:

SC_BLOODSUCKER	()
	desc:
	val1:

SC_SMOKEPOWDER	()
	desc:
	val1:

SC_TEARGAS	()
	desc:
	val1:

SC_MANDRAGORA	()
	desc:
	val1:

SC_STOMACHACHE	(EFST_STOMACHACHE)
	desc: Reduce all stats
	val1: -AllStats

SC_MYSTERIOUS_POWDER	(EFST_MYSTERIOUS_POWDER)
	desc: Reduce Max HP rate
	val1: ReduceValue (don't use - sign to reduce)

SC_MELON_BOMB	(EFST_MELON_BOMB)
	desc: Reduce ASPD and move speed
	val1: ReduceValue (don't use - sign to reduce)

SC_BANANA_BOMB	(EFST_BANANA_BOMB)
	desc: Reduce LUK rate
	val1: ReduceValue (don't use - sign to reduce)

SC_BANANA_BOMB_SITDOWN	(EFST_BANANA_BOMB_SITDOWN_POSTDELAY)
	desc: Force player to sit
	val1:

SC_SAVAGE_STEAK	(EFST_SAVAGE_STEAK)
	desc: Increase STR
	val1: +STR

SC_COCKTAIL_WARG_BLOOD	(EFST_COCKTAIL_WARG_BLOOD)
	desc: Increase INT
	val1: +INT

SC_MINOR_BBQ	(EFST_MINOR_BBQ)
	desc: Increase VIT
	val1: +VIT

SC_SIROMA_ICE_TEA	(EFST_SIROMA_ICE_TEA)
	desc: Increase DEX
	val1: +DEX

SC_DROCERA_HERB_STEAMED	(EFST_DROCERA_HERB_STEAMED)
	desc: Increase AGI
	val1: +AGI

SC_PUTTI_TAILS_NOODLES	(EFST_PUTTI_TAILS_NOODLES)
	desc: Increase LUK
	val1: +LUK

SC_BOOST500	(EFST_BOOST500)
	desc: Increase ASPD rate
	val1: +% Aspd

SC_FULL_SWING_K	(EFST_FULL_SWING_K)
	desc: Increase Base Atk
	val1: +BaseAtk

SC_MANA_PLUS	(EFST_MANA_PLUS)
	desc: Increase MAtk
	val1: +Matk

SC_MUSTLE_M	(EFST_MUSTLE_M)
	desc: Increase Max HP rate
	val1: +% MaxHP

SC_LIFE_FORCE_F	(EFST_LIFE_FORCE_F)
	desc: Increase Max SP rate
	val1: +% MaxSP

SC_EXTRACT_WHITE_POTION_Z	(EFST_EXTRACT_WHITE_POTION_Z)
	desc: Increase HP regen rate
	val1: +% HP regen

SC_VITATA_500	(EFST_VITATA_500)
	desc: Increase SP Regen rate & Max SP rate
	val1: +% SP regen
	val2: +% MaxSP

SC_EXTRACT_SALAMINE_JUICE	(EFST_EXTRACT_SALAMINE_JUICE)
	desc: Increase ASP rate
	val1: +% ASPD

SC__REPRODUCE	()
	desc:
	val1:

SC__AUTOSHADOWSPELL	()
	desc:
	val1:

SC__SHADOWFORM	()
	desc:
	val1:

SC__BODYPAINT	()
	desc:
	val1:

SC__INVISIBILITY	()
	desc:
	val1:

SC__DEADLYINFECT	()
	desc:
	val1:

SC__ENERVATION	()
	desc:
	val1:

SC__GROOMY	()
	desc:
	val1:

SC__IGNORANCE	()
	desc:
	val1:

SC__LAZINESS	()
	desc:
	val1:

SC__UNLUCKY	()
	desc:
	val1:

SC__WEAKNESS	()
	desc:
	val1:

SC__STRIPACCESSORY	()
	desc:
	val1:

SC__MANHOLE	()
	desc:
	val1:

SC__BLOODYLUST	()
	desc:
	val1:

SC_CIRCLE_OF_FIRE	()
	desc:
	val1:

SC_CIRCLE_OF_FIRE_OPTION	()
	desc:
	val1:

SC_FIRE_CLOAK	()
	desc:
	val1:

SC_FIRE_CLOAK_OPTION	()
	desc:
	val1:

SC_WATER_SCREEN	()
	desc:
	val1:

SC_WATER_SCREEN_OPTION	()
	desc:
	val1:

SC_WATER_DROP	()
	desc:
	val1:

SC_WATER_DROP_OPTION	()
	desc:
	val1:

SC_WATER_BARRIER	()
	desc:
	val1:

SC_WIND_STEP	()
	desc:
	val1:

SC_WIND_STEP_OPTION	()
	desc:
	val1:

SC_WIND_CURTAIN	()
	desc:
	val1:

SC_WIND_CURTAIN_OPTION	()
	desc:
	val1:

SC_ZEPHYR	()
	desc:
	val1:

SC_SOLID_SKIN	()
	desc:
	val1:

SC_SOLID_SKIN_OPTION	()
	desc:
	val1:

SC_STONE_SHIELD	()
	desc:
	val1:

SC_STONE_SHIELD_OPTION	()
	desc:
	val1:

SC_POWER_OF_GAIA	()
	desc:
	val1:

SC_PYROTECHNIC	()
	desc:
	val1:

SC_PYROTECHNIC_OPTION	()
	desc:
	val1:

SC_HEATER	()
	desc:
	val1:

SC_HEATER_OPTION	()
	desc:
	val1:

SC_TROPIC	()
	desc:
	val1:

SC_TROPIC_OPTION	()
	desc:
	val1:

SC_AQUAPLAY	()
	desc:
	val1:

SC_AQUAPLAY_OPTION	()
	desc:
	val1:

SC_COOLER	()
	desc:
	val1:

SC_COOLER_OPTION	()
	desc:
	val1:

SC_CHILLY_AIR	()
	desc:
	val1:

SC_CHILLY_AIR_OPTION	()
	desc:
	val1:

SC_GUST	()
	desc:
	val1:

SC_GUST_OPTION	()
	desc:
	val1:

SC_BLAST	()
	desc:
	val1:

SC_BLAST_OPTION	()
	desc:
	val1:

SC_WILD_STORM	()
	desc:
	val1:

SC_WILD_STORM_OPTION	()
	desc:
	val1:

SC_PETROLOGY	()
	desc:
	val1:

SC_PETROLOGY_OPTION	()
	desc:
	val1:

SC_CURSED_SOIL	()
	desc:
	val1:

SC_CURSED_SOIL_OPTION	()
	desc:
	val1:

SC_UPHEAVAL	()
	desc:
	val1:

SC_UPHEAVAL_OPTION	()
	desc:
	val1:

SC_TIDAL_WEAPON	()
	desc:
	val1:

SC_TIDAL_WEAPON_OPTION	()
	desc:
	val1:

SC_ROCK_CRUSHER	()
	desc:
	val1:

SC_ROCK_CRUSHER_ATK	()
	desc:
	val1:

SC_LEADERSHIP	()
	desc:
	val1:

SC_GLORYWOUNDS	()
	desc:
	val1:

SC_SOULCOLD	()
	desc:
	val1:

SC_HAWKEYES	()
	desc:
	val1:

SC_ODINS_POWER	()
	desc:
	val1:

SC_RAID	()
	desc:
	val1:

SC_FIRE_INSIGNIA	()
	desc:
	val1:

SC_WATER_INSIGNIA	()
	desc:
	val1:

SC_WIND_INSIGNIA	()
	desc:
	val1:

SC_EARTH_INSIGNIA	()
	desc:
	val1:

SC_PUSH_CART	()
	desc:
	val1:

SC_SPELLBOOK1	()
	desc:
	val1:

SC_SPELLBOOK2	()
	desc:
	val1:

SC_SPELLBOOK3	()
	desc:
	val1:

SC_SPELLBOOK4	()
	desc:
	val1:

SC_SPELLBOOK5	()
	desc:
	val1:

SC_SPELLBOOK6	()
	desc:
	val1:

SC_MAXSPELLBOOK	()
	desc:
	val1:

SC_INCMHP	()
	desc: Increase Max HP
	val1: + Max HP

SC_INCMSP	()
	desc: Incrase Max SP
	val1: + MaxSP

SC_PARTYFLEE	()
	desc:
	val1:

SC_MEIKYOUSISUI	()
	desc:
	val1:

SC_JYUMONJIKIRI	()
	desc:
	val1:

SC_KYOUGAKU	()
	desc:
	val1:

SC_IZAYOI	()
	desc:
	val1:

SC_ZENKAI	()
	desc:
	val1:

SC_KAGEHUMI	()
	desc:
	val1:

SC_KYOMU	()
	desc:
	val1:

SC_KAGEMUSYA	()
	desc:
	val1:

SC_ZANGETSU	()
	desc:
	val1:

SC_GENSOU	()
	desc:
	val1:

SC_AKAITSUKI	()
	desc:
	val1:

SC_STYLE_CHANGE	()
	desc: Eleanor's mode
	val1:

SC_TINDER_BREAKER	(EFST_TINDER_BREAKER_POSTDELAY)
	desc:
	val1:

SC_TINDER_BREAKER2	(EFST_TINDER_BREAKER)
	desc: Tinder Breaker after-effect, just like Close Confine
	val1:

SC_CBC	(EFST_CBC)
	desc: Drain HP & SP each iteration (default is each 1 sec)
	val1:
	val2:
	val3: %SP drain

SC_EQC	(EFST_EQC)
	desc:
	val1:
	val2: -% Def
	val3: -%MaxHP
	val4:

SC_GOLDENE_FERSE	(EFST_GOLDENE_FERSE)
	desc:
	val1:
	val2: +% Flee
	val3: +% ASPD
	val4: % Chance to convert attack as Holy element

SC_ANGRIFFS_MODUS	(EFST_ANGRIFFS_MODUS)
	desc: Drain 100 HP & 20 SP each iteration (default is each 1 sec)
	val1: Level. Usage for +MaxHP rate (5 * level)
	val2: +ATK
	val3: -Flee

SC_OVERED_BOOST	(EFST_OVERED_BOOST)
	desc: When status ended, reduce 50% HP for player and increase 50 the Homunculus's hunger
	val1:
	val2: Fixed Flee value
	val3: Fixed ASPD value
	val4: -% Def

SC_LIGHT_OF_REGENE	(EFST_LIGHT_OF_REGENE)
	desc:
	val1:
	val2: % of HP recovery on death

SC_ASH	(EFST_VOLCANIC_ASH)
	desc: Increase damage to Fire element enemy (ratio +150%), reduce Hit, Def, Atk & Flee.
	val1: -% Hit
	val2: -% Def
	val4: -Atk & Flee

SC_GRANITIC_ARMOR	(EFST_GRANITIC_ARMOR)
	desc: Reduce the inflicted damage, when status ended deals another damage to self
	val1:
	val2: -%Damage
	val3: Damage taken on status end

SC_MAGMA_FLOW	(EFST_MAGMA_FLOW)
	desc:
	val1:
	val2: Rate to cast Magma Flow (deals damage) to target while attacking

SC_PYROCLASTIC	(EFST_PYROCLASTIC)
	desc:
	val1:
	val2: +ATK
	val3: % Rate to cast Hammer Fall

SC_PARALYSIS	(EFST_NEEDLE_OF_PARALYZE)
	desc:
	val1:
	val2: -Def
	val3: +% CastTime

SC_PAIN_KILLER	(EFST_PAIN_KILLER)
	desc: Reduce damage for certain value, reduce ASPD rate, inflict Endure if has active SC_PARALYSIS
	val1:
	val2: -% ASPD
	val3: -Damage

SC_HANBOK	()
	desc: Visual effect. Hanbok costume!
	val1:

SC_DEFSET	()
	desc: Vellum Weapon bonus. Set Def value
	val1: Def fixed value

SC_MDEFSET	()
	desc: Vellum Weapon bonus. Set MDef value
	val1: MDef fixed value

SC_DARKCROW	(EFST_DARKCROW)
	desc: Increase short/melee damage rate
	val1:
	val2: +% Damage

SC_FULL_THROTTLE	(EFST_FULL_THROTTLE)
	desc: Increase walk speed, increase allstats, full HP once activated
	val1: Level, also used as Rebound level when this sc ended
	val2: -SP each iteration
	val3: +% Allstats

SC_REBOUND	(EFST_REBOUND)
	desc: Full Throttle  after-effect. Reduce walk speed
	val1:

SC_UNLIMIT	(EFST_UNLIMIT)
	desc: Increase attak rate & set Def/MDef to 1,
	val1:
	val2: +% Attack

SC_KINGS_GRACE	(EFST_KINGS_GRACE)
	desc: Add Max HP & heal each iteration (default 1 seconds)
	val1:
	val2: +HP heal

SC_TELEKINESIS_INTENSE	()
	desc: Increase SP cost & damage of Ghost skill, reduce casttime
	val1:
	val2: +% SP Cost
	val3: +Damage ratio
	val4: -CastTime

SC_OFFERTORIUM	(EFST_OFFERTORIUM)
	desc:
	val1:
	val2: +Heal Power
	val3: +SP Cost

SC_FRIGG_SONG	(EFST_FRIGG_SONG)
	desc: Add Max HP & heal each iteration (default 1 seconds)
	val1: Skill Level
	val2: +% MaxHP
	val3: +HP heal

SC_MONSTER_TRANSFORM	()
	desc: Monster Transformation. (DO NOT USE THIS DIRECTLY, use script 'transform')
	val1: Monster ID

SC_ANGEL_PROTECT	()
	desc:
	val1:

SC_ILLUSIONDOPING	(EFST_ILLUSIONDOPING)
	desc:
	val1:
	val2: -Hit

SC_FLASHCOMBO	()
	desc:
	val1:
	val2: +ATK (isn't shown in status window)

SC_MOONSTAR	(EFST_MOONSTAR)
	desc: Visual effect
	val1:

SC_SUPER_STAR	(EFST_SUPER_STAR)
	desc: Visual effect
	val1:

SC_HEAT_BARREL	(EFST_HEAT_BARREL)
	desc: (Rebellion) Reduce fixed cast time, add ASPD rate, and reduce FLEE
	val1: SkillLv
	val2: -Fixed Casttime (5 * val1)
	val3: +% ASPD (6 + val1 * 2)
	val4: -FLEE (25 + val1 * 5)

SC_P_ALTER	(EFST_P_ALTER)
	desc: Increase attack ratio and creates a barrier like Kyrie
	val1: SkillLv
	val2: +ATK ratio (10 * Coin Count)
	val3: Barrier HP (Max HP * (val1 * 5) / 100)

SC_E_CHAIN	(EFST_E_CHAIN)
	desc: (Rebellion) Has chance to trigger Chain Action for any weapon
	val1: SkillLv
	val2: Coins used for success rate. (5 * val)

SC_C_MARKER	(EFST_C_MARKER)
	desc: (Rebellion) Crimson Marker effect, also sends the target location to the caster
	val1: SkillLv
	val2:
	val3: -FLEE (10)

SC_ANTI_M_BLAST	(EFST_ANTI_M_BLAST)
	desc: (Rebellion) Anti-Material effect, reduce resistance of Neutral attack
	val1: SkillLv
	val2: Reduction ratio (10 * val1)

SC_B_TRAP	(EFST_B_TRAP)
	desc: (Rebellion) Bind Trap effect, waiting for Flicker to be used
	val1: SkillLv
	val2:
	val3: -Walk Speed (Unstackable penalty) (25 * val1)

SC_H_MINE	(EFST_H_MINE)
	desc: (Rebellion) Howling Mine effect, waiting for Flicker to be used
	val1:

SC_QD_SHOT_READY	(EFST_E_QD_SHOT_READY)
	desc: (Rebellion) Combo stance to cast Quick Draw Shot
	val1:

SC_MTF_ASPD	(EFST_MTF_ASPD)
	desc: Increase ASP and Hit
	val1: +ASPD
	val2: +Hit

SC_MTF_ASPD2	(EFST_MTF_ASPD2)
	desc: Increase ASP and Hit
	val1: +ASPD
	val2: +Hit

SC_MTF_RANGEATK	(EFST_MTF_RANGEATK)
	desc: Increase Long-ranged damage while attacking
	val1: +% Damage (not be shown in status window)

SC_MTF_RANGEATK2	(EFST_MTF_RANGEATK2)
	desc: Increase Long-ranged damage while attacking
	val1: +% Damage (not be shown in status window)

SC_MTF_MATK	(EFST_MTF_MATK)
	desc: Increase MATK damage while attacking
	val1: +% MATK

SC_MTF_MATK2	(EFST_MTF_MATK2)
	desc: Increase MATK damage while attacking
	val1: + MATK

SC_MTF_MLEATKED	(EFST_MTF_MLEATKED)
	desc: Has chance to cast Endure to self while attacked
	val1: Endure Level
	val2: Rate to cast
	val3: Neutral element resistance

SC_MTF_CRIDAMAGE	(EFST_MTF_CRIDAMAGE)
	desc: Bonus critical rate of monster transformation
	val1: +% Critical

SC_OKTOBERFEST	()
	desc: Costume
	val1:

SC_STRANGELIGHTS	(EFST_STRANGELIGHTS)
	desc:
	val1:

SC_DECORATION_OF_MUSIC	(EFST_DECORATION_OF_MUSIC)
	desc:
	val1:

SC_QUEST_BUFF1	(EFST_QUEST_BUFF1)
	desc:
	val1: +ATK & +MATK

SC_QUEST_BUFF2	(EFST_QUEST_BUFF2)
	desc:
	val1: +ATK & +MATK

SC_QUEST_BUFF3	(EFST_QUEST_BUFF3)
	desc:
	val1: +ATK & +MATK

SC_ALL_RIDING	(EFST_ALL_RIDING)
	desc:
	val1:

SC_TEARGAS_SOB	()
	desc: 2nd Teargas effect, do /sob expression each 3 seconds
	val1:

SC__FEINTBOMB	()
	desc:
	val1:
	val2: -1 SP each second

SC__CHAOS	()
	desc:
	val1:

SC_ELEMENTAL_SHIELD	()
	desc: Block magic attack
	val1:

SC_CHASEWALK2	(EFST_CHASEWALK2)
	desc: 2nd effect of Chasewalk
	val1: +STR

SC_SUHIDE	(EFST_SUHIDE)
	desc: Hide caster. Can be seen by insect, demon, and boss. Cannot move or pickup items.
	val1: Skill Lv

SC_SU_STOOP	(EFST_SU_STOOP)
	desc: Places a temporary buff on the user that decreases all damage taken by 90%.
	val1: Skill Lv

SC_SPRITEMABLE	(EFST_SPRITEMABLE)
	desc: Increase 1000 HP and 100 SP.
	val1:

SC_CATNIPPOWDER	(EFST_CATNIPPOWDER)
	desc: Reduces ATK and MATK by 50% to targets in a 3x3~7x7 area. HP and SP recovery rate increase.
	val1: Skill Lv
	val2: WATK% / MATK%
	val3: Movement speed reduction

SC_SV_ROOTTWIST	(EFST_SV_ROOTTWIST)
	desc: Prevents the target from moving and receives 100 Poison damage every second. Cannot be used on Boss monsters.
	val1: Skill Lv

SC_BITESCAR	(EFST_BITESCAR)
	desc: Drains a portion of the target's Max HP each second.
	val1: Skill Lv
	val2: Max HP% damage
	val4: Tick

SC_ARCLOUSEDASH	(EFST_ARCLOUSEDASH)
	desc: Increases Agi and movement speed.
	val1: AGI
	val2: Movement speed increase
	val4: Ranged ATK increase for Doram

SC_TUNAPARTY	(EFST_TUNAPARTY)
	desc: Protects from damage, the amount is based on Max HP.
	val1: Max HP% to absorb
	val2: Double the shield life with Spirit of Sea

SC_SHRIMP	(EFST_SHRIMP)
	desc: Gives all party members on screen +10% ATK and MATK.
	val1: BATK% / MATK%

SC_FRESHSHRIMP	(EFST_FRESHSHRIMP)
	desc: Recovers a small amount of HP. Each level reduces the time between each HP recovery tick.
	val1: Skill Lv
	val2: Heal amount
	val4: Tick

SC_HISS	(EFST_HISS)
	desc: Increases movement speed and perfect dodge of the user and his party.
	val1: Skill Lv
	val2: Perfect Dodge

SC_NYANGGRASS	(EFST_NYANGGRASS)
	desc: Reduces monster's DEF and MDEF by 50%. Reduces other player's equipment DEF and MDEF to 0.
	val1: Skill Lv

SC_GROOMING	(EFST_GROOMING)
	desc: FLEE + 100. Cures Poison, Frozen, Stun, Sleep, Bleeding, Silence, Crystallization, Deep Sleep, Fear, and Mandragora Howling.
	val1: Skill Lv
	val2: FLEE

SC_SHRIMPBLESSING	(EFST_PROTECTIONOFSHRIMP)
	desc: Increases caster's SP recovery by 150%.
	val1: Skill Lv

SC_CHATTERING	(EFST_CHATTERING)
	desc: Increases the player's ATK and MATK by 100. Increases the player's movespeed.
	val1: Skill Lv
	val2: ATK / MATK

SC_DORAM_WALKSPEED	()
	desc: Adjusts player's walk speed.
	val1: Movement speed adjustment

SC_DORAM_MATK	()
	desc: Statically increases MATK for Spirit of Land.
	val1: MATK

SC_DORAM_FLEE2	()
	desc: Statically increase FLEE2 for Spirit of Land.
	val1: FLEE2

SC_DORAM_SVSP	()
	desc: Casts Silvervine Stem Spear when receiving Magic or Ranged damage after using Catnip Meteor for Spirit of Land.
	val1: Value to know it's active

SC_GVG_GIANT	(EFST_GVG_GIANT)
	desc: Instantly consumes HP/SP, increases Physical/Magic damage on player enemies by n%.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed
	val3: Increases % Physical damage
	val4: Increases % Magical damage

SC_GVG_GOLEM	(EFST_GVG_GOLEM)
	desc: Instantly consumes HP/SP, decreases n% damage received from other adventurers.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed
	val3: Decreases % damage received of physical attack
	val4: Decreases % damage received of magical attack

SC_GVG_STUN	(EFST_GVG_STUN)
	desc: Instantly consumes HP/SP, immunizes you against Stun.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_GVG_STONE	(EFST_GVG_STONE)
	desc: Instantly consumes HP/SP, immunizes you against Petrification.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_GVG_FREEZ	(EFST_GVG_FREEZ)
	desc: Instantly consumes HP/SP, immunizes you against Frost.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_GVG_SLEEP	(EFST_GVG_SLEEP)
	desc: Instantly consumes HP/SP, immunizes you against Sleep.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_GVG_CURSE	(EFST_GVG_CURSE)
	desc: Instantly consumes HP/SP, immunizes you against Curse.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_GVG_SILENCE	(EFST_GVG_SILENCE)
	desc: Instantly consumes HP/SP, immunizes you against Silence.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_GVG_BLIND	(EFST_GVG_BLIND)
	desc: Instantly consumes HP/SP, immunizes you against Blind.
	val1: Amount of HP that are instantly consumed
	val2: Amount of SP that are instantly consumed

SC_LHZ_DUN_N1	(EFST_LHZ_DUN_N1)
	desc: Increases damage against Swordman, Thief and reduces damage taken from Acolyte, Merchant monsters of Biolab 5 (except MVPs).
	val1: +% Damage
	val2: +% Defense

SC_LHZ_DUN_N2	(EFST_LHZ_DUN_N2)
	desc: Increases damage against Acolyte, Merchant and reduces damage taken from Mage, Archer monsters of Biolab 5 (except MVPs).
	val1: +% Damage
	val2: +% Defense

SC_LHZ_DUN_N3	(EFST_LHZ_DUN_N3)
	desc: Increases damage against Mage, Archer and reduces damage taken from Swordman, Thief monsters of Biolab 5 (except MVPs).
	val1: +% Damage
	val2: +% Defense

SC_LHZ_DUN_N4	(EFST_LHZ_DUN_N4)
	desc: Increases and reduces damage against MVPs of Biolab 5.
	val1: +% Damage
	val2: +% Defense

SC_DORAM_BUF_01 ()
	desc: Recovers 10 HP every 10 seconds.

SC_DORAM_BUF_02 ()
	desc: Recovers 5 SP every 10 seconds.

SC_INCREASE_MAXHP (EFST_ATKER_ASPD)
	desc: Increases MaxHP. Increases natural HP regeneration.
	val1: + HP
	val2: +% HP regeneration

SC_INCREASE_MAXSP (EFST_ATKER_MOVESPEED)
	desc: Increases MaxSP. Increases natural SP regeneration.
	val1: + SP
	val2: +% SP regeneration

SC_REF_T_POTION (EFST_REF_T_POTION)
	desc: Decreases reflected damage by 100%.

SC_ADD_ATK_DAMAGE (EFST_ADD_ATK_DAMAGE)
	desc: Increases melee physical damage by 15%. Increases ranged physical damage by 15%.
	val1:

SC_ADD_MATK_DAMAGE (EFST_ADD_MATK_DAMAGE)
	desc: Increases all elemental magical damage by 15%.

SC_HELPANGEL (EFST_HELPANGEL)
	desc: Recover 1000 HP every second. Recover 350 SP every second.
	val1:
	val2:
	val3:
	val4: Tick time (milliseconds)

SC_SOUNDOFDESTRUCTION (EFST_SOUND_OF_DESTRUCTION)
	desc: Doubles incoming damage for 10 seconds.

SC_LUXANIMA (EFST_LUXANIMA)
	desc: Physical attacks has the chance to activate Storm Blast Level 1. Increases physical damage against all sizes.
		  Increases Critical Damage. Increases Melee and Ranged Physical Damage.
	val1:
	val2: Storm Blast success 15% (hardcoded)
	val3: Damage/HP/SP 30% increase (hardcoded)

SC_REUSE_LIMIT_LUXANIMA ()
	desc:
	val1:

SC_ENSEMBLEFATIGUE (EFST_ENSEMBLEFATIGUE)
	desc: Disables skill use. Movement and attack speed reduced by 30%.
	val1:
	val2: + 30 Speed and ASPD rates penalty (hardcoded)

SC_MISTY_FROST (EFST_MISTY_FROST)
	desc: Freezing.

SC_MAGIC_POISON (EFST_MAGIC_POISON)
	desc: Decreases resistance against all elemental attacks by 50%.
	val1:
	val2: Attribute Reduction (50, hardcoded).

SC_EP16_2_BUFF_SS (EFST_EP16_2_BUFF_SS)
	desc: ASPD +10.

SC_EP16_2_BUFF_SC (EFST_EP16_2_BUFF_SC)
	desc: CRIT +30.

SC_EP16_2_BUFF_AC (EFST_EP16_2_BUFF_AC)
	desc: Reduce variable cast time by 80%.

SC_EMERGENCY_MOVE (EFST_INC_AGI)
	desc: Increase AGI and walkspeed, AL_INCAGI effect.
	val1:
	val2: Movement speed +25 (hardcoded)

SC_PACKING_ENVELOPE1	(EFST_PACKING_ENVELOPE1)
	desc: Increases ATK
	val1: + watk

SC_PACKING_ENVELOPE2	(EFST_PACKING_ENVELOPE2)
	desc: Increases MATK
	val1: + ematk

SC_PACKING_ENVELOPE3	(EFST_PACKING_ENVELOPE3)
	desc: Increases MaxHP
	val1: +% MaxHP

SC_PACKING_ENVELOPE4	(EFST_PACKING_ENVELOPE4)
	desc: Increases MaxSP
	val1: +% MaxSP

SC_PACKING_ENVELOPE5	(EFST_PACKING_ENVELOPE5)
	desc: Increases FLEE
	val1: + Flee

SC_PACKING_ENVELOPE6	(EFST_PACKING_ENVELOPE6)
	desc: Increases ASPD
	val1: + ASPD

SC_PACKING_ENVELOPE7	(EFST_PACKING_ENVELOPE7)
	desc: Increases DEF
	val1: + DEF

SC_PACKING_ENVELOPE8	(EFST_PACKING_ENVELOPE8)
	desc: Increases MDEF
	val1: + MDEF

SC_PACKING_ENVELOPE9	(EFST_PACKING_ENVELOPE9)
	desc: Increases Critical rate
	val1: + Critical rate

SC_PACKING_ENVELOPE10	(EFST_PACKING_ENVELOPE10)
	desc: Increases HIT
	val1: + HIT

SC_WEAPONBREAKER
	desc: Bonus given when using NPC_WEAPONBRAKER skill
	val1: Skill level
	val2: val1 * 2 weapon break chance

SC_BLOCKING_PLAY	(EFST_BLOCKING_PLAY)
	desc: Keeps players from moving, using/picking/dropping items, using skills, chatting, and swapping equipment while changing maps.
	val1: N/A

SC_EXTREMITYFIST2	()
	desc:
	val1:
//===== rAthena Documentation ================================
//= NPC Whisper System
//===== By: ==================================================
//= lordalfa
//===== Last Updated: ========================================
//= 20120904
//===== Description: =========================================
//= A description of rAthena's NPC whispering system.
//============================================================

This piece of code to allows characters to execute events in NPCs by whispering 
them up to ten parameters. The NPC must have an "OnWhisperGlobal" label, or an 
"event not found" error will result.

	NPC:<NPC Name>		<String>{#String 2{#...{#String 10}}}
	
The whispered strings are separated by the "#" character, and are each stored
into separate temporary character string variables:

	@whispervar0$, @whispervar1$, ... @whispervar9$

---------------------------------------------------------------------------------

Below is an example of how this feature might be used.
You whisper an NPC "NPCCommander" in-game with the following instructions:

	NPC:NPCCommander	Report#Killstealing#Lordalfa

The parameters are passed on to the "OnWhisperGlobal" label of the NPC, and can
be processed accordingly:

-	script	NPCCommander	-1,{
OnWhisperGlobal:
	// Inform player "Lordalfa" that he has been reported for killstealing.
	if (@whispervar0$ == "Report")
		message @whispervar2$,"You have been reported for "+@whispervar1$+".";
	end;
}

This could also be used for hidden event triggers:

-	script	EventManager	-1,{
OnWhisperGlobal:
	if (getgmlevel() < 80) end;
	if (@whispervar0$ == "pvp") {
		// Script for a PVP event.
	}
	else if (@whispervar0$ == "mvp") {
		// Script for an MVP summoning event.
	}
	end;
}
//===== rAthena Documentation ================================
//= WoE Time Explanation
//===== By: ==================================================
//= erKURITA
//===== Last Updated: ========================================
//= 20161206
//===== Description: =========================================
//= Details on the behavior of the default WoE controller.
//============================================================

There are 2 main commands that determine WoE times:
OnClock<time>: and gettime(<type>).

OnClock<time> triggers when <time> is reached.
The format is HHMM, where H = hour, M = minute.
OnClock2350: would run at 23:50, server time.

gettime(<type>) is a function that checks for certain
information regarding time. The types are:

	DT_SECOND - Seconds (of the current minute)
	DT_MINUTE - Minutes (of the current hour)
	DT_HOUR - Hour (of the current day)
	DT_DAYOFWEEK - Week day (constants for MONDAY to SUNDAY are available)
	DT_DAYOFMONTH - Day of the current month
	DT_MONTH - Month (constants for JANUARY to DECEMBER are available)
	DT_YEAR - Year
	DT_DAYOFYEAR - Day of the year

This way, we can check for a desired minute, hour, day, month, etc.

-------------------------------------------------------------------------------

Now the structure:

	OnClock2100:	// Start time for Tuesday and Thursday
	OnClock2300:	// End time for Tuesday and Thursday
	OnClock1600:	// Start time for Saturday
	OnClock1800:	// End time for Saturday

These 4 labels will run one after the other, reaching the next check:

	if((gettime(DT_DAYOFWEEK)==TUESDAY) && (gettime(DT_HOUR)>=21 && gettime(DT_HOUR)<23)) goto L_Start;
	if((gettime(DT_DAYOFWEEK)==THURSDAY) && (gettime(DT_HOUR)>=21 && gettime(DT_HOUR)<23)) goto L_Start;
	if((gettime(DT_DAYOFWEEK)==SATURDAY) && (gettime(DT_HOUR)>=16 && gettime(DT_HOUR)<18)) goto L_Start;

This part will check for the times. Since both Start and End times run
through the same chain of commands, these are important checks to ensure
it's the right time. Let's take the following example:

	if((gettime(DT_DAYOFWEEK)==TUESDAY) && (gettime(DT_HOUR)>=21 && gettime(DT_HOUR)<23))

The first gettime() is checking for a type DT_DAYOFWEEK, the day of the week, and it's
comparing it to the one desired, which is TUESDAY. The function will
return either true or false.

The second gettime is checking type DT_HOUR, the hour, and it's comparing
it to 21. If the first part is greater than or equal to (>=) the second part,
the comparison will return 1.

The third and last gettime is checking again for the hour, but the time has to be less
than the specified time (in this case, 23).

Now, look at the parentheses. Parentheses are very important when making comparisons
and conditions. Check the order of these. I'll place dummy characters for this example:

	if ((X && (Y && Z)) goto L_Start;

It's saying, if Y and Z are true, the condition is met. Now let's use another set
of dummy characters. We're checking if (Y && Z) = G:

	if (X && G) goto L_Start;

It's saying that if X and G are true, the condition is met, thus proceeding to L_Start.

Now, the last part of the script, regarding the end of WoE time:

	if((gettime(DT_DAYOFWEEK)==TUESDAY) && (gettime(DT_HOUR)==23)) goto L_End;
	if((gettime(DT_DAYOFWEEK)==THURSDAY) && (gettime(DT_HOUR)==23)) goto L_End;
	if((gettime(DT_DAYOFWEEK)==SATURDAY) && (gettime(DT_HOUR)==18)) goto L_End;
	end;

This is the same as before, but it's checking for the day in the first gettime() and
the hour on the second. If both conditions are true, WoE will end. We're checking 
here for the end time, not the start.

Another important thing is "OnAgitInit:". This special label will be run as soon as the
castle data is loaded from the char data. It will check for the above start and end times
to see if it's in WoE time, hence why the hours have to be checked.

-------------------------------------------------------------------------------

An example of how to set the WoE so it starts on Monday, at 4 pm and ends up at 10 pm:

	OnClock1600: // 16:00 = 4 pm
	OnClock2200: // 22:00 = 10 pm

	OnAgitInit: // This can only be written once: put OnClock above and the checks below.

	if ((gettime(DT_DAYOFWEEK)==MONDAY) && (gettime(DT_HOUR)>=16 && gettime(DT_HOUR)<22)) goto L_Start;
	if ((gettime(DT_DAYOFWEEK)==MONDAY) && (gettime(DT_HOUR)==22) goto L_End;
	end; // Don't forget this!

